/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/distill.js":
/*!************************!*\
  !*** ./src/distill.js ***!
  \************************/
/***/ ((module, exports, __webpack_require__) => {

eval("var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;function _wrapNativeSuper(t) { var r = \"function\" == typeof Map ? new Map() : void 0; return _wrapNativeSuper = function _wrapNativeSuper(t) { if (null === t || !_isNativeFunction(t)) return t; if (\"function\" != typeof t) throw new TypeError(\"Super expression must either be null or a function\"); if (void 0 !== r) { if (r.has(t)) return r.get(t); r.set(t, Wrapper); } function Wrapper() { return _construct(t, arguments, _getPrototypeOf(this).constructor); } return Wrapper.prototype = Object.create(t.prototype, { constructor: { value: Wrapper, enumerable: !1, writable: !0, configurable: !0 } }), _setPrototypeOf(Wrapper, t); }, _wrapNativeSuper(t); }\nfunction _construct(t, e, r) { if (_isNativeReflectConstruct()) return Reflect.construct.apply(null, arguments); var o = [null]; o.push.apply(o, e); var p = new (t.bind.apply(t, o))(); return r && _setPrototypeOf(p, r.prototype), p; }\nfunction _isNativeFunction(t) { try { return -1 !== Function.toString.call(t).indexOf(\"[native code]\"); } catch (n) { return \"function\" == typeof t; } }\nfunction _toConsumableArray(r) { return _arrayWithoutHoles(r) || _iterableToArray(r) || _unsupportedIterableToArray(r) || _nonIterableSpread(); }\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _iterableToArray(r) { if (\"undefined\" != typeof Symbol && null != r[Symbol.iterator] || null != r[\"@@iterator\"]) return Array.from(r); }\nfunction _arrayWithoutHoles(r) { if (Array.isArray(r)) return _arrayLikeToArray(r); }\nfunction _createForOfIteratorHelper(r, e) { var t = \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"]; if (!t) { if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && \"number\" == typeof r.length) { t && (r = t); var _n = 0, F = function F() {}; return { s: F, n: function n() { return _n >= r.length ? { done: !0 } : { done: !1, value: r[_n++] }; }, e: function e(r) { throw r; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var o, a = !0, u = !1; return { s: function s() { t = t.call(r); }, n: function n() { var r = t.next(); return a = r.done, r; }, e: function e(r) { u = !0, o = r; }, f: function f() { try { a || null == t[\"return\"] || t[\"return\"](); } finally { if (u) throw o; } } }; }\nfunction _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }\nfunction _possibleConstructorReturn(t, e) { if (e && (\"object\" == _typeof(e) || \"function\" == typeof e)) return e; if (void 0 !== e) throw new TypeError(\"Derived constructors may only return object or undefined\"); return _assertThisInitialized(t); }\nfunction _assertThisInitialized(e) { if (void 0 === e) throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); return e; }\nfunction _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }\nfunction _superPropGet(t, o, e, r) { var p = _get(_getPrototypeOf(1 & r ? t.prototype : t), o, e); return 2 & r && \"function\" == typeof p ? function (t) { return p.apply(e, t); } : p; }\nfunction _get() { return _get = \"undefined\" != typeof Reflect && Reflect.get ? Reflect.get.bind() : function (e, t, r) { var p = _superPropBase(e, t); if (p) { var n = Object.getOwnPropertyDescriptor(p, t); return n.get ? n.get.call(arguments.length < 3 ? e : r) : n.value; } }, _get.apply(null, arguments); }\nfunction _superPropBase(t, o) { for (; !{}.hasOwnProperty.call(t, o) && null !== (t = _getPrototypeOf(t));); return t; }\nfunction _getPrototypeOf(t) { return _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function (t) { return t.__proto__ || Object.getPrototypeOf(t); }, _getPrototypeOf(t); }\nfunction _inherits(t, e) { if (\"function\" != typeof e && null !== e) throw new TypeError(\"Super expression must either be null or a function\"); t.prototype = Object.create(e && e.prototype, { constructor: { value: t, writable: !0, configurable: !0 } }), Object.defineProperty(t, \"prototype\", { writable: !1 }), e && _setPrototypeOf(t, e); }\nfunction _setPrototypeOf(t, e) { return _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function (t, e) { return t.__proto__ = e, t; }, _setPrototypeOf(t, e); }\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\"); }\nfunction _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }\nfunction _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", { writable: !1 }), e; }\nfunction _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nfunction _slicedToArray(r, e) { return _arrayWithHoles(r) || _iterableToArrayLimit(r, e) || _unsupportedIterableToArray(r, e) || _nonIterableRest(); }\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _unsupportedIterableToArray(r, a) { if (r) { if (\"string\" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return \"Object\" === t && r.constructor && (t = r.constructor.name), \"Map\" === t || \"Set\" === t ? Array.from(r) : \"Arguments\" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }\nfunction _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }\nfunction _iterableToArrayLimit(r, l) { var t = null == r ? null : \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t[\"return\"] && (u = t[\"return\"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }\nfunction _arrayWithHoles(r) { if (Array.isArray(r)) return r; }\n(function (factory) {\n   true ? !(__WEBPACK_AMD_DEFINE_FACTORY__ = (factory),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) :\n\t\t__WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : 0;\n})(function () {\n  'use strict';\n\n  // Copyright 2018 The Distill Template Authors\n  //\n  // Licensed under the Apache License, Version 2.0 (the \"License\");\n  // you may not use this file except in compliance with the License.\n  // You may obtain a copy of the License at\n  //\n  //      http://www.apache.org/licenses/LICENSE-2.0\n  //\n  // Unless required by applicable law or agreed to in writing, software\n  // distributed under the License is distributed on an \"AS IS\" BASIS,\n  // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  // See the License for the specific language governing permissions and\n  // limitations under the License.\n  var days = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\n  var months = ['Jan.', 'Feb.', 'March', 'April', 'May', 'June', 'July', 'Aug.', 'Sept.', 'Oct.', 'Nov.', 'Dec.'];\n  var zeroPad = function zeroPad(n) {\n    return n < 10 ? '0' + n : n;\n  };\n  var RFC = function RFC(date) {\n    var day = days[date.getDay()].substring(0, 3);\n    var paddedDate = zeroPad(date.getDate());\n    var month = months[date.getMonth()].substring(0, 3);\n    var year = date.getFullYear().toString();\n    var hours = date.getUTCHours().toString();\n    var minutes = date.getUTCMinutes().toString();\n    var seconds = date.getUTCSeconds().toString();\n    return \"\".concat(day, \", \").concat(paddedDate, \" \").concat(month, \" \").concat(year, \" \").concat(hours, \":\").concat(minutes, \":\").concat(seconds, \" Z\");\n  };\n  var objectFromMap = function objectFromMap(map) {\n    var object = Array.from(map).reduce(function (object, _ref) {\n      var _ref2 = _slicedToArray(_ref, 2),\n        key = _ref2[0],\n        value = _ref2[1];\n      return Object.assign(object, _defineProperty({}, key, value)) // Be careful! Maps can have non-String keys; object literals can't.\n      ;\n    }, {});\n    return object;\n  };\n  var mapFromObject = function mapFromObject(object) {\n    var map = new Map();\n    for (var property in object) {\n      if (object.hasOwnProperty(property)) {\n        map.set(property, object[property]);\n      }\n    }\n    return map;\n  };\n  var Author = /*#__PURE__*/function () {\n    // constructor(name='', personalURL='', affiliation='', affiliationURL='') {\n    //   this.name = name; // 'Chris Olah'\n    //   this.personalURL = personalURL; // 'https://colah.github.io'\n    //   this.affiliation = affiliation; // 'Google Brain'\n    //   this.affiliationURL = affiliationURL; // 'https://g.co/brain'\n    // }\n\n    function Author(object) {\n      _classCallCheck(this, Author);\n      this.name = object.author; // 'Chris Olah'\n      this.personalURL = object.authorURL; // 'https://colah.github.io'\n      this.affiliation = object.affiliation; // 'Google Brain'\n      this.affiliationURL = object.affiliationURL; // 'https://g.co/brain'\n      this.affiliations = object.affiliations || []; // new-style affiliations\n    }\n\n    // 'Chris'\n    return _createClass(Author, [{\n      key: \"firstName\",\n      get: function get() {\n        var names = this.name.split(' ');\n        return names.slice(0, names.length - 1).join(' ');\n      }\n\n      // 'Olah'\n    }, {\n      key: \"lastName\",\n      get: function get() {\n        var names = this.name.split(' ');\n        return names[names.length - 1];\n      }\n    }]);\n  }();\n  function mergeFromYMLFrontmatter(target, source) {\n    target.title = source.title;\n    if (source.published) {\n      if (source.published instanceof Date) {\n        target.publishedDate = source.published;\n      } else if (source.published.constructor === String) {\n        target.publishedDate = new Date(source.published);\n      }\n    }\n    if (source.publishedDate) {\n      if (source.publishedDate instanceof Date) {\n        target.publishedDate = source.publishedDate;\n      } else if (source.publishedDate.constructor === String) {\n        target.publishedDate = new Date(source.publishedDate);\n      } else {\n        console.error('Don\\'t know what to do with published date: ' + source.publishedDate);\n      }\n    }\n    target.description = source.description;\n    target.authors = source.authors.map(function (authorObject) {\n      return new Author(authorObject);\n    });\n    target.katex = source.katex;\n    target.password = source.password;\n    if (source.doi) {\n      target.doi = source.doi;\n    }\n  }\n  var FrontMatter = /*#__PURE__*/function () {\n    function FrontMatter() {\n      _classCallCheck(this, FrontMatter);\n      this.title = 'unnamed article'; // 'Attention and Augmented Recurrent Neural Networks'\n      this.description = ''; // 'A visual overview of neural attention...'\n      this.authors = []; // Array of Author(s)\n\n      this.bibliography = new Map();\n      this.bibliographyParsed = false;\n      //  {\n      //    'gregor2015draw': {\n      //      'title': 'DRAW: A recurrent neural network for image generation',\n      //      'author': 'Gregor, Karol and Danihelka, Ivo and Graves, Alex and Rezende, Danilo Jimenez and Wierstra, Daan',\n      //      'journal': 'arXiv preprint arXiv:1502.04623',\n      //      'year': '2015',\n      //      'url': 'https://arxiv.org/pdf/1502.04623.pdf',\n      //      'type': 'article'\n      //    },\n      //  }\n\n      // Citation keys should be listed in the order that they are appear in the document.\n      // Each key refers to a key in the bibliography dictionary.\n      this.citations = []; // [ 'gregor2015draw', 'mercier2011humans' ]\n      this.citationsCollected = false;\n\n      //\n      // Assigned from posts.csv\n      //\n\n      //  publishedDate: 2016-09-08T07:00:00.000Z,\n      //  tags: [ 'rnn' ],\n      //  distillPath: '2016/augmented-rnns',\n      //  githubPath: 'distillpub/post--augmented-rnns',\n      //  doiSuffix: 1,\n\n      //\n      // Assigned from journal\n      //\n      this.journal = {};\n      //  journal: {\n      //    'title': 'Distill',\n      //    'full_title': 'Distill',\n      //    'abbrev_title': 'Distill',\n      //    'url': 'http://distill.pub',\n      //    'doi': '10.23915/distill',\n      //    'publisherName': 'Distill Working Group',\n      //    'publisherEmail': 'admin@distill.pub',\n      //    'issn': '2476-0757',\n      //    'editors': [...],\n      //    'committee': [...]\n      //  }\n      //  volume: 1,\n      //  issue: 9,\n\n      this.katex = {};\n\n      //\n      // Assigned from publishing process\n      //\n\n      //  githubCompareUpdatesUrl: 'https://github.com/distillpub/post--augmented-rnns/compare/1596e094d8943d2dc0ea445d92071129c6419c59...3bd9209e0c24d020f87cf6152dcecc6017cbc193',\n      //  updatedDate: 2017-03-21T07:13:16.000Z,\n      //  doi: '10.23915/distill.00001',\n      this.doi = undefined;\n      this.publishedDate = undefined;\n    }\n\n    // Example:\n    // title: Demo Title Attention and Augmented Recurrent Neural Networks\n    // published: Jan 10, 2017\n    // authors:\n    // - Chris Olah:\n    // - Shan Carter: http://shancarter.com\n    // affiliations:\n    // - Google Brain:\n    // - Google Brain: http://g.co/brain\n\n    //\n    // Computed Properties\n    //\n\n    // 'http://distill.pub/2016/augmented-rnns',\n    return _createClass(FrontMatter, [{\n      key: \"url\",\n      get: function get() {\n        if (this._url) {\n          return this._url;\n        } else if (this.distillPath && this.journal.url) {\n          return this.journal.url + '/' + this.distillPath;\n        } else if (this.journal.url) {\n          return this.journal.url;\n        }\n      }\n\n      // 'https://github.com/distillpub/post--augmented-rnns',\n      ,\n      set: function set(value) {\n        this._url = value;\n      }\n    }, {\n      key: \"githubUrl\",\n      get: function get() {\n        if (this.githubPath) {\n          return 'https://github.com/' + this.githubPath;\n        } else {\n          return undefined;\n        }\n      }\n\n      // TODO resolve differences in naming of URL/Url/url.\n      // 'http://distill.pub/2016/augmented-rnns/thumbnail.jpg',\n    }, {\n      key: \"previewURL\",\n      get: function get() {\n        return this._previewURL ? this._previewURL : this.url + '/thumbnail.jpg';\n      }\n\n      // 'Thu, 08 Sep 2016 00:00:00 -0700',\n      ,\n      set: function set(value) {\n        this._previewURL = value;\n      }\n    }, {\n      key: \"publishedDateRFC\",\n      get: function get() {\n        return RFC(this.publishedDate);\n      }\n\n      // 'Thu, 08 Sep 2016 00:00:00 -0700',\n    }, {\n      key: \"updatedDateRFC\",\n      get: function get() {\n        return RFC(this.updatedDate);\n      }\n\n      // 2016,\n    }, {\n      key: \"publishedYear\",\n      get: function get() {\n        return this.publishedDate.getFullYear();\n      }\n\n      // 'Sept',\n    }, {\n      key: \"publishedMonth\",\n      get: function get() {\n        return months[this.publishedDate.getMonth()];\n      }\n\n      // 8,\n    }, {\n      key: \"publishedDay\",\n      get: function get() {\n        return this.publishedDate.getDate();\n      }\n\n      // '09',\n    }, {\n      key: \"publishedMonthPadded\",\n      get: function get() {\n        return zeroPad(this.publishedDate.getMonth() + 1);\n      }\n\n      // '08',\n    }, {\n      key: \"publishedDayPadded\",\n      get: function get() {\n        return zeroPad(this.publishedDate.getDate());\n      }\n    }, {\n      key: \"publishedISODateOnly\",\n      get: function get() {\n        return this.publishedDate.toISOString().split('T')[0];\n      }\n    }, {\n      key: \"volume\",\n      get: function get() {\n        var volume = this.publishedYear - 2015;\n        if (volume < 1) {\n          throw new Error('Invalid publish date detected during computing volume');\n        }\n        return volume;\n      }\n    }, {\n      key: \"issue\",\n      get: function get() {\n        return this.publishedDate.getMonth() + 1;\n      }\n\n      // 'Olah & Carter',\n    }, {\n      key: \"concatenatedAuthors\",\n      get: function get() {\n        if (this.authors.length > 2) {\n          return this.authors[0].lastName + ', et al.';\n        } else if (this.authors.length === 2) {\n          return this.authors[0].lastName + ' & ' + this.authors[1].lastName;\n        } else if (this.authors.length === 1) {\n          return this.authors[0].lastName;\n        }\n      }\n\n      // 'Olah, Chris and Carter, Shan',\n    }, {\n      key: \"bibtexAuthors\",\n      get: function get() {\n        return this.authors.map(function (author) {\n          return author.lastName + ', ' + author.firstName;\n        }).join(' and ');\n      }\n\n      // 'olah2016attention'\n    }, {\n      key: \"slug\",\n      get: function get() {\n        var slug = '';\n        if (this.authors.length) {\n          slug += this.authors[0].lastName.toLowerCase();\n          slug += this.publishedYear;\n          slug += this.title.split(' ')[0].toLowerCase();\n        }\n        return slug || 'Untitled';\n      }\n    }, {\n      key: \"bibliographyEntries\",\n      get: function get() {\n        var _this = this;\n        return new Map(this.citations.map(function (citationKey) {\n          var entry = _this.bibliography.get(citationKey);\n          return [citationKey, entry];\n        }));\n      }\n    }, {\n      key: \"bibliography\",\n      get: function get() {\n        return this._bibliography;\n      },\n      set: function set(bibliography) {\n        if (bibliography instanceof Map) {\n          this._bibliography = bibliography;\n        } else if (_typeof(bibliography) === 'object') {\n          this._bibliography = mapFromObject(bibliography);\n        }\n      }\n    }, {\n      key: \"assignToObject\",\n      value: function assignToObject(target) {\n        Object.assign(target, this);\n        target.bibliography = objectFromMap(this.bibliographyEntries);\n        target.url = this.url;\n        target.doi = this.doi;\n        target.githubUrl = this.githubUrl;\n        target.previewURL = this.previewURL;\n        if (this.publishedDate) {\n          target.volume = this.volume;\n          target.issue = this.issue;\n          target.publishedDateRFC = this.publishedDateRFC;\n          target.publishedYear = this.publishedYear;\n          target.publishedMonth = this.publishedMonth;\n          target.publishedDay = this.publishedDay;\n          target.publishedMonthPadded = this.publishedMonthPadded;\n          target.publishedDayPadded = this.publishedDayPadded;\n        }\n        if (this.updatedDate) {\n          target.updatedDateRFC = this.updatedDateRFC;\n        }\n        target.concatenatedAuthors = this.concatenatedAuthors;\n        target.bibtexAuthors = this.bibtexAuthors;\n        target.slug = this.slug;\n      }\n    }], [{\n      key: \"fromObject\",\n      value: function fromObject(source) {\n        var frontMatter = new FrontMatter();\n        Object.assign(frontMatter, source);\n        return frontMatter;\n      }\n    }]);\n  }(); // Copyright 2018 The Distill Template Authors\n  //\n  // Licensed under the Apache License, Version 2.0 (the \"License\");\n  // you may not use this file except in compliance with the License.\n  // You may obtain a copy of the License at\n  //\n  //      http://www.apache.org/licenses/LICENSE-2.0\n  //\n  // Unless required by applicable law or agreed to in writing, software\n  // distributed under the License is distributed on an \"AS IS\" BASIS,\n  // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  // See the License for the specific language governing permissions and\n  // limitations under the License.\n  var Mutating = function Mutating(superclass) {\n    return /*#__PURE__*/function (_superclass) {\n      function _class() {\n        var _this2;\n        _classCallCheck(this, _class);\n        _this2 = _callSuper(this, _class);\n\n        // set up mutation observer\n        var options = {\n          childList: true,\n          characterData: true,\n          subtree: true\n        };\n        var observer = new MutationObserver(function () {\n          observer.disconnect();\n          _this2.renderIfPossible();\n          observer.observe(_this2, options);\n        });\n\n        // ...and listen for changes\n        observer.observe(_this2, options);\n        return _this2;\n      }\n      _inherits(_class, _superclass);\n      return _createClass(_class, [{\n        key: \"connectedCallback\",\n        value: function connectedCallback() {\n          _superPropGet(_class, \"connectedCallback\", this, 3)([]);\n          this.renderIfPossible();\n        }\n\n        // potential TODO: check if this is enough for all our usecases\n        // maybe provide a custom function to tell if we have enough information to render\n      }, {\n        key: \"renderIfPossible\",\n        value: function renderIfPossible() {\n          if (this.textContent && this.root) {\n            this.renderContent();\n          }\n        }\n      }, {\n        key: \"renderContent\",\n        value: function renderContent() {\n          console.error(\"Your class \".concat(this.constructor.name, \" must provide a custom renderContent() method!\"));\n        }\n      }]);\n    }(superclass); // end class\n  }; // end mixin function\n\n  // Copyright 2018 The Distill Template Authors\n  //\n  // Licensed under the Apache License, Version 2.0 (the \"License\");\n  // you may not use this file except in compliance with the License.\n  // You may obtain a copy of the License at\n  //\n  //      http://www.apache.org/licenses/LICENSE-2.0\n  //\n  // Unless required by applicable law or agreed to in writing, software\n  // distributed under the License is distributed on an \"AS IS\" BASIS,\n  // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  // See the License for the specific language governing permissions and\n  // limitations under the License.\n\n  /*global ShadyCSS*/\n\n  var Template = function Template(name, templateString) {\n    var useShadow = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n    return function (superclass) {\n      var template = document.createElement('template');\n      template.innerHTML = templateString;\n      if (useShadow && 'ShadyCSS' in window) {\n        ShadyCSS.prepareTemplate(template, name);\n      }\n      return /*#__PURE__*/function (_superclass2) {\n        function _class2() {\n          var _this3;\n          _classCallCheck(this, _class2);\n          _this3 = _callSuper(this, _class2);\n          _this3.clone = document.importNode(template.content, true);\n          if (useShadow) {\n            _this3.attachShadow({\n              mode: 'open'\n            });\n            _this3.shadowRoot.appendChild(_this3.clone);\n          }\n          return _this3;\n        }\n        _inherits(_class2, _superclass2);\n        return _createClass(_class2, [{\n          key: \"connectedCallback\",\n          value: function connectedCallback() {\n            if (this.hasAttribute('distill-prerendered')) {\n              return;\n            }\n            if (useShadow) {\n              if ('ShadyCSS' in window) {\n                ShadyCSS.styleElement(this);\n              }\n            } else {\n              this.insertBefore(this.clone, this.firstChild);\n            }\n          }\n        }, {\n          key: \"root\",\n          get: function get() {\n            if (useShadow) {\n              return this.shadowRoot;\n            } else {\n              return this;\n            }\n          }\n\n          /* TODO: Are we using these? Should we even? */\n        }, {\n          key: \"$\",\n          value: function $(query) {\n            return this.root.querySelector(query);\n          }\n        }, {\n          key: \"$$\",\n          value: function $$(query) {\n            return this.root.querySelectorAll(query);\n          }\n        }], [{\n          key: \"is\",\n          get: function get() {\n            return name;\n          }\n        }]);\n      }(superclass);\n    };\n  };\n  var math = \"/*\\n * Copyright 2018 The Distill Template Authors\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License.\\n * You may obtain a copy of the License at\\n *\\n *      http://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n */\\n\\nspan.katex-display {\\n  text-align: left;\\n  padding: 8px 0 8px 0;\\n  margin: 0.5em 0 0.5em 1em;\\n}\\n\\nspan.katex {\\n  -webkit-font-smoothing: antialiased;\\n  color: rgba(0, 0, 0, 0.8);\\n  font-size: 1.18em;\\n}\\n\";\n\n  // Copyright 2018 The Distill Template Authors\n  //\n  // Licensed under the Apache License, Version 2.0 (the \"License\");\n  // you may not use this file except in compliance with the License.\n  // You may obtain a copy of the License at\n  //\n  //      http://www.apache.org/licenses/LICENSE-2.0\n  //\n  // Unless required by applicable law or agreed to in writing, software\n  // distributed under the License is distributed on an \"AS IS\" BASIS,\n  // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  // See the License for the specific language governing permissions and\n  // limitations under the License.\n\n  // This is a straight concatenation of code from KaTeX's contrib folder,\n  // but we aren't using some of their helpers that don't work well outside a browser environment.\n\n  /*global katex */\n\n  var findEndOfMath = function findEndOfMath(delimiter, text, startIndex) {\n    // Adapted from\n    // https://github.com/Khan/perseus/blob/master/src/perseus-markdown.jsx\n    var index = startIndex;\n    var braceLevel = 0;\n    var delimLength = delimiter.length;\n    while (index < text.length) {\n      var character = text[index];\n      if (braceLevel <= 0 && text.slice(index, index + delimLength) === delimiter) {\n        return index;\n      } else if (character === \"\\\\\") {\n        index++;\n      } else if (character === \"{\") {\n        braceLevel++;\n      } else if (character === \"}\") {\n        braceLevel--;\n      }\n      index++;\n    }\n    return -1;\n  };\n  var splitAtDelimiters = function splitAtDelimiters(startData, leftDelim, rightDelim, display) {\n    var finalData = [];\n    for (var i = 0; i < startData.length; i++) {\n      if (startData[i].type === \"text\") {\n        var text = startData[i].data;\n        var lookingForLeft = true;\n        var currIndex = 0;\n        var nextIndex = void 0;\n        nextIndex = text.indexOf(leftDelim);\n        if (nextIndex !== -1) {\n          currIndex = nextIndex;\n          finalData.push({\n            type: \"text\",\n            data: text.slice(0, currIndex)\n          });\n          lookingForLeft = false;\n        }\n        while (true) {\n          // eslint-disable-line no-constant-condition\n          if (lookingForLeft) {\n            nextIndex = text.indexOf(leftDelim, currIndex);\n            if (nextIndex === -1) {\n              break;\n            }\n            finalData.push({\n              type: \"text\",\n              data: text.slice(currIndex, nextIndex)\n            });\n            currIndex = nextIndex;\n          } else {\n            nextIndex = findEndOfMath(rightDelim, text, currIndex + leftDelim.length);\n            if (nextIndex === -1) {\n              break;\n            }\n            finalData.push({\n              type: \"math\",\n              data: text.slice(currIndex + leftDelim.length, nextIndex),\n              rawData: text.slice(currIndex, nextIndex + rightDelim.length),\n              display: display\n            });\n            currIndex = nextIndex + rightDelim.length;\n          }\n          lookingForLeft = !lookingForLeft;\n        }\n        finalData.push({\n          type: \"text\",\n          data: text.slice(currIndex)\n        });\n      } else {\n        finalData.push(startData[i]);\n      }\n    }\n    return finalData;\n  };\n  var splitWithDelimiters = function splitWithDelimiters(text, delimiters) {\n    var data = [{\n      type: \"text\",\n      data: text\n    }];\n    for (var i = 0; i < delimiters.length; i++) {\n      var delimiter = delimiters[i];\n      data = splitAtDelimiters(data, delimiter.left, delimiter.right, delimiter.display || false);\n    }\n    return data;\n  };\n\n  /* Note: optionsCopy is mutated by this method. If it is ever exposed in the\r\n   * API, we should copy it before mutating.\r\n   */\n  var renderMathInText = function renderMathInText(text, optionsCopy) {\n    var data = splitWithDelimiters(text, optionsCopy.delimiters);\n    var fragment = document.createDocumentFragment();\n    for (var i = 0; i < data.length; i++) {\n      if (data[i].type === \"text\") {\n        fragment.appendChild(document.createTextNode(data[i].data));\n      } else {\n        var tag = document.createElement(\"d-math\");\n        var _math = data[i].data;\n        // Override any display mode defined in the settings with that\n        // defined by the text itself\n        optionsCopy.displayMode = data[i].display;\n        try {\n          tag.textContent = _math;\n          if (optionsCopy.displayMode) {\n            tag.setAttribute(\"block\", \"\");\n          }\n        } catch (e) {\n          if (!(e instanceof katex.ParseError)) {\n            throw e;\n          }\n          optionsCopy.errorCallback(\"KaTeX auto-render: Failed to parse `\" + data[i].data + \"` with \", e);\n          fragment.appendChild(document.createTextNode(data[i].rawData));\n          continue;\n        }\n        fragment.appendChild(tag);\n      }\n    }\n    return fragment;\n  };\n  var _renderElem = function renderElem(elem, optionsCopy) {\n    for (var i = 0; i < elem.childNodes.length; i++) {\n      var childNode = elem.childNodes[i];\n      if (childNode.nodeType === 3) {\n        // Text node\n        var text = childNode.textContent;\n        if (optionsCopy.mightHaveMath(text)) {\n          var frag = renderMathInText(text, optionsCopy);\n          i += frag.childNodes.length - 1;\n          elem.replaceChild(frag, childNode);\n        }\n      } else if (childNode.nodeType === 1) {\n        // Element node\n        var shouldRender = optionsCopy.ignoredTags.indexOf(childNode.nodeName.toLowerCase()) === -1;\n        if (shouldRender) {\n          _renderElem(childNode, optionsCopy);\n        }\n      }\n      // Otherwise, it's something else, and ignore it.\n    }\n  };\n  var defaultAutoRenderOptions = {\n    delimiters: [{\n      left: \"$$\",\n      right: \"$$\",\n      display: true\n    }, {\n      left: \"\\\\[\",\n      right: \"\\\\]\",\n      display: true\n    }, {\n      left: \"\\\\(\",\n      right: \"\\\\)\",\n      display: false\n    }\n    // LaTeX uses this, but it ruins the display of normal `$` in text:\n    // {left: '$', right: '$', display: false},\n    ],\n    ignoredTags: [\"script\", \"noscript\", \"style\", \"textarea\", \"pre\", \"code\", \"svg\"],\n    errorCallback: function errorCallback(msg, err) {\n      console.error(msg, err);\n    }\n  };\n  var renderMathInElement = function renderMathInElement(elem, options) {\n    if (!elem) {\n      throw new Error(\"No element provided to render\");\n    }\n    var optionsCopy = Object.assign({}, defaultAutoRenderOptions, options);\n    var delimiterStrings = optionsCopy.delimiters.flatMap(function (d) {\n      return [d.left, d.right];\n    });\n    var mightHaveMath = function mightHaveMath(text) {\n      return delimiterStrings.some(function (d) {\n        return text.indexOf(d) !== -1;\n      });\n    };\n    optionsCopy.mightHaveMath = mightHaveMath;\n    _renderElem(elem, optionsCopy);\n  };\n\n  // Copyright 2018 The Distill Template Authors\n\n  var katexJSURL = 'https://distill.pub/third-party/katex/katex.min.js';\n  var katexCSSTag = '<link rel=\"stylesheet\" href=\"https://distill.pub/third-party/katex/katex.min.css\" crossorigin=\"anonymous\">';\n  var T = Template('d-math', \"\\n\".concat(katexCSSTag, \"\\n<style>\\n\\n:host {\\n  display: inline-block;\\n  contain: style;\\n}\\n\\n:host([block]) {\\n  display: block;\\n}\\n\\n\").concat(math, \"\\n</style>\\n<span id='katex-container'></span>\\n\"));\n\n  // DMath, not Math, because that would conflict with the JS built-in\n  var DMath = /*#__PURE__*/function (_Mutating) {\n    function DMath() {\n      _classCallCheck(this, DMath);\n      return _callSuper(this, DMath, arguments);\n    }\n    _inherits(DMath, _Mutating);\n    return _createClass(DMath, [{\n      key: \"options\",\n      get: function get() {\n        var localOptions = {\n          displayMode: this.hasAttribute('block')\n        };\n        return Object.assign(localOptions, DMath.katexOptions);\n      }\n    }, {\n      key: \"connectedCallback\",\n      value: function connectedCallback() {\n        _superPropGet(DMath, \"connectedCallback\", this, 3)([]);\n        if (!DMath.katexAdded) {\n          DMath.addKatex();\n        }\n      }\n    }, {\n      key: \"renderContent\",\n      value: function renderContent() {\n        if (typeof katex !== 'undefined') {\n          var container = this.root.querySelector('#katex-container');\n          katex.render(this.textContent, container, this.options);\n        }\n      }\n    }], [{\n      key: \"katexOptions\",\n      get: function get() {\n        if (!DMath._katexOptions) {\n          DMath._katexOptions = {\n            delimiters: [{\n              'left': '$$',\n              'right': '$$',\n              'display': false\n            }]\n          };\n        }\n        return DMath._katexOptions;\n      },\n      set: function set(options) {\n        DMath._katexOptions = options;\n        if (DMath.katexOptions.delimiters) {\n          if (!DMath.katexAdded) {\n            DMath.addKatex();\n          } else {\n            DMath.katexLoadedCallback();\n          }\n        }\n      }\n    }, {\n      key: \"katexLoadedCallback\",\n      value: function katexLoadedCallback() {\n        // render all d-math tags\n        var mathTags = document.querySelectorAll('d-math');\n        var _iterator = _createForOfIteratorHelper(mathTags),\n          _step;\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var mathTag = _step.value;\n            mathTag.renderContent();\n          }\n          // transform inline delimited math to d-math tags\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n        if (DMath.katexOptions.delimiters) {\n          renderMathInElement(document.body, DMath.katexOptions);\n        }\n      }\n    }, {\n      key: \"addKatex\",\n      value: function addKatex() {\n        // css tag can use this convenience function\n        document.head.insertAdjacentHTML('beforeend', katexCSSTag);\n        // script tag has to be created to work properly\n        var scriptTag = document.createElement('script');\n        scriptTag.src = katexJSURL;\n        scriptTag.async = true;\n        scriptTag.onload = DMath.katexLoadedCallback;\n        scriptTag.crossorigin = 'anonymous';\n        document.head.appendChild(scriptTag);\n        DMath.katexAdded = true;\n      }\n    }]);\n  }(Mutating(T(HTMLElement)));\n  DMath.katexAdded = false;\n  DMath.inlineMathRendered = false;\n  window.DMath = DMath; // TODO: check if this can be removed, or if we should expose a distill global\n\n  // Copyright 2018 The Distill Template Authors\n  //\n  // Licensed under the Apache License, Version 2.0 (the \"License\");\n  // you may not use this file except in compliance with the License.\n  // You may obtain a copy of the License at\n  //\n  //      http://www.apache.org/licenses/LICENSE-2.0\n  //\n  // Unless required by applicable law or agreed to in writing, software\n  // distributed under the License is distributed on an \"AS IS\" BASIS,\n  // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  // See the License for the specific language governing permissions and\n  // limitations under the License.\n\n  function collect_citations() {\n    var dom = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : document;\n    var citations = new Set();\n    var citeTags = dom.querySelectorAll(\"d-cite\");\n    var _iterator2 = _createForOfIteratorHelper(citeTags),\n      _step2;\n    try {\n      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n        var tag = _step2.value;\n        var keyString = tag.getAttribute(\"key\") || tag.getAttribute(\"bibtex-key\");\n        var keys = keyString.split(\",\").map(function (k) {\n          return k.trim();\n        });\n        var _iterator3 = _createForOfIteratorHelper(keys),\n          _step3;\n        try {\n          for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n            var key = _step3.value;\n            citations.add(key);\n          }\n        } catch (err) {\n          _iterator3.e(err);\n        } finally {\n          _iterator3.f();\n        }\n      }\n    } catch (err) {\n      _iterator2.e(err);\n    } finally {\n      _iterator2.f();\n    }\n    return _toConsumableArray(citations);\n  }\n  function author_string(ent, template, sep, finalSep) {\n    if (ent.author == null) {\n      return \"\";\n    }\n    var names = ent.author.split(\" and \");\n    var name_strings = names.map(function (name) {\n      name = name.trim();\n      if (name.indexOf(\",\") != -1) {\n        var last = name.split(\",\")[0].trim();\n        var firsts = name.split(\",\")[1];\n      } else if (name.indexOf(\" \") != -1) {\n        var last = name.split(\" \").slice(-1)[0].trim();\n        var firsts = name.split(\" \").slice(0, -1).join(\" \");\n      } else {\n        var last = name.trim();\n      }\n      var initials = \"\";\n      if (firsts != undefined) {\n        initials = firsts.trim().split(\" \").map(function (s) {\n          return s.trim()[0];\n        });\n        initials = initials.join(\".\") + \".\";\n      }\n      return template.replace(\"${F}\", firsts).replace(\"${L}\", last).replace(\"${I}\", initials).trim(); // in case one of first or last was empty\n    });\n    if (names.length > 1) {\n      var str = name_strings.slice(0, names.length - 1).join(sep);\n      str += (finalSep || sep) + name_strings[names.length - 1];\n      return str;\n    } else {\n      return name_strings[0];\n    }\n  }\n  function venue_string(ent) {\n    var cite = ent.journal || ent.booktitle || \"\";\n    if (\"volume\" in ent) {\n      var issue = ent.issue || ent.number;\n      issue = issue != undefined ? \"(\" + issue + \")\" : \"\";\n      cite += \", Vol \" + ent.volume + issue;\n    }\n    if (\"pages\" in ent) {\n      cite += \", pp. \" + ent.pages;\n    }\n    if (cite != \"\") cite += \". \";\n    if (\"publisher\" in ent) {\n      cite += ent.publisher;\n      if (cite[cite.length - 1] != \".\") cite += \".\";\n    }\n    return cite;\n  }\n  function link_string(ent) {\n    if (\"url\" in ent) {\n      var url = ent.url;\n      var arxiv_match = /arxiv\\.org\\/abs\\/([0-9\\.]*)/.exec(url);\n      if (arxiv_match != null) {\n        url = \"http://arxiv.org/pdf/\".concat(arxiv_match[1], \".pdf\");\n      }\n      if (url.slice(-4) == \".pdf\") {\n        var label = \"PDF\";\n      } else if (url.slice(-5) == \".html\") {\n        var label = \"HTML\";\n      }\n      return \" &ensp;<a href=\\\"\".concat(url, \"\\\">[\").concat(label || \"link\", \"]</a>\");\n    } /* else if (\"doi\" in ent){\r\n      return ` &ensp;<a href=\"https://doi.org/${ent.doi}\" >[DOI]</a>`;\r\n      }*/else {\n      return \"\";\n    }\n  }\n  function doi_string(ent, new_line) {\n    if (\"doi\" in ent) {\n      return \"\".concat(new_line ? \"<br>\" : \"\", \" <a href=\\\"https://doi.org/\").concat(ent.doi, \"\\\" style=\\\"text-decoration:inherit;\\\">DOI: \").concat(ent.doi, \"</a>\");\n    } else {\n      return \"\";\n    }\n  }\n  function title_string(ent) {\n    return '<span class=\"title\">' + ent.title + \"</span> \";\n  }\n  function bibliography_cite(ent, fancy) {\n    if (ent) {\n      var cite = title_string(ent);\n      cite += link_string(ent) + \"<br>\";\n      if (ent.author) {\n        cite += author_string(ent, \"${L}, ${I}\", \", \", \" and \");\n        if (ent.year || ent.date) {\n          cite += \", \";\n        }\n      }\n      if (ent.year || ent.date) {\n        cite += (ent.year || ent.date) + \". \";\n      } else {\n        cite += \". \";\n      }\n      cite += venue_string(ent);\n      cite += doi_string(ent);\n      return cite;\n      /*var cite =  author_string(ent, \"${L}, ${I}\", \", \", \" and \");\r\n      if (ent.year || ent.date){\r\n        cite += \", \" + (ent.year || ent.date) + \". \"\r\n      } else {\r\n        cite += \". \"\r\n      }\r\n      cite += \"<b>\" + ent.title + \"</b>. \";\r\n      cite += venue_string(ent);\r\n      cite += doi_string(ent);\r\n      cite += link_string(ent);\r\n      return cite*/\n    } else {\n      return \"?\";\n    }\n  }\n  function hover_cite(ent) {\n    if (ent) {\n      var cite = \"\";\n      cite += \"<strong>\" + ent.title + \"</strong>\";\n      cite += link_string(ent);\n      cite += \"<br>\";\n      var a_str = author_string(ent, \"${I} ${L}\", \", \") + \".\";\n      var v_str = venue_string(ent).trim() + \" \" + ent.year + \". \" + doi_string(ent, true);\n      if ((a_str + v_str).length < Math.min(40, ent.title.length)) {\n        cite += a_str + \" \" + v_str;\n      } else {\n        cite += a_str + \"<br>\" + v_str;\n      }\n      return cite;\n    } else {\n      return \"?\";\n    }\n  }\n  function domContentLoaded() {\n    return ['interactive', 'complete'].indexOf(document.readyState) !== -1;\n  }\n\n  // Copyright 2018 The Distill Template Authors\n  //\n  // Licensed under the Apache License, Version 2.0 (the \"License\");\n  // you may not use this file except in compliance with the License.\n  // You may obtain a copy of the License at\n  //\n  //      http://www.apache.org/licenses/LICENSE-2.0\n  //\n  // Unless required by applicable law or agreed to in writing, software\n  // distributed under the License is distributed on an \"AS IS\" BASIS,\n  // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  // See the License for the specific language governing permissions and\n  // limitations under the License.\n\n  function _moveLegacyAffiliationFormatIntoArray(frontMatter) {\n    // authors used to have propoerties \"affiliation\" and \"affiliationURL\".\n    // We now encourage using an array for affiliations containing objects with\n    // properties \"name\" and \"url\".\n    var _iterator4 = _createForOfIteratorHelper(frontMatter.authors),\n      _step4;\n    try {\n      for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n        var author = _step4.value;\n        var hasOldStyle = Boolean(author.affiliation);\n        var hasNewStyle = Boolean(author.affiliations);\n        if (!hasOldStyle) continue;\n        if (hasNewStyle) {\n          console.warn(\"Author \".concat(author.author, \" has both old-style (\\\"affiliation\\\" & \\\"affiliationURL\\\") and new style (\\\"affiliations\\\") affiliation information!\"));\n        } else {\n          var newAffiliation = {\n            \"name\": author.affiliation\n          };\n          if (author.affiliationURL) newAffiliation.url = author.affiliationURL;\n          author.affiliations = [newAffiliation];\n        }\n      }\n    } catch (err) {\n      _iterator4.e(err);\n    } finally {\n      _iterator4.f();\n    }\n    return frontMatter;\n  }\n  function parseFrontmatter(element) {\n    var scriptTag = element.firstElementChild;\n    if (scriptTag) {\n      var type = scriptTag.getAttribute('type');\n      if (type.split('/')[1] == 'json') {\n        var content = scriptTag.textContent;\n        var parsed = JSON.parse(content);\n        return _moveLegacyAffiliationFormatIntoArray(parsed);\n      } else {\n        console.error('Distill only supports JSON frontmatter tags anymore; no more YAML.');\n      }\n    } else {\n      console.error('You added a frontmatter tag but did not provide a script tag with front matter data in it. Please take a look at our templates.');\n    }\n    return {};\n  }\n  var FrontMatter$1 = /*#__PURE__*/function (_HTMLElement) {\n    function FrontMatter$1() {\n      var _this4;\n      _classCallCheck(this, FrontMatter$1);\n      _this4 = _callSuper(this, FrontMatter$1);\n      var options = {\n        childList: true,\n        characterData: true,\n        subtree: true\n      };\n      var observer = new MutationObserver(function (entries) {\n        var _iterator5 = _createForOfIteratorHelper(entries),\n          _step5;\n        try {\n          for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n            var entry = _step5.value;\n            if (entry.target.nodeName === 'SCRIPT' || entry.type === 'characterData') {\n              var data = parseFrontmatter(_this4);\n              _this4.notify(data);\n            }\n          }\n        } catch (err) {\n          _iterator5.e(err);\n        } finally {\n          _iterator5.f();\n        }\n      });\n      observer.observe(_this4, options);\n      return _this4;\n    }\n    _inherits(FrontMatter$1, _HTMLElement);\n    return _createClass(FrontMatter$1, [{\n      key: \"notify\",\n      value: function notify(data) {\n        var options = {\n          detail: data,\n          bubbles: true\n        };\n        var event = new CustomEvent('onFrontMatterChanged', options);\n        document.dispatchEvent(event);\n      }\n    }], [{\n      key: \"is\",\n      get: function get() {\n        return 'd-front-matter';\n      }\n    }]);\n  }(/*#__PURE__*/_wrapNativeSuper(HTMLElement)); // Copyright 2018 The Distill Template Authors\n  //\n  // Licensed under the Apache License, Version 2.0 (the \"License\");\n  // you may not use this file except in compliance with the License.\n  // You may obtain a copy of the License at\n  //\n  //      http://www.apache.org/licenses/LICENSE-2.0\n  //\n  // Unless required by applicable law or agreed to in writing, software\n  // distributed under the License is distributed on an \"AS IS\" BASIS,\n  // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  // See the License for the specific language governing permissions and\n  // limitations under the License.\n  // no appendix -> add appendix\n  // title in front, no h1 -> add it\n  // no title in front, h1 -> read and put into frontMatter\n  // footnote -> footnote list\n  // break up bib\n  // if citation, no bib-list -> add citation-list\n  // if authors, no byline -> add byline\n  function optionalComponents(dom, data) {\n    var body = dom.body;\n    var article = body.querySelector('d-article');\n\n    // If we don't have an article tag, something weird is going on—giving up.\n    if (!article) {\n      console.warn('No d-article tag found; skipping adding optional components!');\n      return;\n    }\n    var byline = dom.querySelector('d-byline');\n    if (!byline) {\n      if (data.authors) {\n        byline = dom.createElement('d-byline');\n        body.insertBefore(byline, article);\n      } else {\n        console.warn('No authors found in front matter; please add them before submission!');\n      }\n    }\n    var title = dom.querySelector('d-title');\n    if (!title) {\n      title = dom.createElement('d-title');\n      body.insertBefore(title, byline);\n    }\n    var h1 = title.querySelector('h1');\n    if (!h1) {\n      h1 = dom.createElement('h1');\n      h1.textContent = data.title;\n      title.insertBefore(h1, title.firstChild);\n    }\n    var hasPassword = typeof data.password !== 'undefined';\n    var interstitial = body.querySelector('d-interstitial');\n    if (hasPassword && !interstitial) {\n      var inBrowser = typeof window !== 'undefined';\n      var onLocalhost = inBrowser && window.location.hostname.includes('localhost');\n      if (!inBrowser || !onLocalhost) {\n        interstitial = dom.createElement('d-interstitial');\n        interstitial.password = data.password;\n        body.insertBefore(interstitial, body.firstChild);\n      }\n    } else if (!hasPassword && interstitial) {\n      interstitial.parentElement.removeChild(this);\n    }\n    var appendix = dom.querySelector('d-appendix');\n    if (!appendix) {\n      appendix = dom.createElement('d-appendix');\n      dom.body.appendChild(appendix);\n    }\n    var footnoteList = dom.querySelector('d-footnote-list');\n    if (!footnoteList) {\n      footnoteList = dom.createElement('d-footnote-list');\n      appendix.appendChild(footnoteList);\n    }\n    var citationList = dom.querySelector('d-citation-list');\n    if (!citationList) {\n      citationList = dom.createElement('d-citation-list');\n      appendix.appendChild(citationList);\n    }\n  }\n\n  // Copyright 2018 The Distill Template Authors\n\n  var frontMatter = new FrontMatter();\n  var Controller = {\n    frontMatter: frontMatter,\n    waitingOn: {\n      bibliography: [],\n      citations: []\n    },\n    listeners: {\n      onCiteKeyCreated: function onCiteKeyCreated(event) {\n        var _event$detail = _slicedToArray(event.detail, 2),\n          citeTag = _event$detail[0],\n          keys = _event$detail[1];\n\n        // ensure we have citations\n        if (!frontMatter.citationsCollected) {\n          // console.debug('onCiteKeyCreated, but unresolved dependency (\"citations\"). Enqueing.');\n          Controller.waitingOn.citations.push(function () {\n            return Controller.listeners.onCiteKeyCreated(event);\n          });\n          return;\n        }\n\n        // ensure we have a loaded bibliography\n        if (!frontMatter.bibliographyParsed) {\n          // console.debug('onCiteKeyCreated, but unresolved dependency (\"bibliography\"). Enqueing.');\n          Controller.waitingOn.bibliography.push(function () {\n            return Controller.listeners.onCiteKeyCreated(event);\n          });\n          return;\n        }\n        var numbers = keys.map(function (key) {\n          return frontMatter.citations.indexOf(key);\n        });\n        citeTag.numbers = numbers;\n        var entries = keys.map(function (key) {\n          return frontMatter.bibliography.get(key);\n        });\n        citeTag.entries = entries;\n      },\n      onCiteKeyChanged: function onCiteKeyChanged() {\n        // const [citeTag, keys] = event.detail;\n\n        // update citations\n        frontMatter.citations = collect_citations();\n        frontMatter.citationsCollected = true;\n        var _iterator6 = _createForOfIteratorHelper(Controller.waitingOn.citations.slice()),\n          _step6;\n        try {\n          for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n            var waitingCallback = _step6.value;\n            waitingCallback();\n          }\n\n          // update bibliography\n        } catch (err) {\n          _iterator6.e(err);\n        } finally {\n          _iterator6.f();\n        }\n        var citationListTag = document.querySelector(\"d-citation-list\");\n        var bibliographyEntries = new Map(frontMatter.citations.map(function (citationKey) {\n          return [citationKey, frontMatter.bibliography.get(citationKey)];\n        }));\n        citationListTag.citations = bibliographyEntries;\n        var citeTags = document.querySelectorAll(\"d-cite\");\n        var _iterator7 = _createForOfIteratorHelper(citeTags),\n          _step7;\n        try {\n          for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {\n            var citeTag = _step7.value;\n            console.log(citeTag);\n            var keys = citeTag.keys;\n            var numbers = keys.map(function (key) {\n              return frontMatter.citations.indexOf(key);\n            });\n            citeTag.numbers = numbers;\n            var entries = keys.map(function (key) {\n              return frontMatter.bibliography.get(key);\n            });\n            citeTag.entries = entries;\n          }\n        } catch (err) {\n          _iterator7.e(err);\n        } finally {\n          _iterator7.f();\n        }\n      },\n      onCiteKeyRemoved: function onCiteKeyRemoved(event) {\n        Controller.listeners.onCiteKeyChanged(event);\n      },\n      onBibliographyChanged: function onBibliographyChanged(event) {\n        var citationListTag = document.querySelector(\"d-citation-list\");\n        var bibliography = event.detail;\n        frontMatter.bibliography = bibliography;\n        frontMatter.bibliographyParsed = true;\n        var _iterator8 = _createForOfIteratorHelper(Controller.waitingOn.bibliography.slice()),\n          _step8;\n        try {\n          for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {\n            var waitingCallback = _step8.value;\n            waitingCallback();\n          }\n\n          // ensure we have citations\n        } catch (err) {\n          _iterator8.e(err);\n        } finally {\n          _iterator8.f();\n        }\n        if (!frontMatter.citationsCollected) {\n          Controller.waitingOn.citations.push(function () {\n            Controller.listeners.onBibliographyChanged({\n              target: event.target,\n              detail: event.detail\n            });\n          });\n          return;\n        }\n        if (citationListTag.hasAttribute(\"distill-prerendered\")) {\n          console.debug(\"Citation list was prerendered; not updating it.\");\n        } else {\n          var entries = new Map(frontMatter.citations.map(function (citationKey) {\n            return [citationKey, frontMatter.bibliography.get(citationKey)];\n          }));\n          citationListTag.citations = entries;\n        }\n      },\n      onFootnoteChanged: function onFootnoteChanged() {\n        // const footnote = event.detail;\n        //TODO: optimize to only update current footnote\n        var footnotesList = document.querySelector(\"d-footnote-list\");\n        if (footnotesList) {\n          var footnotes = document.querySelectorAll(\"d-footnote\");\n          footnotesList.footnotes = footnotes;\n        }\n      },\n      onFrontMatterChanged: function onFrontMatterChanged(event) {\n        var data = event.detail;\n        mergeFromYMLFrontmatter(frontMatter, data);\n        var interstitial = document.querySelector(\"d-interstitial\");\n        if (interstitial) {\n          if (typeof frontMatter.password !== \"undefined\") {\n            interstitial.password = frontMatter.password;\n          } else {\n            interstitial.parentElement.removeChild(interstitial);\n          }\n        }\n        var prerendered = document.body.hasAttribute(\"distill-prerendered\");\n        if (!prerendered && domContentLoaded()) {\n          optionalComponents(document, frontMatter);\n          var appendix = document.querySelector(\"distill-appendix\");\n          if (appendix) {\n            appendix.frontMatter = frontMatter;\n          }\n          var _byline = document.querySelector(\"d-byline\");\n          if (_byline) {\n            _byline.frontMatter = frontMatter;\n          }\n          if (data.katex) {\n            DMath.katexOptions = data.katex;\n          }\n        }\n      },\n      DOMContentLoaded: function DOMContentLoaded() {\n        if (Controller.loaded) {\n          console.warn(\"Controller received DOMContentLoaded but was already loaded!\");\n          return;\n        } else if (!domContentLoaded()) {\n          console.warn(\"Controller received DOMContentLoaded at document.readyState: \" + document.readyState + \"!\");\n          return;\n        } else {\n          Controller.loaded = true;\n          console.debug(\"Runlevel 4: Controller running DOMContentLoaded\");\n        }\n        var frontMatterTag = document.querySelector(\"d-front-matter\");\n        if (frontMatterTag) {\n          var data = parseFrontmatter(frontMatterTag);\n          Controller.listeners.onFrontMatterChanged({\n            detail: data\n          });\n        }\n\n        // Resolving \"citations\" dependency due to initial DOM load\n        frontMatter.citations = collect_citations();\n        frontMatter.citationsCollected = true;\n        var _iterator9 = _createForOfIteratorHelper(Controller.waitingOn.citations.slice()),\n          _step9;\n        try {\n          for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {\n            var _waitingCallback = _step9.value;\n            _waitingCallback();\n          }\n        } catch (err) {\n          _iterator9.e(err);\n        } finally {\n          _iterator9.f();\n        }\n        if (frontMatter.bibliographyParsed) {\n          var _iterator10 = _createForOfIteratorHelper(Controller.waitingOn.bibliography.slice()),\n            _step10;\n          try {\n            for (_iterator10.s(); !(_step10 = _iterator10.n()).done;) {\n              var waitingCallback = _step10.value;\n              waitingCallback();\n            }\n          } catch (err) {\n            _iterator10.e(err);\n          } finally {\n            _iterator10.f();\n          }\n        }\n        var footnotesList = document.querySelector(\"d-footnote-list\");\n        if (footnotesList) {\n          var footnotes = document.querySelectorAll(\"d-footnote\");\n          footnotesList.footnotes = footnotes;\n        }\n      }\n    } // listeners\n  }; // Controller\n\n  var base = \"/*\\n * Copyright 2018 The Distill Template Authors\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License.\\n * You may obtain a copy of the License at\\n *\\n *      http://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n */\\n\\nhtml {\\n  font-size: 14px;\\n\\tline-height: 1.6em;\\n  /* font-family: \\\"Libre Franklin\\\", \\\"Helvetica Neue\\\", sans-serif; */\\n  font-family: -apple-system, BlinkMacSystemFont, \\\"Segoe UI\\\", Roboto, Oxygen, Ubuntu, Cantarell, \\\"Fira Sans\\\", \\\"Droid Sans\\\", \\\"Helvetica Neue\\\", Arial, sans-serif;\\n  /*, \\\"Apple Color Emoji\\\", \\\"Segoe UI Emoji\\\", \\\"Segoe UI Symbol\\\";*/\\n  text-size-adjust: 100%;\\n  -ms-text-size-adjust: 100%;\\n  -webkit-text-size-adjust: 100%;\\n}\\n\\n@media(min-width: 768px) {\\n  html {\\n    font-size: 16px;\\n  }\\n}\\n\\nbody {\\n  margin: 0;\\n}\\n\\na {\\n  color: #004276;\\n}\\n\\nfigure {\\n  margin: 0;\\n}\\n\\ntable {\\n\\tborder-collapse: collapse;\\n\\tborder-spacing: 0;\\n}\\n\\ntable th {\\n\\ttext-align: left;\\n}\\n\\ntable thead {\\n  border-bottom: 1px solid rgba(0, 0, 0, 0.05);\\n}\\n\\ntable thead th {\\n  padding-bottom: 0.5em;\\n}\\n\\ntable tbody :first-child td {\\n  padding-top: 0.5em;\\n}\\n\\npre {\\n  overflow: auto;\\n  max-width: 100%;\\n}\\n\\np {\\n  margin-top: 0;\\n  margin-bottom: 1em;\\n}\\n\\nsup, sub {\\n  vertical-align: baseline;\\n  position: relative;\\n  top: -0.4em;\\n  line-height: 1em;\\n}\\n\\nsub {\\n  top: 0.4em;\\n}\\n\\n.kicker,\\n.marker {\\n  font-size: 15px;\\n  font-weight: 600;\\n  color: rgba(0, 0, 0, 0.5);\\n}\\n\\n\\n/* Headline */\\n\\n@media(min-width: 1024px) {\\n  d-title h1 span {\\n    display: block;\\n  }\\n}\\n\\n/* Figure */\\n\\nfigure {\\n  position: relative;\\n  margin-bottom: 2.5em;\\n  margin-top: 1.5em;\\n}\\n\\nfigcaption+figure {\\n\\n}\\n\\nfigure img {\\n  width: 100%;\\n}\\n\\nfigure svg text,\\nfigure svg tspan {\\n}\\n\\nfigcaption,\\n.figcaption {\\n  color: rgba(0, 0, 0, 0.6);\\n  font-size: 12px;\\n  line-height: 1.5em;\\n}\\n\\n@media(min-width: 1024px) {\\nfigcaption,\\n.figcaption {\\n    font-size: 13px;\\n  }\\n}\\n\\nfigure.external img {\\n  background: white;\\n  border: 1px solid rgba(0, 0, 0, 0.1);\\n  box-shadow: 0 1px 8px rgba(0, 0, 0, 0.1);\\n  padding: 18px;\\n  box-sizing: border-box;\\n}\\n\\nfigcaption a {\\n  color: rgba(0, 0, 0, 0.6);\\n}\\n\\nfigcaption b,\\nfigcaption strong, {\\n  font-weight: 600;\\n  color: rgba(0, 0, 0, 1.0);\\n}\\n\";\n  var layout = \"/*\\n * Copyright 2018 The Distill Template Authors\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License.\\n * You may obtain a copy of the License at\\n *\\n *      http://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n */\\n\\n@supports not (display: grid) {\\n  .base-grid,\\n  distill-header,\\n  d-title,\\n  d-abstract,\\n  d-article,\\n  d-appendix,\\n  distill-appendix,\\n  d-byline,\\n  d-footnote-list,\\n  d-citation-list,\\n  distill-footer {\\n    display: block;\\n    padding: 8px;\\n  }\\n}\\n\\n.base-grid,\\ndistill-header,\\nd-title,\\nd-abstract,\\nd-article,\\nd-appendix,\\ndistill-appendix,\\nd-byline,\\nd-footnote-list,\\nd-citation-list,\\ndistill-footer {\\n  display: grid;\\n  justify-items: stretch;\\n  grid-template-columns: [screen-start] 8px [page-start kicker-start text-start gutter-start middle-start] 1fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr [text-end page-end gutter-end kicker-end middle-end] 8px [screen-end];\\n  grid-column-gap: 8px;\\n}\\n\\n.grid {\\n  display: grid;\\n  grid-column-gap: 8px;\\n}\\n\\n@media(min-width: 768px) {\\n  .base-grid,\\n  distill-header,\\n  d-title,\\n  d-abstract,\\n  d-article,\\n  d-appendix,\\n  distill-appendix,\\n  d-byline,\\n  d-footnote-list,\\n  d-citation-list,\\n  distill-footer {\\n    grid-template-columns: [screen-start] 1fr [page-start kicker-start middle-start text-start] 45px 45px 45px 45px 45px 45px 45px 45px [ kicker-end text-end gutter-start] 45px [middle-end] 45px [page-end gutter-end] 1fr [screen-end];\\n    grid-column-gap: 16px;\\n  }\\n\\n  .grid {\\n    grid-column-gap: 16px;\\n  }\\n}\\n\\n@media(min-width: 1000px) {\\n  .base-grid,\\n  distill-header,\\n  d-title,\\n  d-abstract,\\n  d-article,\\n  d-appendix,\\n  distill-appendix,\\n  d-byline,\\n  d-footnote-list,\\n  d-citation-list,\\n  distill-footer {\\n    grid-template-columns: [screen-start] 1fr [page-start kicker-start] 50px [middle-start] 50px [text-start kicker-end] 50px 50px 50px 50px 50px 50px 50px 50px [text-end gutter-start] 50px [middle-end] 50px [page-end gutter-end] 1fr [screen-end];\\n    grid-column-gap: 16px;\\n  }\\n\\n  .grid {\\n    grid-column-gap: 16px;\\n  }\\n}\\n\\n@media(min-width: 1180px) {\\n  .base-grid,\\n  distill-header,\\n  d-title,\\n  d-abstract,\\n  d-article,\\n  d-appendix,\\n  distill-appendix,\\n  d-byline,\\n  d-footnote-list,\\n  d-citation-list,\\n  distill-footer {\\n    grid-template-columns: [screen-start] 1fr [page-start kicker-start] 60px [middle-start] 60px [text-start kicker-end] 60px 60px 60px 60px 60px 60px 60px 60px [text-end gutter-start] 60px [middle-end] 60px [page-end gutter-end] 1fr [screen-end];\\n    grid-column-gap: 32px;\\n  }\\n\\n  .grid {\\n    grid-column-gap: 32px;\\n  }\\n}\\n\\n\\n\\n\\n.base-grid {\\n  grid-column: screen;\\n}\\n\\n/* .l-body,\\nd-article > *  {\\n  grid-column: text;\\n}\\n\\n.l-page,\\nd-title > *,\\nd-figure {\\n  grid-column: page;\\n} */\\n\\n.l-gutter {\\n  grid-column: gutter;\\n}\\n\\n.l-text,\\n.l-body {\\n  grid-column: text;\\n}\\n\\n.l-page {\\n  grid-column: page;\\n}\\n\\n.l-body-outset {\\n  grid-column: middle;\\n}\\n\\n.l-page-outset {\\n  grid-column: page;\\n}\\n\\n.l-screen {\\n  grid-column: screen;\\n}\\n\\n.l-screen-inset {\\n  grid-column: screen;\\n  padding-left: 16px;\\n  padding-left: 16px;\\n}\\n\\n\\n/* Aside */\\n\\nd-article aside {\\n  grid-column: gutter;\\n  font-size: 12px;\\n  line-height: 1.6em;\\n  color: rgba(0, 0, 0, 0.6)\\n}\\n\\n@media(min-width: 768px) {\\n  aside {\\n    grid-column: gutter;\\n  }\\n\\n  .side {\\n    grid-column: gutter;\\n  }\\n}\\n\";\n  var print = \"/*\\n * Copyright 2018 The Distill Template Authors\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License.\\n * You may obtain a copy of the License at\\n *\\n *      http://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n */\\n\\n@media print {\\n\\n  @page {\\n    size: 8in 11in;\\n    @bottom-right {\\n      content: counter(page) \\\" of \\\" counter(pages);\\n    }\\n  }\\n\\n  html {\\n    /* no general margins -- CSS Grid takes care of those */\\n  }\\n\\n  p, code {\\n    page-break-inside: avoid;\\n  }\\n\\n  h2, h3 {\\n    page-break-after: avoid;\\n  }\\n\\n  d-header {\\n    visibility: hidden;\\n  }\\n\\n  d-footer {\\n    display: none!important;\\n  }\\n\\n}\\n\";\n  var byline = \"/*\\n * Copyright 2018 The Distill Template Authors\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License.\\n * You may obtain a copy of the License at\\n *\\n *      http://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n */\\n\\nd-byline {\\n  contain: style;\\n  overflow: hidden;\\n  border-top: 1px solid rgba(0, 0, 0, 0.1);\\n  font-size: 0.8rem;\\n  line-height: 1.8em;\\n  padding: 1.5rem 0;\\n  min-height: 1.8em;\\n}\\n\\n\\nd-byline .byline {\\n  grid-template-columns: 1fr 1fr;\\n  grid-column: text;\\n}\\n\\n@media(min-width: 768px) {\\n  d-byline .byline {\\n    grid-template-columns: 1fr 1fr 1fr 1fr;\\n  }\\n}\\n\\nd-byline .authors-affiliations {\\n  grid-column-end: span 2;\\n  grid-template-columns: 1fr 1fr;\\n  margin-bottom: 1em;\\n}\\n\\n@media(min-width: 768px) {\\n  d-byline .authors-affiliations {\\n    margin-bottom: 0;\\n  }\\n}\\n\\nd-byline h3 {\\n  font-size: 0.6rem;\\n  font-weight: 400;\\n  color: rgba(0, 0, 0, 0.5);\\n  margin: 0;\\n  text-transform: uppercase;\\n}\\n\\nd-byline p {\\n  margin: 0;\\n}\\n\\nd-byline a,\\nd-article d-byline a {\\n  color: rgba(0, 0, 0, 0.8);\\n  text-decoration: none;\\n  border-bottom: none;\\n}\\n\\nd-article d-byline a:hover {\\n  text-decoration: underline;\\n  border-bottom: none;\\n}\\n\\nd-byline p.author {\\n  font-weight: 500;\\n}\\n\\nd-byline .affiliations {\\n\\n}\\n\";\n  var article = \"/*\\n * Copyright 2018 The Distill Template Authors\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License.\\n * You may obtain a copy of the License at\\n *\\n *      http://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n */\\n\\nd-article {\\n  contain: layout style;\\n  overflow-x: hidden;\\n  border-top: 1px solid rgba(0, 0, 0, 0.1);\\n  padding-top: 2rem;\\n  color: rgba(0, 0, 0, 0.8);\\n}\\n\\nd-article > * {\\n  grid-column: text;\\n}\\n\\n@media(min-width: 768px) {\\n  d-article {\\n    font-size: 16px;\\n  }\\n}\\n\\n@media(min-width: 1024px) {\\n  d-article {\\n    font-size: 1.06rem;\\n    line-height: 1.7em;\\n  }\\n}\\n\\n\\n/* H2 */\\n\\n\\nd-article .marker {\\n  text-decoration: none;\\n  border: none;\\n  counter-reset: section;\\n  grid-column: kicker;\\n  line-height: 1.7em;\\n}\\n\\nd-article .marker:hover {\\n  border: none;\\n}\\n\\nd-article .marker span {\\n  padding: 0 3px 4px;\\n  border-bottom: 1px solid rgba(0, 0, 0, 0.2);\\n  position: relative;\\n  top: 4px;\\n}\\n\\nd-article .marker:hover span {\\n  color: rgba(0, 0, 0, 0.7);\\n  border-bottom: 1px solid rgba(0, 0, 0, 0.7);\\n}\\n\\nd-article h2 {\\n  font-weight: 600;\\n  font-size: 24px;\\n  line-height: 1.25em;\\n  margin: 2rem 0 1.5rem 0;\\n  border-bottom: 1px solid rgba(0, 0, 0, 0.1);\\n  padding-bottom: 1rem;\\n}\\n\\n@media(min-width: 1024px) {\\n  d-article h2 {\\n    font-size: 36px;\\n  }\\n}\\n\\n/* H3 */\\n\\nd-article h3 {\\n  font-weight: 700;\\n  font-size: 18px;\\n  line-height: 1.4em;\\n  margin-bottom: 1em;\\n  margin-top: 2em;\\n}\\n\\n@media(min-width: 1024px) {\\n  d-article h3 {\\n    font-size: 20px;\\n  }\\n}\\n\\n/* H4 */\\n\\nd-article h4 {\\n  font-weight: 600;\\n  text-transform: uppercase;\\n  font-size: 14px;\\n  line-height: 1.4em;\\n}\\n\\nd-article a {\\n  color: inherit;\\n}\\n\\nd-article p,\\nd-article ul,\\nd-article ol,\\nd-article blockquote {\\n  margin-top: 0;\\n  margin-bottom: 1em;\\n  margin-left: 0;\\n  margin-right: 0;\\n}\\n\\nd-article blockquote {\\n  border-left: 2px solid rgba(0, 0, 0, 0.2);\\n  padding-left: 2em;\\n  font-style: italic;\\n  color: rgba(0, 0, 0, 0.6);\\n}\\n\\nd-article a {\\n  border-bottom: 1px solid rgba(0, 0, 0, 0.4);\\n  text-decoration: none;\\n}\\n\\nd-article a:hover {\\n  border-bottom: 1px solid rgba(0, 0, 0, 0.8);\\n}\\n\\nd-article .link {\\n  text-decoration: underline;\\n  cursor: pointer;\\n}\\n\\nd-article ul,\\nd-article ol {\\n  padding-left: 24px;\\n}\\n\\nd-article li {\\n  margin-bottom: 0.2em;\\n  margin-left: 0;\\n  padding-left: 0;\\n}\\n\\nd-article li:last-child {\\n  margin-bottom: 0;\\n}\\n\\nd-article pre {\\n  font-size: 14px;\\n  margin-bottom: 20px;\\n}\\n\\nd-article hr {\\n  grid-column: screen;\\n  width: 100%;\\n  border: none;\\n  border-bottom: 1px solid rgba(0, 0, 0, 0.1);\\n  margin-top: 60px;\\n  margin-bottom: 60px;\\n}\\n\\nd-article section {\\n  margin-top: 60px;\\n  margin-bottom: 60px;\\n}\\n\\nd-article span.equation-mimic {\\n  font-family: georgia;\\n  font-size: 115%;\\n  font-style: italic;\\n}\\n\\nd-article > d-code,\\nd-article section > d-code  {\\n  display: block;\\n}\\n\\nd-article > d-math[block],\\nd-article section > d-math[block]  {\\n  display: block;\\n}\\n\\n@media (max-width: 768px) {\\n  d-article > d-code,\\n  d-article section > d-code,\\n  d-article > d-math[block],\\n  d-article section > d-math[block] {\\n      overflow-x: scroll;\\n      -ms-overflow-style: none;  // IE 10+\\n      overflow: -moz-scrollbars-none;  // Firefox\\n  }\\n\\n  d-article > d-code::-webkit-scrollbar,\\n  d-article section > d-code::-webkit-scrollbar,\\n  d-article > d-math[block]::-webkit-scrollbar,\\n  d-article section > d-math[block]::-webkit-scrollbar {\\n    display: none;  // Safari and Chrome\\n  }\\n}\\n\\nd-article .citation {\\n  color: #668;\\n  cursor: pointer;\\n}\\n\\nd-include {\\n  width: auto;\\n  display: block;\\n}\\n\\nd-figure {\\n  contain: layout style;\\n}\\n\\n/* KaTeX */\\n\\n.katex, .katex-prerendered {\\n  contain: style;\\n  display: inline-block;\\n}\\n\\n/* Tables */\\n\\nd-article table {\\n  border-collapse: collapse;\\n  margin-bottom: 1.5rem;\\n  border-bottom: 1px solid rgba(0, 0, 0, 0.2);\\n}\\n\\nd-article table th {\\n  border-bottom: 1px solid rgba(0, 0, 0, 0.2);\\n}\\n\\nd-article table td {\\n  border-bottom: 1px solid rgba(0, 0, 0, 0.05);\\n}\\n\\nd-article table tr:last-of-type td {\\n  border-bottom: none;\\n}\\n\\nd-article table th,\\nd-article table td {\\n  font-size: 15px;\\n  padding: 2px 8px;\\n}\\n\\nd-article table tbody :first-child td {\\n  padding-top: 2px;\\n}\\n\";\n  var title = \"/*\\n * Copyright 2018 The Distill Template Authors\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License.\\n * You may obtain a copy of the License at\\n *\\n *      http://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n */\\n\\nd-title {\\n  padding: 2rem 0 1.5rem;\\n  contain: layout style;\\n  overflow-x: hidden;\\n}\\n\\n@media(min-width: 768px) {\\n  d-title {\\n    padding: 4rem 0 1.5rem;\\n  }\\n}\\n\\nd-title h1 {\\n  grid-column: text;\\n  font-size: 40px;\\n  font-weight: 700;\\n  line-height: 1.1em;\\n  margin: 0 0 0.5rem;\\n}\\n\\n@media(min-width: 768px) {\\n  d-title h1 {\\n    font-size: 50px;\\n  }\\n}\\n\\nd-title p {\\n  font-weight: 300;\\n  font-size: 1.2rem;\\n  line-height: 1.55em;\\n  grid-column: text;\\n}\\n\\nd-title .status {\\n  margin-top: 0px;\\n  font-size: 12px;\\n  color: #009688;\\n  opacity: 0.8;\\n  grid-column: kicker;\\n}\\n\\nd-title .status span {\\n  line-height: 1;\\n  display: inline-block;\\n  padding: 6px 0;\\n  border-bottom: 1px solid #80cbc4;\\n  font-size: 11px;\\n  text-transform: uppercase;\\n}\\n\";\n\n  // Copyright 2018 The Distill Template Authors\n\n  var styles = base + layout + title + byline + article + math + print;\n  function makeStyleTag(dom) {\n    var styleTagId = 'distill-prerendered-styles';\n    var prerenderedTag = dom.getElementById(styleTagId);\n    if (!prerenderedTag) {\n      var styleTag = dom.createElement('style');\n      styleTag.id = styleTagId;\n      styleTag.type = 'text/css';\n      var cssTextTag = dom.createTextNode(styles);\n      styleTag.appendChild(cssTextTag);\n      var firstScriptTag = dom.head.querySelector('script');\n      dom.head.insertBefore(styleTag, firstScriptTag);\n    }\n  }\n\n  // Copyright 2018 The Distill Template Authors\n  //\n  // Licensed under the Apache License, Version 2.0 (the \"License\");\n  // you may not use this file except in compliance with the License.\n  // You may obtain a copy of the License at\n  //\n  //      http://www.apache.org/licenses/LICENSE-2.0\n  //\n  // Unless required by applicable law or agreed to in writing, software\n  // distributed under the License is distributed on an \"AS IS\" BASIS,\n  // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  // See the License for the specific language governing permissions and\n  // limitations under the License.\n\n  function addPolyfill(polyfill, polyfillLoadedCallback) {\n    console.debug('Runlevel 0: Polyfill required: ' + polyfill.name);\n    var script = document.createElement('script');\n    script.src = polyfill.url;\n    script.async = false;\n    if (polyfillLoadedCallback) {\n      script.onload = function () {\n        polyfillLoadedCallback(polyfill);\n      };\n    }\n    script.onerror = function () {\n      new Error('Runlevel 0: Polyfills failed to load script ' + polyfill.name);\n    };\n    document.head.appendChild(script);\n  }\n  var polyfills = [{\n    name: 'WebComponents',\n    support: function support() {\n      return 'customElements' in window && 'attachShadow' in Element.prototype && 'getRootNode' in Element.prototype && 'content' in document.createElement('template') && 'Promise' in window && 'from' in Array;\n    },\n    url: 'https://distill.pub/third-party/polyfills/webcomponents-lite.js'\n  }, {\n    name: 'IntersectionObserver',\n    support: function support() {\n      return 'IntersectionObserver' in window && 'IntersectionObserverEntry' in window;\n    },\n    url: 'https://distill.pub/third-party/polyfills/intersection-observer.js'\n  }];\n  var Polyfills = /*#__PURE__*/function () {\n    function Polyfills() {\n      _classCallCheck(this, Polyfills);\n    }\n    return _createClass(Polyfills, null, [{\n      key: \"browserSupportsAllFeatures\",\n      value: function browserSupportsAllFeatures() {\n        return polyfills.every(function (poly) {\n          return poly.support();\n        });\n      }\n    }, {\n      key: \"load\",\n      value: function load(callback) {\n        // Define an intermediate callback that checks if all is loaded.\n        var polyfillLoaded = function polyfillLoaded(polyfill) {\n          polyfill.loaded = true;\n          console.debug('Runlevel 0: Polyfill has finished loading: ' + polyfill.name);\n          // console.debug(window[polyfill.name]);\n          if (Polyfills.neededPolyfills.every(function (poly) {\n            return poly.loaded;\n          })) {\n            console.debug('Runlevel 0: All required polyfills have finished loading.');\n            console.debug('Runlevel 0->1.');\n            window.distillRunlevel = 1;\n            callback();\n          }\n        };\n        // Add polyfill script tags\n        var _iterator11 = _createForOfIteratorHelper(Polyfills.neededPolyfills),\n          _step11;\n        try {\n          for (_iterator11.s(); !(_step11 = _iterator11.n()).done;) {\n            var polyfill = _step11.value;\n            addPolyfill(polyfill, polyfillLoaded);\n          }\n        } catch (err) {\n          _iterator11.e(err);\n        } finally {\n          _iterator11.f();\n        }\n      }\n    }, {\n      key: \"neededPolyfills\",\n      get: function get() {\n        if (!Polyfills._neededPolyfills) {\n          Polyfills._neededPolyfills = polyfills.filter(function (poly) {\n            return !poly.support();\n          });\n        }\n        return Polyfills._neededPolyfills;\n      }\n    }]);\n  }(); // Copyright 2018 The Distill Template Authors\n  //\n  // Licensed under the Apache License, Version 2.0 (the \"License\");\n  // you may not use this file except in compliance with the License.\n  // You may obtain a copy of the License at\n  //\n  //      http://www.apache.org/licenses/LICENSE-2.0\n  //\n  // Unless required by applicable law or agreed to in writing, software\n  // distributed under the License is distributed on an \"AS IS\" BASIS,\n  // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  // See the License for the specific language governing permissions and\n  // limitations under the License.\n  // const marginSmall = 16;\n  // const marginLarge = 3 * marginSmall;\n  // const margin = marginSmall + marginLarge;\n  // const gutter = marginSmall;\n  // const outsetAmount = margin / 2;\n  // const numCols = 4;\n  // const numGutters = numCols - 1;\n  // const columnWidth = (768 - 2 * marginLarge - numGutters * gutter) / numCols;\n  //\n  // const screenwidth = 768;\n  // const pageWidth = screenwidth - 2 * marginLarge;\n  // const bodyWidth = pageWidth - columnWidth - gutter;\n  function body(selector) {\n    return \"\".concat(selector, \" {\\n      grid-column: left / text;\\n    }\\n  \");\n  }\n\n  // Copyright 2018 The Distill Template Authors\n\n  var T$1 = Template('d-abstract', \"\\n<style>\\n  :host {\\n    font-size: 1.25rem;\\n    line-height: 1.6em;\\n    color: rgba(0, 0, 0, 0.7);\\n    -webkit-font-smoothing: antialiased;\\n  }\\n\\n  ::slotted(p) {\\n    margin-top: 0;\\n    margin-bottom: 1em;\\n    grid-column: text-start / middle-end;\\n  }\\n  \".concat(body('d-abstract'), \"\\n</style>\\n\\n<slot></slot>\\n\"));\n  var Abstract = /*#__PURE__*/function (_T$) {\n    function Abstract() {\n      _classCallCheck(this, Abstract);\n      return _callSuper(this, Abstract, arguments);\n    }\n    _inherits(Abstract, _T$);\n    return _createClass(Abstract);\n  }(T$1(HTMLElement)); // Copyright 2018 The Distill Template Authors\n  var T$2 = Template('d-appendix', \"\\n<style>\\n\\nd-appendix {\\n  contain: layout style;\\n  font-size: 0.8em;\\n  line-height: 1.7em;\\n  margin-top: 60px;\\n  margin-bottom: 0;\\n  border-top: 1px solid rgba(0, 0, 0, 0.1);\\n  color: rgba(0,0,0,0.5);\\n  padding-top: 60px;\\n  padding-bottom: 48px;\\n}\\n\\nd-appendix h3 {\\n  grid-column: page-start / text-start;\\n  font-size: 15px;\\n  font-weight: 500;\\n  margin-top: 1em;\\n  margin-bottom: 0;\\n  color: rgba(0,0,0,0.65);\\n}\\n\\nd-appendix h3 + * {\\n  margin-top: 1em;\\n}\\n\\nd-appendix ol {\\n  padding: 0 0 0 15px;\\n}\\n\\n@media (min-width: 768px) {\\n  d-appendix ol {\\n    padding: 0 0 0 30px;\\n    margin-left: -30px;\\n  }\\n}\\n\\nd-appendix li {\\n  margin-bottom: 1em;\\n}\\n\\nd-appendix a {\\n  color: rgba(0, 0, 0, 0.6);\\n}\\n\\nd-appendix > * {\\n  grid-column: text;\\n}\\n\\nd-appendix > d-footnote-list,\\nd-appendix > d-citation-list,\\nd-appendix > distill-appendix {\\n  grid-column: screen;\\n}\\n\\n</style>\\n\\n\", false);\n  var Appendix = /*#__PURE__*/function (_T$2) {\n    function Appendix() {\n      _classCallCheck(this, Appendix);\n      return _callSuper(this, Appendix, arguments);\n    }\n    _inherits(Appendix, _T$2);\n    return _createClass(Appendix);\n  }(T$2(HTMLElement)); // Copyright 2018 The Distill Template Authors\n  //\n  // Licensed under the Apache License, Version 2.0 (the \"License\");\n  // you may not use this file except in compliance with the License.\n  // You may obtain a copy of the License at\n  //\n  //      http://www.apache.org/licenses/LICENSE-2.0\n  //\n  // Unless required by applicable law or agreed to in writing, software\n  // distributed under the License is distributed on an \"AS IS\" BASIS,\n  // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  // See the License for the specific language governing permissions and\n  // limitations under the License.\n  // import { Template } from '../mixins/template';\n  // import { Controller } from '../controller';\n  var isOnlyWhitespace = /^\\s*$/;\n  var Article = /*#__PURE__*/function (_HTMLElement2) {\n    function Article() {\n      var _this5;\n      _classCallCheck(this, Article);\n      _this5 = _callSuper(this, Article);\n      new MutationObserver(function (mutations) {\n        var _iterator12 = _createForOfIteratorHelper(mutations),\n          _step12;\n        try {\n          for (_iterator12.s(); !(_step12 = _iterator12.n()).done;) {\n            var mutation = _step12.value;\n            var _iterator13 = _createForOfIteratorHelper(mutation.addedNodes),\n              _step13;\n            try {\n              for (_iterator13.s(); !(_step13 = _iterator13.n()).done;) {\n                var addedNode = _step13.value;\n                switch (addedNode.nodeName) {\n                  case '#text':\n                    {\n                      // usually text nodes are only linebreaks.\n                      var text = addedNode.nodeValue;\n                      if (!isOnlyWhitespace.test(text)) {\n                        console.warn('Use of unwrapped text in distill articles is discouraged as it breaks layout! Please wrap any text in a <span> or <p> tag. We found the following text: ' + text);\n                        var wrapper = document.createElement('span');\n                        wrapper.innerHTML = addedNode.nodeValue;\n                        addedNode.parentNode.insertBefore(wrapper, addedNode);\n                        addedNode.parentNode.removeChild(addedNode);\n                      }\n                    }\n                    break;\n                }\n              }\n            } catch (err) {\n              _iterator13.e(err);\n            } finally {\n              _iterator13.f();\n            }\n          }\n        } catch (err) {\n          _iterator12.e(err);\n        } finally {\n          _iterator12.f();\n        }\n      }).observe(_this5, {\n        childList: true\n      });\n      return _this5;\n    }\n    _inherits(Article, _HTMLElement2);\n    return _createClass(Article, null, [{\n      key: \"is\",\n      get: function get() {\n        return 'd-article';\n      }\n    }]);\n  }(/*#__PURE__*/_wrapNativeSuper(HTMLElement));\n  var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof __webpack_require__.g !== 'undefined' ? __webpack_require__.g : typeof self !== 'undefined' ? self : {};\n  function createCommonjsModule(fn, module) {\n    return module = {\n      exports: {}\n    }, fn(module, module.exports), module.exports;\n  }\n  var bibtexParse = createCommonjsModule(function (module, exports) {\n    /* start bibtexParse 0.0.22 */\n\n    //Original work by Henrik Muehe (c) 2010\n    //\n    //CommonJS port by Mikola Lysenko 2013\n    //\n    //Port to Browser lib by ORCID / RCPETERS\n    //\n    //Issues:\n    //no comment handling within strings\n    //no string concatenation\n    //no variable values yet\n    //Grammar implemented here:\n    //bibtex -> (string | preamble | comment | entry)*;\n    //string -> '@STRING' '{' key_equals_value '}';\n    //preamble -> '@PREAMBLE' '{' value '}';\n    //comment -> '@COMMENT' '{' value '}';\n    //entry -> '@' key '{' key ',' key_value_list '}';\n    //key_value_list -> key_equals_value (',' key_equals_value)*;\n    //key_equals_value -> key '=' value;\n    //value -> value_quotes | value_braces | key;\n    //value_quotes -> '\"' .*? '\"'; // not quite\n    //value_braces -> '{' .*? '\"'; // not quite\n    (function (exports) {\n      function BibtexParser() {\n        this.months = [\"jan\", \"feb\", \"mar\", \"apr\", \"may\", \"jun\", \"jul\", \"aug\", \"sep\", \"oct\", \"nov\", \"dec\"];\n        this.notKey = [',', '{', '}', ' ', '='];\n        this.pos = 0;\n        this.input = \"\";\n        this.entries = new Array();\n        this.currentEntry = \"\";\n        this.setInput = function (t) {\n          this.input = t;\n        };\n        this.getEntries = function () {\n          return this.entries;\n        };\n        this.isWhitespace = function (s) {\n          return s == ' ' || s == '\\r' || s == '\\t' || s == '\\n';\n        };\n        this.match = function (s, canCommentOut) {\n          if (canCommentOut == undefined || canCommentOut == null) canCommentOut = true;\n          this.skipWhitespace(canCommentOut);\n          if (this.input.substring(this.pos, this.pos + s.length) == s) {\n            this.pos += s.length;\n          } else {\n            throw \"Token mismatch, expected \" + s + \", found \" + this.input.substring(this.pos);\n          }\n          this.skipWhitespace(canCommentOut);\n        };\n        this.tryMatch = function (s, canCommentOut) {\n          if (canCommentOut == undefined || canCommentOut == null) canCommentOut = true;\n          this.skipWhitespace(canCommentOut);\n          if (this.input.substring(this.pos, this.pos + s.length) == s) {\n            return true;\n          } else {\n            return false;\n          }\n        };\n\n        /* when search for a match all text can be ignored, not just white space */\n        this.matchAt = function () {\n          while (this.input.length > this.pos && this.input[this.pos] != '@') {\n            this.pos++;\n          }\n          if (this.input[this.pos] == '@') {\n            return true;\n          }\n          return false;\n        };\n        this.skipWhitespace = function (canCommentOut) {\n          while (this.isWhitespace(this.input[this.pos])) {\n            this.pos++;\n          }\n          if (this.input[this.pos] == \"%\" && canCommentOut == true) {\n            while (this.input[this.pos] != \"\\n\") {\n              this.pos++;\n            }\n            this.skipWhitespace(canCommentOut);\n          }\n        };\n        this.value_braces = function () {\n          var bracecount = 0;\n          this.match(\"{\", false);\n          var start = this.pos;\n          var escaped = false;\n          while (true) {\n            if (!escaped) {\n              if (this.input[this.pos] == '}') {\n                if (bracecount > 0) {\n                  bracecount--;\n                } else {\n                  var end = this.pos;\n                  this.match(\"}\", false);\n                  return this.input.substring(start, end);\n                }\n              } else if (this.input[this.pos] == '{') {\n                bracecount++;\n              } else if (this.pos >= this.input.length - 1) {\n                throw \"Unterminated value\";\n              }\n            }\n            if (this.input[this.pos] == '\\\\' && escaped == false) escaped = true;else escaped = false;\n            this.pos++;\n          }\n        };\n        this.value_comment = function () {\n          var str = '';\n          var brcktCnt = 0;\n          while (!(this.tryMatch(\"}\", false) && brcktCnt == 0)) {\n            str = str + this.input[this.pos];\n            if (this.input[this.pos] == '{') brcktCnt++;\n            if (this.input[this.pos] == '}') brcktCnt--;\n            if (this.pos >= this.input.length - 1) {\n              throw \"Unterminated value:\" + this.input.substring(start);\n            }\n            this.pos++;\n          }\n          return str;\n        };\n        this.value_quotes = function () {\n          this.match('\"', false);\n          var start = this.pos;\n          var escaped = false;\n          while (true) {\n            if (!escaped) {\n              if (this.input[this.pos] == '\"') {\n                var end = this.pos;\n                this.match('\"', false);\n                return this.input.substring(start, end);\n              } else if (this.pos >= this.input.length - 1) {\n                throw \"Unterminated value:\" + this.input.substring(start);\n              }\n            }\n            if (this.input[this.pos] == '\\\\' && escaped == false) escaped = true;else escaped = false;\n            this.pos++;\n          }\n        };\n        this.single_value = function () {\n          var start = this.pos;\n          if (this.tryMatch(\"{\")) {\n            return this.value_braces();\n          } else if (this.tryMatch('\"')) {\n            return this.value_quotes();\n          } else {\n            var k = this.key();\n            if (k.match(\"^[0-9]+$\")) return k;else if (this.months.indexOf(k.toLowerCase()) >= 0) return k.toLowerCase();else throw \"Value expected:\" + this.input.substring(start) + ' for key: ' + k;\n          }\n        };\n        this.value = function () {\n          var values = [];\n          values.push(this.single_value());\n          while (this.tryMatch(\"#\")) {\n            this.match(\"#\");\n            values.push(this.single_value());\n          }\n          return values.join(\"\");\n        };\n        this.key = function () {\n          var start = this.pos;\n          while (true) {\n            if (this.pos >= this.input.length) {\n              throw \"Runaway key\";\n            } // а-яА-Я is Cyrillic\n            //console.log(this.input[this.pos]);\n            if (this.notKey.indexOf(this.input[this.pos]) >= 0) {\n              return this.input.substring(start, this.pos);\n            } else {\n              this.pos++;\n            }\n          }\n        };\n        this.key_equals_value = function () {\n          var key = this.key();\n          if (this.tryMatch(\"=\")) {\n            this.match(\"=\");\n            var val = this.value();\n            return [key, val];\n          } else {\n            throw \"... = value expected, equals sign missing:\" + this.input.substring(this.pos);\n          }\n        };\n        this.key_value_list = function () {\n          var kv = this.key_equals_value();\n          this.currentEntry['entryTags'] = {};\n          this.currentEntry['entryTags'][kv[0]] = kv[1];\n          while (this.tryMatch(\",\")) {\n            this.match(\",\");\n            // fixes problems with commas at the end of a list\n            if (this.tryMatch(\"}\")) {\n              break;\n            }\n            kv = this.key_equals_value();\n            this.currentEntry['entryTags'][kv[0]] = kv[1];\n          }\n        };\n        this.entry_body = function (d) {\n          this.currentEntry = {};\n          this.currentEntry['citationKey'] = this.key();\n          this.currentEntry['entryType'] = d.substring(1);\n          this.match(\",\");\n          this.key_value_list();\n          this.entries.push(this.currentEntry);\n        };\n        this.directive = function () {\n          this.match(\"@\");\n          return \"@\" + this.key();\n        };\n        this.preamble = function () {\n          this.currentEntry = {};\n          this.currentEntry['entryType'] = 'PREAMBLE';\n          this.currentEntry['entry'] = this.value_comment();\n          this.entries.push(this.currentEntry);\n        };\n        this.comment = function () {\n          this.currentEntry = {};\n          this.currentEntry['entryType'] = 'COMMENT';\n          this.currentEntry['entry'] = this.value_comment();\n          this.entries.push(this.currentEntry);\n        };\n        this.entry = function (d) {\n          this.entry_body(d);\n        };\n        this.bibtex = function () {\n          while (this.matchAt()) {\n            var d = this.directive();\n            this.match(\"{\");\n            if (d == \"@STRING\") {\n              this.string();\n            } else if (d == \"@PREAMBLE\") {\n              this.preamble();\n            } else if (d == \"@COMMENT\") {\n              this.comment();\n            } else {\n              this.entry(d);\n            }\n            this.match(\"}\");\n          }\n        };\n      }\n      exports.toJSON = function (bibtex) {\n        var b = new BibtexParser();\n        b.setInput(bibtex);\n        b.bibtex();\n        return b.entries;\n      };\n\n      /* added during hackathon don't hate on me */\n      exports.toBibtex = function (json) {\n        var out = '';\n        for (var i in json) {\n          out += \"@\" + json[i].entryType;\n          out += '{';\n          if (json[i].citationKey) out += json[i].citationKey + ', ';\n          if (json[i].entry) out += json[i].entry;\n          if (json[i].entryTags) {\n            var tags = '';\n            for (var jdx in json[i].entryTags) {\n              if (tags.length != 0) tags += ', ';\n              tags += jdx + '= {' + json[i].entryTags[jdx] + '}';\n            }\n            out += tags;\n          }\n          out += '}\\n\\n';\n        }\n        return out;\n      };\n    })(exports);\n\n    /* end bibtexParse */\n  });\n\n  // Copyright 2018 The Distill Template Authors\n\n  function normalizeTag(string) {\n    return string.replace(/[\\t\\n ]+/g, ' ').replace(/{\\\\[\"^`.'acu~Hvs]( )?([a-zA-Z])}/g, function (full, x, _char) {\n      return _char;\n    }).replace(/{\\\\([a-zA-Z])}/g, function (full, _char2) {\n      return _char2;\n    });\n  }\n  function parseBibtex(bibtex) {\n    var bibliography = new Map();\n    var parsedEntries = bibtexParse.toJSON(bibtex);\n    var _iterator14 = _createForOfIteratorHelper(parsedEntries),\n      _step14;\n    try {\n      for (_iterator14.s(); !(_step14 = _iterator14.n()).done;) {\n        var entry = _step14.value;\n        // normalize tags; note entryTags is an object, not Map\n        for (var _i = 0, _Object$entries = Object.entries(entry.entryTags); _i < _Object$entries.length; _i++) {\n          var _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2),\n            key = _Object$entries$_i[0],\n            value = _Object$entries$_i[1];\n          entry.entryTags[key.toLowerCase()] = normalizeTag(value);\n        }\n        entry.entryTags.type = entry.entryType;\n        // add to bibliography\n        bibliography.set(entry.citationKey, entry.entryTags);\n      }\n    } catch (err) {\n      _iterator14.e(err);\n    } finally {\n      _iterator14.f();\n    }\n    return bibliography;\n  }\n  function serializeFrontmatterToBibtex(frontMatter) {\n    return \"@article{\".concat(frontMatter.slug, \",\\n  author = {\").concat(frontMatter.bibtexAuthors, \"},\\n  title = {\").concat(frontMatter.title, \"},\\n  journal = {\").concat(frontMatter.journal.title, \"},\\n  year = {\").concat(frontMatter.publishedYear, \"},\\n  note = {\").concat(frontMatter.url, \"},\\n  doi = {\").concat(frontMatter.doi, \"}\\n}\");\n  }\n\n  // Copyright 2018 The Distill Template Authors\n  var Bibliography = /*#__PURE__*/function (_HTMLElement3) {\n    function Bibliography() {\n      var _this6;\n      _classCallCheck(this, Bibliography);\n      _this6 = _callSuper(this, Bibliography);\n\n      // set up mutation observer\n      var options = {\n        childList: true,\n        characterData: true,\n        subtree: true\n      };\n      var observer = new MutationObserver(function (entries) {\n        var _iterator15 = _createForOfIteratorHelper(entries),\n          _step15;\n        try {\n          for (_iterator15.s(); !(_step15 = _iterator15.n()).done;) {\n            var entry = _step15.value;\n            if (entry.target.nodeName === 'SCRIPT' || entry.type === 'characterData') {\n              _this6.parseIfPossible();\n            }\n          }\n        } catch (err) {\n          _iterator15.e(err);\n        } finally {\n          _iterator15.f();\n        }\n      });\n      observer.observe(_this6, options);\n      return _this6;\n    }\n    _inherits(Bibliography, _HTMLElement3);\n    return _createClass(Bibliography, [{\n      key: \"connectedCallback\",\n      value: function connectedCallback() {\n        var _this7 = this;\n        requestAnimationFrame(function () {\n          _this7.parseIfPossible();\n        });\n      }\n    }, {\n      key: \"parseIfPossible\",\n      value: function parseIfPossible() {\n        var scriptTag = this.querySelector('script');\n        if (!scriptTag) return;\n        if (scriptTag.type == 'text/bibtex') {\n          var newBibtex = scriptTag.textContent;\n          if (this.bibtex !== newBibtex) {\n            this.bibtex = newBibtex;\n            var bibliography = parseBibtex(this.bibtex);\n            this.notify(bibliography);\n          }\n        } else if (scriptTag.type == 'text/json') {\n          var _bibliography = new Map(JSON.parse(scriptTag.textContent));\n          this.notify(_bibliography);\n        } else {\n          console.warn('Unsupported bibliography script tag type: ' + scriptTag.type);\n        }\n      }\n    }, {\n      key: \"notify\",\n      value: function notify(bibliography) {\n        var options = {\n          detail: bibliography,\n          bubbles: true\n        };\n        var event = new CustomEvent('onBibliographyChanged', options);\n        this.dispatchEvent(event);\n      }\n\n      /* observe 'src' attribute */\n    }, {\n      key: \"receivedBibtex\",\n      value: function receivedBibtex(event) {\n        var bibliography = parseBibtex(event.target.response);\n        this.notify(bibliography);\n      }\n    }, {\n      key: \"attributeChangedCallback\",\n      value: function attributeChangedCallback(name, oldValue, newValue) {\n        var _this8 = this;\n        var oReq = new XMLHttpRequest();\n        oReq.onload = function (e) {\n          return _this8.receivedBibtex(e);\n        };\n        oReq.onerror = function () {\n          return console.warn(\"Could not load Bibtex! (tried \".concat(newValue, \")\"));\n        };\n        oReq.responseType = 'text';\n        oReq.open('GET', newValue, true);\n        oReq.send();\n      }\n    }], [{\n      key: \"is\",\n      get: function get() {\n        return 'd-bibliography';\n      }\n    }, {\n      key: \"observedAttributes\",\n      get: function get() {\n        return ['src'];\n      }\n    }]);\n  }(/*#__PURE__*/_wrapNativeSuper(HTMLElement)); // Copyright 2018 The Distill Template Authors\n  //\n  // Licensed under the Apache License, Version 2.0 (the \"License\");\n  // you may not use this file except in compliance with the License.\n  // You may obtain a copy of the License at\n  //\n  //      http://www.apache.org/licenses/LICENSE-2.0\n  //\n  // Unless required by applicable law or agreed to in writing, software\n  // distributed under the License is distributed on an \"AS IS\" BASIS,\n  // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  // See the License for the specific language governing permissions and\n  // limitations under the License.\n  // import style from '../styles/d-byline.css';\n  function bylineTemplate(frontMatter) {\n    return \"\\n    <div class=\\\"byline grid\\\">\\n      <div>\\n          <h3>Authors</h3>\\n          <div>\\n              \".concat(frontMatter.authors.map(function (author, i) {\n      return \"\\n              <span class=\\\"author\\\">\\n        \".concat(author.personalURL ? \"\\n          <a class=\\\"name\\\" href=\\\"\".concat(author.personalURL, \"\\\">\").concat(author.name) + (i + 1 < frontMatter.authors.length ? \",\" : \"\") + \"</a>\" : \"\\n          <span class=\\\"name\\\">\".concat(author.name) + (i + 1 < frontMatter.authors.length ? \",\" : \"\") + \"</span>\", \"\\n      </span>\\n              \");\n    }).join(''), \"\\n          </div>\\n      </div>\\n      <div >\\n          <h3>Affiliation</h3>\\n          <div><a href=\\\"https://www.unibo.it/en/homepage\\\">University of Bologna</a>\\n          </div>\\n      </div>\\n      <div >\\n          <h3>Published</h3>\\n          <div>March 28, 2025</div>\\n      </div>\\n    </div>\\n    <div class=\\\"side pdf-download\\\">\\n      <h3>Download</h3>\\n      <a href=\\\"../assets/pdf/pdf_version.pdf\\\">\\n      <img style=\\\"width: 32px;\\\" src=\\\"../assets/images/256px-PDF.png\\\" alt=\\\"PDF\\\"></a>\\n    </div>\\n\");\n  }\n  var Byline = /*#__PURE__*/function (_HTMLElement4) {\n    function Byline() {\n      _classCallCheck(this, Byline);\n      return _callSuper(this, Byline, arguments);\n    }\n    _inherits(Byline, _HTMLElement4);\n    return _createClass(Byline, [{\n      key: \"frontMatter\",\n      set: function set(frontMatter) {\n        this.innerHTML = bylineTemplate(frontMatter);\n      }\n    }], [{\n      key: \"is\",\n      get: function get() {\n        return 'd-byline';\n      }\n    }]);\n  }(/*#__PURE__*/_wrapNativeSuper(HTMLElement)); // Copyright 2018 The Distill Template Authors\n  var T$3 = Template(\"d-cite\", \"\\n<style>\\n\\n:host {\\n  display: inline-block;\\n}\\n\\n.citation {\\n  color: hsla(206, 90%, 20%, 0.7);\\n}\\n\\n.citation-number {\\n  cursor: default;\\n  white-space: nowrap;\\n  font-family: -apple-system, BlinkMacSystemFont, \\\"Roboto\\\", Helvetica, sans-serif;\\n  font-size: 75%;\\n  color: hsla(206, 90%, 20%, 0.7);\\n  display: inline-block;\\n  line-height: 1.1em;\\n  text-align: center;\\n  position: relative;\\n  top: -2px;\\n  margin: 0 2px;\\n}\\n\\nfigcaption .citation-number {\\n  font-size: 11px;\\n  font-weight: normal;\\n  top: -2px;\\n  line-height: 1em;\\n}\\n\\nul {\\n  margin: 0;\\n  padding: 0;\\n  list-style-type: none;\\n}\\n\\nul li {\\n  padding: 15px 10px 15px 10px;\\n  border-bottom: 1px solid rgba(0,0,0,0.1)\\n}\\n\\nul li:last-of-type {\\n  border-bottom: none;\\n}\\n\\n</style>\\n\\n<d-hover-box id=\\\"hover-box\\\"></d-hover-box>\\n\\n<div id=\\\"citation-\\\" class=\\\"citation\\\">\\n  <span class=\\\"citation-number\\\"></span>\\n</div>\\n\");\n  var Cite = /*#__PURE__*/function (_T$3) {\n    /* Lifecycle */\n    function Cite() {\n      var _this9;\n      _classCallCheck(this, Cite);\n      _this9 = _callSuper(this, Cite);\n      _this9._numbers = [];\n      _this9._entries = [];\n      return _this9;\n    }\n    _inherits(Cite, _T$3);\n    return _createClass(Cite, [{\n      key: \"connectedCallback\",\n      value: function connectedCallback() {\n        var _this10 = this;\n        this.outerSpan = this.root.querySelector(\"#citation-\");\n        this.innerSpan = this.root.querySelector(\".citation-number\");\n        this.hoverBox = this.root.querySelector(\"d-hover-box\");\n        window.customElements.whenDefined(\"d-hover-box\").then(function () {\n          _this10.hoverBox.listen(_this10);\n        });\n        // in case this component got connected after values were set\n        if (this.numbers) {\n          this.displayNumbers(this.numbers);\n        }\n        if (this.entries) {\n          this.displayEntries(this.entries);\n        }\n      }\n\n      //TODO This causes an infinite loop on firefox with polyfills.\n      // This is only needed for interactive editing so no priority.\n      // disconnectedCallback() {\n      // const options = { detail: [this, this.keys], bubbles: true };\n      // const event = new CustomEvent('onCiteKeyRemoved', options);\n      // document.dispatchEvent(event);\n      // }\n\n      /* observe 'key' attribute */\n    }, {\n      key: \"attributeChangedCallback\",\n      value: function attributeChangedCallback(name, oldValue, newValue) {\n        var eventName = oldValue ? \"onCiteKeyChanged\" : \"onCiteKeyCreated\";\n        var keys = newValue.split(\",\").map(function (k) {\n          return k.trim();\n        });\n        var options = {\n          detail: [this, keys],\n          bubbles: true\n        };\n        var event = new CustomEvent(eventName, options);\n        document.dispatchEvent(event);\n      }\n    }, {\n      key: \"key\",\n      get: function get() {\n        return this.getAttribute(\"key\") || this.getAttribute(\"bibtex-key\");\n      },\n      set: function set(value) {\n        this.setAttribute(\"key\", value);\n      }\n    }, {\n      key: \"keys\",\n      get: function get() {\n        var result = this.key.split(\",\");\n        console.log(result);\n        return result;\n      }\n\n      /* Setters & Rendering */\n    }, {\n      key: \"numbers\",\n      get: function get() {\n        return this._numbers;\n      },\n      set: function set(numbers) {\n        this._numbers = numbers;\n        this.displayNumbers(numbers);\n      }\n    }, {\n      key: \"displayNumbers\",\n      value: function displayNumbers(numbers) {\n        if (!this.innerSpan) return;\n        var numberStrings = numbers.map(function (index) {\n          return index == -1 ? \"?\" : index + 1 + \"\";\n        });\n        var textContent = \"[\" + numberStrings.join(\", \") + \"]\";\n        this.innerSpan.textContent = textContent;\n      }\n    }, {\n      key: \"entries\",\n      get: function get() {\n        return this._entries;\n      },\n      set: function set(entries) {\n        this._entries = entries;\n        this.displayEntries(entries);\n      }\n    }, {\n      key: \"displayEntries\",\n      value: function displayEntries(entries) {\n        if (!this.hoverBox) return;\n        this.hoverBox.innerHTML = \"<ul>\\n      \".concat(entries.map(hover_cite).map(function (html) {\n          return \"<li>\".concat(html, \"</li>\");\n        }).join(\"\\n\"), \"\\n    </ul>\");\n      }\n    }], [{\n      key: \"observedAttributes\",\n      get: function get() {\n        return [\"key\", \"bibtex-key\"];\n      }\n    }]);\n  }(T$3(HTMLElement)); // Copyright 2018 The Distill Template Authors\n  var styles$1 = \"\\nd-citation-list {\\n  contain: style;\\n}\\n\\nd-citation-list .references {\\n  grid-column: text;\\n}\\n\\nd-citation-list .references .title {\\n  font-weight: 500;\\n}\\n\";\n  function renderCitationList(element, entries) {\n    var dom = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : document;\n    if (entries.size > 0) {\n      element.style.display = '';\n      var list = element.querySelector('.references');\n      if (list) {\n        list.innerHTML = '';\n      } else {\n        var stylesTag = dom.createElement('style');\n        stylesTag.innerHTML = styles$1;\n        element.appendChild(stylesTag);\n        var heading = dom.createElement('h3');\n        heading.id = 'references';\n        heading.textContent = 'References';\n        element.appendChild(heading);\n        list = dom.createElement('ol');\n        list.id = 'references-list';\n        list.className = 'references';\n        element.appendChild(list);\n      }\n      var _iterator16 = _createForOfIteratorHelper(entries),\n        _step16;\n      try {\n        for (_iterator16.s(); !(_step16 = _iterator16.n()).done;) {\n          var _step16$value = _slicedToArray(_step16.value, 2),\n            key = _step16$value[0],\n            entry = _step16$value[1];\n          var listItem = dom.createElement('li');\n          listItem.id = key;\n          listItem.innerHTML = bibliography_cite(entry);\n          list.appendChild(listItem);\n        }\n      } catch (err) {\n        _iterator16.e(err);\n      } finally {\n        _iterator16.f();\n      }\n    } else {\n      element.style.display = 'none';\n    }\n  }\n  var CitationList = /*#__PURE__*/function (_HTMLElement5) {\n    function CitationList() {\n      _classCallCheck(this, CitationList);\n      return _callSuper(this, CitationList, arguments);\n    }\n    _inherits(CitationList, _HTMLElement5);\n    return _createClass(CitationList, [{\n      key: \"connectedCallback\",\n      value: function connectedCallback() {\n        if (!this.hasAttribute('distill-prerendered')) {\n          this.style.display = 'none';\n        }\n      }\n    }, {\n      key: \"citations\",\n      set: function set(citations) {\n        renderCitationList(this, citations);\n      }\n    }], [{\n      key: \"is\",\n      get: function get() {\n        return 'd-citation-list';\n      }\n    }]);\n  }(/*#__PURE__*/_wrapNativeSuper(HTMLElement));\n  var prism = createCommonjsModule(function (module) {\n    /* **********************************************\r\n         Begin prism-core.js\r\n    ********************************************** */\n\n    var _self = typeof window !== 'undefined' ? window // if in browser\n    : typeof WorkerGlobalScope !== 'undefined' && self instanceof WorkerGlobalScope ? self // if in worker\n    : {} // if in node js\n    ;\n\n    /**\r\n     * Prism: Lightweight, robust, elegant syntax highlighting\r\n     * MIT license http://www.opensource.org/licenses/mit-license.php/\r\n     * @author Lea Verou http://lea.verou.me\r\n     */\n\n    var Prism = function (_self) {\n      // Private helper vars\n      var lang = /\\blang(?:uage)?-([\\w-]+)\\b/i;\n      var uniqueId = 0;\n      var _ = {\n        manual: _self.Prism && _self.Prism.manual,\n        disableWorkerMessageHandler: _self.Prism && _self.Prism.disableWorkerMessageHandler,\n        util: {\n          encode: function encode(tokens) {\n            if (tokens instanceof Token) {\n              return new Token(tokens.type, encode(tokens.content), tokens.alias);\n            } else if (Array.isArray(tokens)) {\n              return tokens.map(encode);\n            } else {\n              return tokens.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/\\u00a0/g, ' ');\n            }\n          },\n          type: function type(o) {\n            return Object.prototype.toString.call(o).slice(8, -1);\n          },\n          objId: function objId(obj) {\n            if (!obj['__id']) {\n              Object.defineProperty(obj, '__id', {\n                value: ++uniqueId\n              });\n            }\n            return obj['__id'];\n          },\n          // Deep clone a language definition (e.g. to extend it)\n          clone: function deepClone(o, visited) {\n            var clone,\n              id,\n              type = _.util.type(o);\n            visited = visited || {};\n            switch (type) {\n              case 'Object':\n                id = _.util.objId(o);\n                if (visited[id]) {\n                  return visited[id];\n                }\n                clone = {};\n                visited[id] = clone;\n                for (var key in o) {\n                  if (o.hasOwnProperty(key)) {\n                    clone[key] = deepClone(o[key], visited);\n                  }\n                }\n                return clone;\n              case 'Array':\n                id = _.util.objId(o);\n                if (visited[id]) {\n                  return visited[id];\n                }\n                clone = [];\n                visited[id] = clone;\n                o.forEach(function (v, i) {\n                  clone[i] = deepClone(v, visited);\n                });\n                return clone;\n              default:\n                return o;\n            }\n          },\n          /**\r\n           * Returns the Prism language of the given element set by a `language-xxxx` or `lang-xxxx` class.\r\n           *\r\n           * If no language is set for the element or the element is `null` or `undefined`, `none` will be returned.\r\n           *\r\n           * @param {Element} element\r\n           * @returns {string}\r\n           */\n          getLanguage: function getLanguage(element) {\n            while (element && !lang.test(element.className)) {\n              element = element.parentElement;\n            }\n            if (element) {\n              return (element.className.match(lang) || [, 'none'])[1].toLowerCase();\n            }\n            return 'none';\n          },\n          /**\r\n           * Returns the script element that is currently executing.\r\n           *\r\n           * This does __not__ work for line script element.\r\n           *\r\n           * @returns {HTMLScriptElement | null}\r\n           */\n          currentScript: function currentScript() {\n            if (typeof document === 'undefined') {\n              return null;\n            }\n            if ('currentScript' in document) {\n              return document.currentScript;\n            }\n\n            // IE11 workaround\n            // we'll get the src of the current script by parsing IE11's error stack trace\n            // this will not work for inline scripts\n\n            try {\n              throw new Error();\n            } catch (err) {\n              // Get file src url from stack. Specifically works with the format of stack traces in IE.\n              // A stack will look like this:\n              //\n              // Error\n              //    at _.util.currentScript (http://localhost/components/prism-core.js:119:5)\n              //    at Global code (http://localhost/components/prism-core.js:606:1)\n\n              var src = (/at [^(\\r\\n]*\\((.*):.+:.+\\)$/i.exec(err.stack) || [])[1];\n              if (src) {\n                var scripts = document.getElementsByTagName('script');\n                for (var i in scripts) {\n                  if (scripts[i].src == src) {\n                    return scripts[i];\n                  }\n                }\n              }\n              return null;\n            }\n          }\n        },\n        languages: {\n          extend: function extend(id, redef) {\n            var lang = _.util.clone(_.languages[id]);\n            for (var key in redef) {\n              lang[key] = redef[key];\n            }\n            return lang;\n          },\n          /**\r\n           * Insert a token before another token in a language literal\r\n           * As this needs to recreate the object (we cannot actually insert before keys in object literals),\r\n           * we cannot just provide an object, we need an object and a key.\r\n           * @param inside The key (or language id) of the parent\r\n           * @param before The key to insert before.\r\n           * @param insert Object with the key/value pairs to insert\r\n           * @param root The object that contains `inside`. If equal to Prism.languages, it can be omitted.\r\n           */\n          insertBefore: function insertBefore(inside, before, insert, root) {\n            root = root || _.languages;\n            var grammar = root[inside];\n            var ret = {};\n            for (var token in grammar) {\n              if (grammar.hasOwnProperty(token)) {\n                if (token == before) {\n                  for (var newToken in insert) {\n                    if (insert.hasOwnProperty(newToken)) {\n                      ret[newToken] = insert[newToken];\n                    }\n                  }\n                }\n\n                // Do not insert token which also occur in insert. See #1525\n                if (!insert.hasOwnProperty(token)) {\n                  ret[token] = grammar[token];\n                }\n              }\n            }\n            var old = root[inside];\n            root[inside] = ret;\n\n            // Update references in other language definitions\n            _.languages.DFS(_.languages, function (key, value) {\n              if (value === old && key != inside) {\n                this[key] = ret;\n              }\n            });\n            return ret;\n          },\n          // Traverse a language definition with Depth First Search\n          DFS: function DFS(o, callback, type, visited) {\n            visited = visited || {};\n            var objId = _.util.objId;\n            for (var i in o) {\n              if (o.hasOwnProperty(i)) {\n                callback.call(o, i, o[i], type || i);\n                var property = o[i],\n                  propertyType = _.util.type(property);\n                if (propertyType === 'Object' && !visited[objId(property)]) {\n                  visited[objId(property)] = true;\n                  DFS(property, callback, null, visited);\n                } else if (propertyType === 'Array' && !visited[objId(property)]) {\n                  visited[objId(property)] = true;\n                  DFS(property, callback, i, visited);\n                }\n              }\n            }\n          }\n        },\n        plugins: {},\n        highlightAll: function highlightAll(async, callback) {\n          _.highlightAllUnder(document, async, callback);\n        },\n        highlightAllUnder: function highlightAllUnder(container, async, callback) {\n          var env = {\n            callback: callback,\n            container: container,\n            selector: 'code[class*=\"language-\"], [class*=\"language-\"] code, code[class*=\"lang-\"], [class*=\"lang-\"] code'\n          };\n          _.hooks.run('before-highlightall', env);\n          env.elements = Array.prototype.slice.apply(env.container.querySelectorAll(env.selector));\n          _.hooks.run('before-all-elements-highlight', env);\n          for (var i = 0, element; element = env.elements[i++];) {\n            _.highlightElement(element, async === true, env.callback);\n          }\n        },\n        highlightElement: function highlightElement(element, async, callback) {\n          // Find language\n          var language = _.util.getLanguage(element);\n          var grammar = _.languages[language];\n\n          // Set language on the element, if not present\n          element.className = element.className.replace(lang, '').replace(/\\s+/g, ' ') + ' language-' + language;\n\n          // Set language on the parent, for styling\n          var parent = element.parentNode;\n          if (parent && parent.nodeName.toLowerCase() === 'pre') {\n            parent.className = parent.className.replace(lang, '').replace(/\\s+/g, ' ') + ' language-' + language;\n          }\n          var code = element.textContent;\n          var env = {\n            element: element,\n            language: language,\n            grammar: grammar,\n            code: code\n          };\n          function insertHighlightedCode(highlightedCode) {\n            env.highlightedCode = highlightedCode;\n            _.hooks.run('before-insert', env);\n            env.element.innerHTML = env.highlightedCode;\n            _.hooks.run('after-highlight', env);\n            _.hooks.run('complete', env);\n            callback && callback.call(env.element);\n          }\n          _.hooks.run('before-sanity-check', env);\n          if (!env.code) {\n            _.hooks.run('complete', env);\n            callback && callback.call(env.element);\n            return;\n          }\n          _.hooks.run('before-highlight', env);\n          if (!env.grammar) {\n            insertHighlightedCode(_.util.encode(env.code));\n            return;\n          }\n          if (async && _self.Worker) {\n            var worker = new Worker(_.filename);\n            worker.onmessage = function (evt) {\n              insertHighlightedCode(evt.data);\n            };\n            worker.postMessage(JSON.stringify({\n              language: env.language,\n              code: env.code,\n              immediateClose: true\n            }));\n          } else {\n            insertHighlightedCode(_.highlight(env.code, env.grammar, env.language));\n          }\n        },\n        highlight: function highlight(text, grammar, language) {\n          var env = {\n            code: text,\n            grammar: grammar,\n            language: language\n          };\n          _.hooks.run('before-tokenize', env);\n          env.tokens = _.tokenize(env.code, env.grammar);\n          _.hooks.run('after-tokenize', env);\n          return Token.stringify(_.util.encode(env.tokens), env.language);\n        },\n        tokenize: function tokenize(text, grammar) {\n          var rest = grammar.rest;\n          if (rest) {\n            for (var token in rest) {\n              grammar[token] = rest[token];\n            }\n            delete grammar.rest;\n          }\n          var tokenList = new LinkedList();\n          addAfter(tokenList, tokenList.head, text);\n          matchGrammar(text, tokenList, grammar, tokenList.head, 0);\n          return toArray(tokenList);\n        },\n        hooks: {\n          all: {},\n          add: function add(name, callback) {\n            var hooks = _.hooks.all;\n            hooks[name] = hooks[name] || [];\n            hooks[name].push(callback);\n          },\n          run: function run(name, env) {\n            var callbacks = _.hooks.all[name];\n            if (!callbacks || !callbacks.length) {\n              return;\n            }\n            for (var i = 0, callback; callback = callbacks[i++];) {\n              callback(env);\n            }\n          }\n        },\n        Token: Token\n      };\n      _self.Prism = _;\n      function Token(type, content, alias, matchedStr, greedy) {\n        this.type = type;\n        this.content = content;\n        this.alias = alias;\n        // Copy of the full string this token was created from\n        this.length = (matchedStr || '').length | 0;\n        this.greedy = !!greedy;\n      }\n      Token.stringify = function stringify(o, language) {\n        if (typeof o == 'string') {\n          return o;\n        }\n        if (Array.isArray(o)) {\n          var s = '';\n          o.forEach(function (e) {\n            s += stringify(e, language);\n          });\n          return s;\n        }\n        var env = {\n          type: o.type,\n          content: stringify(o.content, language),\n          tag: 'span',\n          classes: ['token', o.type],\n          attributes: {},\n          language: language\n        };\n        var aliases = o.alias;\n        if (aliases) {\n          if (Array.isArray(aliases)) {\n            Array.prototype.push.apply(env.classes, aliases);\n          } else {\n            env.classes.push(aliases);\n          }\n        }\n        _.hooks.run('wrap', env);\n        var attributes = '';\n        for (var name in env.attributes) {\n          attributes += ' ' + name + '=\"' + (env.attributes[name] || '').replace(/\"/g, '&quot;') + '\"';\n        }\n        return '<' + env.tag + ' class=\"' + env.classes.join(' ') + '\"' + attributes + '>' + env.content + '</' + env.tag + '>';\n      };\n\n      /**\r\n       * @param {string} text\r\n       * @param {LinkedList<string | Token>} tokenList\r\n       * @param {any} grammar\r\n       * @param {LinkedListNode<string | Token>} startNode\r\n       * @param {number} startPos\r\n       * @param {boolean} [oneshot=false]\r\n       * @param {string} [target]\r\n       */\n      function matchGrammar(text, tokenList, grammar, startNode, startPos, oneshot, target) {\n        for (var token in grammar) {\n          if (!grammar.hasOwnProperty(token) || !grammar[token]) {\n            continue;\n          }\n          var patterns = grammar[token];\n          patterns = Array.isArray(patterns) ? patterns : [patterns];\n          for (var j = 0; j < patterns.length; ++j) {\n            if (target && target == token + ',' + j) {\n              return;\n            }\n            var pattern = patterns[j],\n              inside = pattern.inside,\n              lookbehind = !!pattern.lookbehind,\n              greedy = !!pattern.greedy,\n              lookbehindLength = 0,\n              alias = pattern.alias;\n            if (greedy && !pattern.pattern.global) {\n              // Without the global flag, lastIndex won't work\n              var flags = pattern.pattern.toString().match(/[imsuy]*$/)[0];\n              pattern.pattern = RegExp(pattern.pattern.source, flags + 'g');\n            }\n            pattern = pattern.pattern || pattern;\n            for (\n            // iterate the token list and keep track of the current token/string position\n            var currentNode = startNode.next, pos = startPos; currentNode !== tokenList.tail; pos += currentNode.value.length, currentNode = currentNode.next) {\n              var str = currentNode.value;\n              if (tokenList.length > text.length) {\n                // Something went terribly wrong, ABORT, ABORT!\n                return;\n              }\n              if (str instanceof Token) {\n                continue;\n              }\n              var removeCount = 1; // this is the to parameter of removeBetween\n\n              if (greedy && currentNode != tokenList.tail.prev) {\n                pattern.lastIndex = pos;\n                var match = pattern.exec(text);\n                if (!match) {\n                  break;\n                }\n                var from = match.index + (lookbehind && match[1] ? match[1].length : 0);\n                var to = match.index + match[0].length;\n                var p = pos;\n\n                // find the node that contains the match\n                p += currentNode.value.length;\n                while (from >= p) {\n                  currentNode = currentNode.next;\n                  p += currentNode.value.length;\n                }\n                // adjust pos (and p)\n                p -= currentNode.value.length;\n                pos = p;\n\n                // the current node is a Token, then the match starts inside another Token, which is invalid\n                if (currentNode.value instanceof Token) {\n                  continue;\n                }\n\n                // find the last node which is affected by this match\n                for (var k = currentNode; k !== tokenList.tail && (p < to || typeof k.value === 'string' && !k.prev.value.greedy); k = k.next) {\n                  removeCount++;\n                  p += k.value.length;\n                }\n                removeCount--;\n\n                // replace with the new match\n                str = text.slice(pos, p);\n                match.index -= pos;\n              } else {\n                pattern.lastIndex = 0;\n                var match = pattern.exec(str);\n              }\n              if (!match) {\n                if (oneshot) {\n                  break;\n                }\n                continue;\n              }\n              if (lookbehind) {\n                lookbehindLength = match[1] ? match[1].length : 0;\n              }\n              var from = match.index + lookbehindLength,\n                match = match[0].slice(lookbehindLength),\n                to = from + match.length,\n                before = str.slice(0, from),\n                after = str.slice(to);\n              var removeFrom = currentNode.prev;\n              if (before) {\n                removeFrom = addAfter(tokenList, removeFrom, before);\n                pos += before.length;\n              }\n              removeRange(tokenList, removeFrom, removeCount);\n              var wrapped = new Token(token, inside ? _.tokenize(match, inside) : match, alias, match, greedy);\n              currentNode = addAfter(tokenList, removeFrom, wrapped);\n              if (after) {\n                addAfter(tokenList, currentNode, after);\n              }\n              if (removeCount > 1) matchGrammar(text, tokenList, grammar, currentNode.prev, pos, true, token + ',' + j);\n              if (oneshot) break;\n            }\n          }\n        }\n      }\n\n      /**\r\n       * @typedef LinkedListNode\r\n       * @property {T} value\r\n       * @property {LinkedListNode<T> | null} prev The previous node.\r\n       * @property {LinkedListNode<T> | null} next The next node.\r\n       * @template T\r\n       */\n\n      /**\r\n       * @template T\r\n       */\n      function LinkedList() {\n        /** @type {LinkedListNode<T>} */\n        var head = {\n          value: null,\n          prev: null,\n          next: null\n        };\n        /** @type {LinkedListNode<T>} */\n        var tail = {\n          value: null,\n          prev: head,\n          next: null\n        };\n        head.next = tail;\n\n        /** @type {LinkedListNode<T>} */\n        this.head = head;\n        /** @type {LinkedListNode<T>} */\n        this.tail = tail;\n        this.length = 0;\n      }\n\n      /**\r\n       * Adds a new node with the given value to the list.\r\n       * @param {LinkedList<T>} list\r\n       * @param {LinkedListNode<T>} node\r\n       * @param {T} value\r\n       * @returns {LinkedListNode<T>} The added node.\r\n       * @template T\r\n       */\n      function addAfter(list, node, value) {\n        // assumes that node != list.tail && values.length >= 0\n        var next = node.next;\n        var newNode = {\n          value: value,\n          prev: node,\n          next: next\n        };\n        node.next = newNode;\n        next.prev = newNode;\n        list.length++;\n        return newNode;\n      }\n      /**\r\n       * Removes `count` nodes after the given node. The given node will not be removed.\r\n       * @param {LinkedList<T>} list\r\n       * @param {LinkedListNode<T>} node\r\n       * @param {number} count\r\n       * @template T\r\n       */\n      function removeRange(list, node, count) {\n        var next = node.next;\n        for (var i = 0; i < count && next !== list.tail; i++) {\n          next = next.next;\n        }\n        node.next = next;\n        next.prev = node;\n        list.length -= i;\n      }\n      /**\r\n       * @param {LinkedList<T>} list\r\n       * @returns {T[]}\r\n       * @template T\r\n       */\n      function toArray(list) {\n        var array = [];\n        var node = list.head.next;\n        while (node !== list.tail) {\n          array.push(node.value);\n          node = node.next;\n        }\n        return array;\n      }\n      if (!_self.document) {\n        if (!_self.addEventListener) {\n          // in Node.js\n          return _;\n        }\n        if (!_.disableWorkerMessageHandler) {\n          // In worker\n          _self.addEventListener('message', function (evt) {\n            var message = JSON.parse(evt.data),\n              lang = message.language,\n              code = message.code,\n              immediateClose = message.immediateClose;\n            _self.postMessage(_.highlight(code, _.languages[lang], lang));\n            if (immediateClose) {\n              _self.close();\n            }\n          }, false);\n        }\n        return _;\n      }\n\n      //Get current script and highlight\n      var script = _.util.currentScript();\n      if (script) {\n        _.filename = script.src;\n        if (script.hasAttribute('data-manual')) {\n          _.manual = true;\n        }\n      }\n      function highlightAutomaticallyCallback() {\n        if (!_.manual) {\n          _.highlightAll();\n        }\n      }\n      if (!_.manual) {\n        // If the document state is \"loading\", then we'll use DOMContentLoaded.\n        // If the document state is \"interactive\" and the prism.js script is deferred, then we'll also use the\n        // DOMContentLoaded event because there might be some plugins or languages which have also been deferred and they\n        // might take longer one animation frame to execute which can create a race condition where only some plugins have\n        // been loaded when Prism.highlightAll() is executed, depending on how fast resources are loaded.\n        // See https://github.com/PrismJS/prism/issues/2102\n        var readyState = document.readyState;\n        if (readyState === 'loading' || readyState === 'interactive' && script && script.defer) {\n          document.addEventListener('DOMContentLoaded', highlightAutomaticallyCallback);\n        } else {\n          if (window.requestAnimationFrame) {\n            window.requestAnimationFrame(highlightAutomaticallyCallback);\n          } else {\n            window.setTimeout(highlightAutomaticallyCallback, 16);\n          }\n        }\n      }\n      return _;\n    }(_self);\n    if (module.exports) {\n      module.exports = Prism;\n    }\n\n    // hack for components to work correctly in node.js\n    if (typeof commonjsGlobal !== 'undefined') {\n      commonjsGlobal.Prism = Prism;\n    }\n\n    /* **********************************************\r\n         Begin prism-markup.js\r\n    ********************************************** */\n\n    Prism.languages.markup = {\n      'comment': /<!--[\\s\\S]*?-->/,\n      'prolog': /<\\?[\\s\\S]+?\\?>/,\n      'doctype': {\n        pattern: /<!DOCTYPE(?:[^>\"'[\\]]|\"[^\"]*\"|'[^']*')+(?:\\[(?:(?!<!--)[^\"'\\]]|\"[^\"]*\"|'[^']*'|<!--[\\s\\S]*?-->)*\\]\\s*)?>/i,\n        greedy: true\n      },\n      'cdata': /<!\\[CDATA\\[[\\s\\S]*?]]>/i,\n      'tag': {\n        pattern: /<\\/?(?!\\d)[^\\s>\\/=$<%]+(?:\\s(?:\\s*[^\\s>\\/=]+(?:\\s*=\\s*(?:\"[^\"]*\"|'[^']*'|[^\\s'\">=]+(?=[\\s>]))|(?=[\\s/>])))+)?\\s*\\/?>/i,\n        greedy: true,\n        inside: {\n          'tag': {\n            pattern: /^<\\/?[^\\s>\\/]+/i,\n            inside: {\n              'punctuation': /^<\\/?/,\n              'namespace': /^[^\\s>\\/:]+:/\n            }\n          },\n          'attr-value': {\n            pattern: /=\\s*(?:\"[^\"]*\"|'[^']*'|[^\\s'\">=]+)/i,\n            inside: {\n              'punctuation': [/^=/, {\n                pattern: /^(\\s*)[\"']|[\"']$/,\n                lookbehind: true\n              }]\n            }\n          },\n          'punctuation': /\\/?>/,\n          'attr-name': {\n            pattern: /[^\\s>\\/]+/,\n            inside: {\n              'namespace': /^[^\\s>\\/:]+:/\n            }\n          }\n        }\n      },\n      'entity': /&#?[\\da-z]{1,8};/i\n    };\n    Prism.languages.markup['tag'].inside['attr-value'].inside['entity'] = Prism.languages.markup['entity'];\n\n    // Plugin to make entity title show the real entity, idea by Roman Komarov\n    Prism.hooks.add('wrap', function (env) {\n      if (env.type === 'entity') {\n        env.attributes['title'] = env.content.replace(/&amp;/, '&');\n      }\n    });\n    Object.defineProperty(Prism.languages.markup.tag, 'addInlined', {\n      /**\r\n       * Adds an inlined language to markup.\r\n       *\r\n       * An example of an inlined language is CSS with `<style>` tags.\r\n       *\r\n       * @param {string} tagName The name of the tag that contains the inlined language. This name will be treated as\r\n       * case insensitive.\r\n       * @param {string} lang The language key.\r\n       * @example\r\n       * addInlined('style', 'css');\r\n       */\n      value: function addInlined(tagName, lang) {\n        var includedCdataInside = {};\n        includedCdataInside['language-' + lang] = {\n          pattern: /(^<!\\[CDATA\\[)[\\s\\S]+?(?=\\]\\]>$)/i,\n          lookbehind: true,\n          inside: Prism.languages[lang]\n        };\n        includedCdataInside['cdata'] = /^<!\\[CDATA\\[|\\]\\]>$/i;\n        var inside = {\n          'included-cdata': {\n            pattern: /<!\\[CDATA\\[[\\s\\S]*?\\]\\]>/i,\n            inside: includedCdataInside\n          }\n        };\n        inside['language-' + lang] = {\n          pattern: /[\\s\\S]+/,\n          inside: Prism.languages[lang]\n        };\n        var def = {};\n        def[tagName] = {\n          pattern: RegExp(/(<__[\\s\\S]*?>)(?:<!\\[CDATA\\[[\\s\\S]*?\\]\\]>\\s*|[\\s\\S])*?(?=<\\/__>)/.source.replace(/__/g, function () {\n            return tagName;\n          }), 'i'),\n          lookbehind: true,\n          greedy: true,\n          inside: inside\n        };\n        Prism.languages.insertBefore('markup', 'cdata', def);\n      }\n    });\n    Prism.languages.xml = Prism.languages.extend('markup', {});\n    Prism.languages.html = Prism.languages.markup;\n    Prism.languages.mathml = Prism.languages.markup;\n    Prism.languages.svg = Prism.languages.markup;\n\n    /* **********************************************\r\n         Begin prism-css.js\r\n    ********************************************** */\n\n    (function (Prism) {\n      var string = /(\"|')(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/;\n      Prism.languages.css = {\n        'comment': /\\/\\*[\\s\\S]*?\\*\\//,\n        'atrule': {\n          pattern: /@[\\w-]+[\\s\\S]*?(?:;|(?=\\s*\\{))/,\n          inside: {\n            'rule': /^@[\\w-]+/,\n            'selector-function-argument': {\n              pattern: /(\\bselector\\s*\\((?!\\s*\\))\\s*)(?:[^()]|\\((?:[^()]|\\([^()]*\\))*\\))+?(?=\\s*\\))/,\n              lookbehind: true,\n              alias: 'selector'\n            }\n            // See rest below\n          }\n        },\n        'url': {\n          pattern: RegExp('url\\\\((?:' + string.source + '|[^\\n\\r()]*)\\\\)', 'i'),\n          greedy: true,\n          inside: {\n            'function': /^url/i,\n            'punctuation': /^\\(|\\)$/\n          }\n        },\n        'selector': RegExp('[^{}\\\\s](?:[^{};\"\\']|' + string.source + ')*?(?=\\\\s*\\\\{)'),\n        'string': {\n          pattern: string,\n          greedy: true\n        },\n        'property': /[-_a-z\\xA0-\\uFFFF][-\\w\\xA0-\\uFFFF]*(?=\\s*:)/i,\n        'important': /!important\\b/i,\n        'function': /[-a-z0-9]+(?=\\()/i,\n        'punctuation': /[(){};:,]/\n      };\n      Prism.languages.css['atrule'].inside.rest = Prism.languages.css;\n      var markup = Prism.languages.markup;\n      if (markup) {\n        markup.tag.addInlined('style', 'css');\n        Prism.languages.insertBefore('inside', 'attr-value', {\n          'style-attr': {\n            pattern: /\\s*style=(\"|')(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1/i,\n            inside: {\n              'attr-name': {\n                pattern: /^\\s*style/i,\n                inside: markup.tag.inside\n              },\n              'punctuation': /^\\s*=\\s*['\"]|['\"]\\s*$/,\n              'attr-value': {\n                pattern: /.+/i,\n                inside: Prism.languages.css\n              }\n            },\n            alias: 'language-css'\n          }\n        }, markup.tag);\n      }\n    })(Prism);\n\n    /* **********************************************\r\n         Begin prism-clike.js\r\n    ********************************************** */\n\n    Prism.languages.clike = {\n      'comment': [{\n        pattern: /(^|[^\\\\])\\/\\*[\\s\\S]*?(?:\\*\\/|$)/,\n        lookbehind: true\n      }, {\n        pattern: /(^|[^\\\\:])\\/\\/.*/,\n        lookbehind: true,\n        greedy: true\n      }],\n      'string': {\n        pattern: /([\"'])(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/,\n        greedy: true\n      },\n      'class-name': {\n        pattern: /(\\b(?:class|interface|extends|implements|trait|instanceof|new)\\s+|\\bcatch\\s+\\()[\\w.\\\\]+/i,\n        lookbehind: true,\n        inside: {\n          'punctuation': /[.\\\\]/\n        }\n      },\n      'keyword': /\\b(?:if|else|while|do|for|return|in|instanceof|function|new|try|throw|catch|finally|null|break|continue)\\b/,\n      'boolean': /\\b(?:true|false)\\b/,\n      'function': /\\w+(?=\\()/,\n      'number': /\\b0x[\\da-f]+\\b|(?:\\b\\d+\\.?\\d*|\\B\\.\\d+)(?:e[+-]?\\d+)?/i,\n      'operator': /[<>]=?|[!=]=?=?|--?|\\+\\+?|&&?|\\|\\|?|[?*/~^%]/,\n      'punctuation': /[{}[\\];(),.:]/\n    };\n\n    /* **********************************************\r\n         Begin prism-javascript.js\r\n    ********************************************** */\n\n    Prism.languages.javascript = Prism.languages.extend('clike', {\n      'class-name': [Prism.languages.clike['class-name'], {\n        pattern: /(^|[^$\\w\\xA0-\\uFFFF])[_$A-Z\\xA0-\\uFFFF][$\\w\\xA0-\\uFFFF]*(?=\\.(?:prototype|constructor))/,\n        lookbehind: true\n      }],\n      'keyword': [{\n        pattern: /((?:^|})\\s*)(?:catch|finally)\\b/,\n        lookbehind: true\n      }, {\n        pattern: /(^|[^.]|\\.\\.\\.\\s*)\\b(?:as|async(?=\\s*(?:function\\b|\\(|[$\\w\\xA0-\\uFFFF]|$))|await|break|case|class|const|continue|debugger|default|delete|do|else|enum|export|extends|for|from|function|get|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|set|static|super|switch|this|throw|try|typeof|undefined|var|void|while|with|yield)\\b/,\n        lookbehind: true\n      }],\n      'number': /\\b(?:(?:0[xX](?:[\\dA-Fa-f](?:_[\\dA-Fa-f])?)+|0[bB](?:[01](?:_[01])?)+|0[oO](?:[0-7](?:_[0-7])?)+)n?|(?:\\d(?:_\\d)?)+n|NaN|Infinity)\\b|(?:\\b(?:\\d(?:_\\d)?)+\\.?(?:\\d(?:_\\d)?)*|\\B\\.(?:\\d(?:_\\d)?)+)(?:[Ee][+-]?(?:\\d(?:_\\d)?)+)?/,\n      // Allow for all non-ASCII characters (See http://stackoverflow.com/a/2008444)\n      'function': /#?[_$a-zA-Z\\xA0-\\uFFFF][$\\w\\xA0-\\uFFFF]*(?=\\s*(?:\\.\\s*(?:apply|bind|call)\\s*)?\\()/,\n      'operator': /--|\\+\\+|\\*\\*=?|=>|&&|\\|\\||[!=]==|<<=?|>>>?=?|[-+*/%&|^!=<>]=?|\\.{3}|\\?[.?]?|[~:]/\n    });\n    Prism.languages.javascript['class-name'][0].pattern = /(\\b(?:class|interface|extends|implements|instanceof|new)\\s+)[\\w.\\\\]+/;\n    Prism.languages.insertBefore('javascript', 'keyword', {\n      'regex': {\n        pattern: /((?:^|[^$\\w\\xA0-\\uFFFF.\"'\\])\\s])\\s*)\\/(?:\\[(?:[^\\]\\\\\\r\\n]|\\\\.)*]|\\\\.|[^/\\\\\\[\\r\\n])+\\/[gimyus]{0,6}(?=(?:\\s|\\/\\*[\\s\\S]*?\\*\\/)*(?:$|[\\r\\n,.;:})\\]]|\\/\\/))/,\n        lookbehind: true,\n        greedy: true\n      },\n      // This must be declared before keyword because we use \"function\" inside the look-forward\n      'function-variable': {\n        pattern: /#?[_$a-zA-Z\\xA0-\\uFFFF][$\\w\\xA0-\\uFFFF]*(?=\\s*[=:]\\s*(?:async\\s*)?(?:\\bfunction\\b|(?:\\((?:[^()]|\\([^()]*\\))*\\)|[_$a-zA-Z\\xA0-\\uFFFF][$\\w\\xA0-\\uFFFF]*)\\s*=>))/,\n        alias: 'function'\n      },\n      'parameter': [{\n        pattern: /(function(?:\\s+[_$A-Za-z\\xA0-\\uFFFF][$\\w\\xA0-\\uFFFF]*)?\\s*\\(\\s*)(?!\\s)(?:[^()]|\\([^()]*\\))+?(?=\\s*\\))/,\n        lookbehind: true,\n        inside: Prism.languages.javascript\n      }, {\n        pattern: /[_$a-z\\xA0-\\uFFFF][$\\w\\xA0-\\uFFFF]*(?=\\s*=>)/i,\n        inside: Prism.languages.javascript\n      }, {\n        pattern: /(\\(\\s*)(?!\\s)(?:[^()]|\\([^()]*\\))+?(?=\\s*\\)\\s*=>)/,\n        lookbehind: true,\n        inside: Prism.languages.javascript\n      }, {\n        pattern: /((?:\\b|\\s|^)(?!(?:as|async|await|break|case|catch|class|const|continue|debugger|default|delete|do|else|enum|export|extends|finally|for|from|function|get|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|set|static|super|switch|this|throw|try|typeof|undefined|var|void|while|with|yield)(?![$\\w\\xA0-\\uFFFF]))(?:[_$A-Za-z\\xA0-\\uFFFF][$\\w\\xA0-\\uFFFF]*\\s*)\\(\\s*)(?!\\s)(?:[^()]|\\([^()]*\\))+?(?=\\s*\\)\\s*\\{)/,\n        lookbehind: true,\n        inside: Prism.languages.javascript\n      }],\n      'constant': /\\b[A-Z](?:[A-Z_]|\\dx?)*\\b/\n    });\n    Prism.languages.insertBefore('javascript', 'string', {\n      'template-string': {\n        pattern: /`(?:\\\\[\\s\\S]|\\${(?:[^{}]|{(?:[^{}]|{[^}]*})*})+}|(?!\\${)[^\\\\`])*`/,\n        greedy: true,\n        inside: {\n          'template-punctuation': {\n            pattern: /^`|`$/,\n            alias: 'string'\n          },\n          'interpolation': {\n            pattern: /((?:^|[^\\\\])(?:\\\\{2})*)\\${(?:[^{}]|{(?:[^{}]|{[^}]*})*})+}/,\n            lookbehind: true,\n            inside: {\n              'interpolation-punctuation': {\n                pattern: /^\\${|}$/,\n                alias: 'punctuation'\n              },\n              rest: Prism.languages.javascript\n            }\n          },\n          'string': /[\\s\\S]+/\n        }\n      }\n    });\n    if (Prism.languages.markup) {\n      Prism.languages.markup.tag.addInlined('script', 'javascript');\n    }\n    Prism.languages.js = Prism.languages.javascript;\n\n    /* **********************************************\r\n         Begin prism-file-highlight.js\r\n    ********************************************** */\n\n    (function () {\n      if (typeof self === 'undefined' || !self.Prism || !self.document || !document.querySelector) {\n        return;\n      }\n\n      /**\r\n       * @param {Element} [container=document]\r\n       */\n      self.Prism.fileHighlight = function (container) {\n        container = container || document;\n        var Extensions = {\n          'js': 'javascript',\n          'py': 'python',\n          'rb': 'ruby',\n          'ps1': 'powershell',\n          'psm1': 'powershell',\n          'sh': 'bash',\n          'bat': 'batch',\n          'h': 'c',\n          'tex': 'latex'\n        };\n        Array.prototype.slice.call(container.querySelectorAll('pre[data-src]')).forEach(function (pre) {\n          // ignore if already loaded\n          if (pre.hasAttribute('data-src-loaded')) {\n            return;\n          }\n\n          // load current\n          var src = pre.getAttribute('data-src');\n          var language,\n            parent = pre;\n          var lang = /\\blang(?:uage)?-([\\w-]+)\\b/i;\n          while (parent && !lang.test(parent.className)) {\n            parent = parent.parentNode;\n          }\n          if (parent) {\n            language = (pre.className.match(lang) || [, ''])[1];\n          }\n          if (!language) {\n            var extension = (src.match(/\\.(\\w+)$/) || [, ''])[1];\n            language = Extensions[extension] || extension;\n          }\n          var code = document.createElement('code');\n          code.className = 'language-' + language;\n          pre.textContent = '';\n          code.textContent = 'Loading…';\n          pre.appendChild(code);\n          var xhr = new XMLHttpRequest();\n          xhr.open('GET', src, true);\n          xhr.onreadystatechange = function () {\n            if (xhr.readyState == 4) {\n              if (xhr.status < 400 && xhr.responseText) {\n                code.textContent = xhr.responseText;\n                Prism.highlightElement(code);\n                // mark as loaded\n                pre.setAttribute('data-src-loaded', '');\n              } else if (xhr.status >= 400) {\n                code.textContent = '✖ Error ' + xhr.status + ' while fetching file: ' + xhr.statusText;\n              } else {\n                code.textContent = '✖ Error: File does not exist or is empty';\n              }\n            }\n          };\n          xhr.send(null);\n        });\n      };\n      document.addEventListener('DOMContentLoaded', function () {\n        // execute inside handler, for dropping Event as argument\n        self.Prism.fileHighlight();\n      });\n    })();\n  });\n  Prism.languages.python = {\n    'comment': {\n      pattern: /(^|[^\\\\])#.*/,\n      lookbehind: true\n    },\n    'string-interpolation': {\n      pattern: /(?:f|rf|fr)(?:(\"\"\"|''')[\\s\\S]+?\\1|(\"|')(?:\\\\.|(?!\\2)[^\\\\\\r\\n])*\\2)/i,\n      greedy: true,\n      inside: {\n        'interpolation': {\n          // \"{\" <expression> <optional \"!s\", \"!r\", or \"!a\"> <optional \":\" format specifier> \"}\"\n          pattern: /((?:^|[^{])(?:{{)*){(?!{)(?:[^{}]|{(?!{)(?:[^{}]|{(?!{)(?:[^{}])+})+})+}/,\n          lookbehind: true,\n          inside: {\n            'format-spec': {\n              pattern: /(:)[^:(){}]+(?=}$)/,\n              lookbehind: true\n            },\n            'conversion-option': {\n              pattern: /![sra](?=[:}]$)/,\n              alias: 'punctuation'\n            },\n            rest: null\n          }\n        },\n        'string': /[\\s\\S]+/\n      }\n    },\n    'triple-quoted-string': {\n      pattern: /(?:[rub]|rb|br)?(\"\"\"|''')[\\s\\S]+?\\1/i,\n      greedy: true,\n      alias: 'string'\n    },\n    'string': {\n      pattern: /(?:[rub]|rb|br)?(\"|')(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/i,\n      greedy: true\n    },\n    'function': {\n      pattern: /((?:^|\\s)def[ \\t]+)[a-zA-Z_]\\w*(?=\\s*\\()/g,\n      lookbehind: true\n    },\n    'class-name': {\n      pattern: /(\\bclass\\s+)\\w+/i,\n      lookbehind: true\n    },\n    'decorator': {\n      pattern: /(^\\s*)@\\w+(?:\\.\\w+)*/im,\n      lookbehind: true,\n      alias: ['annotation', 'punctuation'],\n      inside: {\n        'punctuation': /\\./\n      }\n    },\n    'keyword': /\\b(?:and|as|assert|async|await|break|class|continue|def|del|elif|else|except|exec|finally|for|from|global|if|import|in|is|lambda|nonlocal|not|or|pass|print|raise|return|try|while|with|yield)\\b/,\n    'builtin': /\\b(?:__import__|abs|all|any|apply|ascii|basestring|bin|bool|buffer|bytearray|bytes|callable|chr|classmethod|cmp|coerce|compile|complex|delattr|dict|dir|divmod|enumerate|eval|execfile|file|filter|float|format|frozenset|getattr|globals|hasattr|hash|help|hex|id|input|int|intern|isinstance|issubclass|iter|len|list|locals|long|map|max|memoryview|min|next|object|oct|open|ord|pow|property|range|raw_input|reduce|reload|repr|reversed|round|set|setattr|slice|sorted|staticmethod|str|sum|super|tuple|type|unichr|unicode|vars|xrange|zip)\\b/,\n    'boolean': /\\b(?:True|False|None)\\b/,\n    'number': /(?:\\b(?=\\d)|\\B(?=\\.))(?:0[bo])?(?:(?:\\d|0x[\\da-f])[\\da-f]*\\.?\\d*|\\.\\d+)(?:e[+-]?\\d+)?j?\\b/i,\n    'operator': /[-+%=]=?|!=|\\*\\*?=?|\\/\\/?=?|<[<=>]?|>[=>]?|[&|^~]/,\n    'punctuation': /[{}[\\];(),.:]/\n  };\n  Prism.languages.python['string-interpolation'].inside['interpolation'].inside.rest = Prism.languages.python;\n  Prism.languages.py = Prism.languages.python;\n  Prism.languages.clike = {\n    'comment': [{\n      pattern: /(^|[^\\\\])\\/\\*[\\s\\S]*?(?:\\*\\/|$)/,\n      lookbehind: true\n    }, {\n      pattern: /(^|[^\\\\:])\\/\\/.*/,\n      lookbehind: true,\n      greedy: true\n    }],\n    'string': {\n      pattern: /([\"'])(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/,\n      greedy: true\n    },\n    'class-name': {\n      pattern: /(\\b(?:class|interface|extends|implements|trait|instanceof|new)\\s+|\\bcatch\\s+\\()[\\w.\\\\]+/i,\n      lookbehind: true,\n      inside: {\n        'punctuation': /[.\\\\]/\n      }\n    },\n    'keyword': /\\b(?:if|else|while|do|for|return|in|instanceof|function|new|try|throw|catch|finally|null|break|continue)\\b/,\n    'boolean': /\\b(?:true|false)\\b/,\n    'function': /\\w+(?=\\()/,\n    'number': /\\b0x[\\da-f]+\\b|(?:\\b\\d+\\.?\\d*|\\B\\.\\d+)(?:e[+-]?\\d+)?/i,\n    'operator': /[<>]=?|[!=]=?=?|--?|\\+\\+?|&&?|\\|\\|?|[?*/~^%]/,\n    'punctuation': /[{}[\\];(),.:]/\n  };\n  Prism.languages.lua = {\n    'comment': /^#!.+|--(?:\\[(=*)\\[[\\s\\S]*?\\]\\1\\]|.*)/m,\n    // \\z may be used to skip the following space\n    'string': {\n      pattern: /([\"'])(?:(?!\\1)[^\\\\\\r\\n]|\\\\z(?:\\r\\n|\\s)|\\\\(?:\\r\\n|[\\s\\S]))*\\1|\\[(=*)\\[[\\s\\S]*?\\]\\2\\]/,\n      greedy: true\n    },\n    'number': /\\b0x[a-f\\d]+\\.?[a-f\\d]*(?:p[+-]?\\d+)?\\b|\\b\\d+(?:\\.\\B|\\.?\\d*(?:e[+-]?\\d+)?\\b)|\\B\\.\\d+(?:e[+-]?\\d+)?\\b/i,\n    'keyword': /\\b(?:and|break|do|else|elseif|end|false|for|function|goto|if|in|local|nil|not|or|repeat|return|then|true|until|while)\\b/,\n    'function': /(?!\\d)\\w+(?=\\s*(?:[({]))/,\n    'operator': [/[-+*%^&|#]|\\/\\/?|<[<=]?|>[>=]?|[=~]=?/, {\n      // Match \"..\" but don't break \"...\"\n      pattern: /(^|[^.])\\.\\.(?!\\.)/,\n      lookbehind: true\n    }],\n    'punctuation': /[\\[\\](){},;]|\\.+|:+/\n  };\n  (function (Prism) {\n    // $ set | grep '^[A-Z][^[:space:]]*=' | cut -d= -f1 | tr '\\n' '|'\n    // + LC_ALL, RANDOM, REPLY, SECONDS.\n    // + make sure PS1..4 are here as they are not always set,\n    // - some useless things.\n    var envVars = '\\\\b(?:BASH|BASHOPTS|BASH_ALIASES|BASH_ARGC|BASH_ARGV|BASH_CMDS|BASH_COMPLETION_COMPAT_DIR|BASH_LINENO|BASH_REMATCH|BASH_SOURCE|BASH_VERSINFO|BASH_VERSION|COLORTERM|COLUMNS|COMP_WORDBREAKS|DBUS_SESSION_BUS_ADDRESS|DEFAULTS_PATH|DESKTOP_SESSION|DIRSTACK|DISPLAY|EUID|GDMSESSION|GDM_LANG|GNOME_KEYRING_CONTROL|GNOME_KEYRING_PID|GPG_AGENT_INFO|GROUPS|HISTCONTROL|HISTFILE|HISTFILESIZE|HISTSIZE|HOME|HOSTNAME|HOSTTYPE|IFS|INSTANCE|JOB|LANG|LANGUAGE|LC_ADDRESS|LC_ALL|LC_IDENTIFICATION|LC_MEASUREMENT|LC_MONETARY|LC_NAME|LC_NUMERIC|LC_PAPER|LC_TELEPHONE|LC_TIME|LESSCLOSE|LESSOPEN|LINES|LOGNAME|LS_COLORS|MACHTYPE|MAILCHECK|MANDATORY_PATH|NO_AT_BRIDGE|OLDPWD|OPTERR|OPTIND|ORBIT_SOCKETDIR|OSTYPE|PAPERSIZE|PATH|PIPESTATUS|PPID|PS1|PS2|PS3|PS4|PWD|RANDOM|REPLY|SECONDS|SELINUX_INIT|SESSION|SESSIONTYPE|SESSION_MANAGER|SHELL|SHELLOPTS|SHLVL|SSH_AUTH_SOCK|TERM|UID|UPSTART_EVENTS|UPSTART_INSTANCE|UPSTART_JOB|UPSTART_SESSION|USER|WINDOWID|XAUTHORITY|XDG_CONFIG_DIRS|XDG_CURRENT_DESKTOP|XDG_DATA_DIRS|XDG_GREETER_DATA_DIR|XDG_MENU_PREFIX|XDG_RUNTIME_DIR|XDG_SEAT|XDG_SEAT_PATH|XDG_SESSION_DESKTOP|XDG_SESSION_ID|XDG_SESSION_PATH|XDG_SESSION_TYPE|XDG_VTNR|XMODIFIERS)\\\\b';\n    var insideString = {\n      'environment': {\n        pattern: RegExp(\"\\\\$\" + envVars),\n        alias: 'constant'\n      },\n      'variable': [\n      // [0]: Arithmetic Environment\n      {\n        pattern: /\\$?\\(\\([\\s\\S]+?\\)\\)/,\n        greedy: true,\n        inside: {\n          // If there is a $ sign at the beginning highlight $(( and )) as variable\n          'variable': [{\n            pattern: /(^\\$\\(\\([\\s\\S]+)\\)\\)/,\n            lookbehind: true\n          }, /^\\$\\(\\(/],\n          'number': /\\b0x[\\dA-Fa-f]+\\b|(?:\\b\\d+\\.?\\d*|\\B\\.\\d+)(?:[Ee]-?\\d+)?/,\n          // Operators according to https://www.gnu.org/software/bash/manual/bashref.html#Shell-Arithmetic\n          'operator': /--?|-=|\\+\\+?|\\+=|!=?|~|\\*\\*?|\\*=|\\/=?|%=?|<<=?|>>=?|<=?|>=?|==?|&&?|&=|\\^=?|\\|\\|?|\\|=|\\?|:/,\n          // If there is no $ sign at the beginning highlight (( and )) as punctuation\n          'punctuation': /\\(\\(?|\\)\\)?|,|;/\n        }\n      },\n      // [1]: Command Substitution\n      {\n        pattern: /\\$\\((?:\\([^)]+\\)|[^()])+\\)|`[^`]+`/,\n        greedy: true,\n        inside: {\n          'variable': /^\\$\\(|^`|\\)$|`$/\n        }\n      },\n      // [2]: Brace expansion\n      {\n        pattern: /\\$\\{[^}]+\\}/,\n        greedy: true,\n        inside: {\n          'operator': /:[-=?+]?|[!\\/]|##?|%%?|\\^\\^?|,,?/,\n          'punctuation': /[\\[\\]]/,\n          'environment': {\n            pattern: RegExp(\"(\\\\{)\" + envVars),\n            lookbehind: true,\n            alias: 'constant'\n          }\n        }\n      }, /\\$(?:\\w+|[#?*!@$])/],\n      // Escape sequences from echo and printf's manuals, and escaped quotes.\n      'entity': /\\\\(?:[abceEfnrtv\\\\\"]|O?[0-7]{1,3}|x[0-9a-fA-F]{1,2}|u[0-9a-fA-F]{4}|U[0-9a-fA-F]{8})/\n    };\n    Prism.languages.bash = {\n      'shebang': {\n        pattern: /^#!\\s*\\/.*/,\n        alias: 'important'\n      },\n      'comment': {\n        pattern: /(^|[^\"{\\\\$])#.*/,\n        lookbehind: true\n      },\n      'function-name': [\n      // a) function foo {\n      // b) foo() {\n      // c) function foo() {\n      // but not “foo {”\n      {\n        // a) and c)\n        pattern: /(\\bfunction\\s+)\\w+(?=(?:\\s*\\(?:\\s*\\))?\\s*\\{)/,\n        lookbehind: true,\n        alias: 'function'\n      }, {\n        // b)\n        pattern: /\\b\\w+(?=\\s*\\(\\s*\\)\\s*\\{)/,\n        alias: 'function'\n      }],\n      // Highlight variable names as variables in for and select beginnings.\n      'for-or-select': {\n        pattern: /(\\b(?:for|select)\\s+)\\w+(?=\\s+in\\s)/,\n        alias: 'variable',\n        lookbehind: true\n      },\n      // Highlight variable names as variables in the left-hand part\n      // of assignments (“=” and “+=”).\n      'assign-left': {\n        pattern: /(^|[\\s;|&]|[<>]\\()\\w+(?=\\+?=)/,\n        inside: {\n          'environment': {\n            pattern: RegExp(\"(^|[\\\\s;|&]|[<>]\\\\()\" + envVars),\n            lookbehind: true,\n            alias: 'constant'\n          }\n        },\n        alias: 'variable',\n        lookbehind: true\n      },\n      'string': [\n      // Support for Here-documents https://en.wikipedia.org/wiki/Here_document\n      {\n        pattern: /((?:^|[^<])<<-?\\s*)(\\w+?)\\s*(?:\\r?\\n|\\r)[\\s\\S]*?(?:\\r?\\n|\\r)\\2/,\n        lookbehind: true,\n        greedy: true,\n        inside: insideString\n      },\n      // Here-document with quotes around the tag\n      // → No expansion (so no “inside”).\n      {\n        pattern: /((?:^|[^<])<<-?\\s*)([\"'])(\\w+)\\2\\s*(?:\\r?\\n|\\r)[\\s\\S]*?(?:\\r?\\n|\\r)\\3/,\n        lookbehind: true,\n        greedy: true\n      },\n      // “Normal” string\n      {\n        pattern: /(^|[^\\\\](?:\\\\\\\\)*)([\"'])(?:\\\\[\\s\\S]|\\$\\([^)]+\\)|`[^`]+`|(?!\\2)[^\\\\])*\\2/,\n        lookbehind: true,\n        greedy: true,\n        inside: insideString\n      }],\n      'environment': {\n        pattern: RegExp(\"\\\\$?\" + envVars),\n        alias: 'constant'\n      },\n      'variable': insideString.variable,\n      'function': {\n        pattern: /(^|[\\s;|&]|[<>]\\()(?:add|apropos|apt|aptitude|apt-cache|apt-get|aspell|automysqlbackup|awk|basename|bash|bc|bconsole|bg|bzip2|cal|cat|cfdisk|chgrp|chkconfig|chmod|chown|chroot|cksum|clear|cmp|column|comm|cp|cron|crontab|csplit|curl|cut|date|dc|dd|ddrescue|debootstrap|df|diff|diff3|dig|dir|dircolors|dirname|dirs|dmesg|du|egrep|eject|env|ethtool|expand|expect|expr|fdformat|fdisk|fg|fgrep|file|find|fmt|fold|format|free|fsck|ftp|fuser|gawk|git|gparted|grep|groupadd|groupdel|groupmod|groups|grub-mkconfig|gzip|halt|head|hg|history|host|hostname|htop|iconv|id|ifconfig|ifdown|ifup|import|install|ip|jobs|join|kill|killall|less|link|ln|locate|logname|logrotate|look|lpc|lpr|lprint|lprintd|lprintq|lprm|ls|lsof|lynx|make|man|mc|mdadm|mkconfig|mkdir|mke2fs|mkfifo|mkfs|mkisofs|mknod|mkswap|mmv|more|most|mount|mtools|mtr|mutt|mv|nano|nc|netstat|nice|nl|nohup|notify-send|npm|nslookup|op|open|parted|passwd|paste|pathchk|ping|pkill|pnpm|popd|pr|printcap|printenv|ps|pushd|pv|quota|quotacheck|quotactl|ram|rar|rcp|reboot|remsync|rename|renice|rev|rm|rmdir|rpm|rsync|scp|screen|sdiff|sed|sendmail|seq|service|sftp|sh|shellcheck|shuf|shutdown|sleep|slocate|sort|split|ssh|stat|strace|su|sudo|sum|suspend|swapon|sync|tac|tail|tar|tee|time|timeout|top|touch|tr|traceroute|tsort|tty|umount|uname|unexpand|uniq|units|unrar|unshar|unzip|update-grub|uptime|useradd|userdel|usermod|users|uudecode|uuencode|v|vdir|vi|vim|virsh|vmstat|wait|watch|wc|wget|whereis|which|who|whoami|write|xargs|xdg-open|yarn|yes|zenity|zip|zsh|zypper)(?=$|[)\\s;|&])/,\n        lookbehind: true\n      },\n      'keyword': {\n        pattern: /(^|[\\s;|&]|[<>]\\()(?:if|then|else|elif|fi|for|while|in|case|esac|function|select|do|done|until)(?=$|[)\\s;|&])/,\n        lookbehind: true\n      },\n      // https://www.gnu.org/software/bash/manual/html_node/Shell-Builtin-Commands.html\n      'builtin': {\n        pattern: /(^|[\\s;|&]|[<>]\\()(?:\\.|:|break|cd|continue|eval|exec|exit|export|getopts|hash|pwd|readonly|return|shift|test|times|trap|umask|unset|alias|bind|builtin|caller|command|declare|echo|enable|help|let|local|logout|mapfile|printf|read|readarray|source|type|typeset|ulimit|unalias|set|shopt)(?=$|[)\\s;|&])/,\n        lookbehind: true,\n        // Alias added to make those easier to distinguish from strings.\n        alias: 'class-name'\n      },\n      'boolean': {\n        pattern: /(^|[\\s;|&]|[<>]\\()(?:true|false)(?=$|[)\\s;|&])/,\n        lookbehind: true\n      },\n      'file-descriptor': {\n        pattern: /\\B&\\d\\b/,\n        alias: 'important'\n      },\n      'operator': {\n        // Lots of redirections here, but not just that.\n        pattern: /\\d?<>|>\\||\\+=|==?|!=?|=~|<<[<-]?|[&\\d]?>>|\\d?[<>]&?|&[>&]?|\\|[&|]?|<=?|>=?/,\n        inside: {\n          'file-descriptor': {\n            pattern: /^\\d/,\n            alias: 'important'\n          }\n        }\n      },\n      'punctuation': /\\$?\\(\\(?|\\)\\)?|\\.\\.|[{}[\\];\\\\]/,\n      'number': {\n        pattern: /(^|\\s)(?:[1-9]\\d*|0)(?:[.,]\\d+)?\\b/,\n        lookbehind: true\n      }\n    };\n\n    /* Patterns in command substitution. */\n    var toBeCopied = ['comment', 'function-name', 'for-or-select', 'assign-left', 'string', 'environment', 'function', 'keyword', 'builtin', 'boolean', 'file-descriptor', 'operator', 'punctuation', 'number'];\n    var inside = insideString.variable[1].inside;\n    for (var i = 0; i < toBeCopied.length; i++) {\n      inside[toBeCopied[i]] = Prism.languages.bash[toBeCopied[i]];\n    }\n    Prism.languages.shell = Prism.languages.bash;\n  })(Prism);\n  Prism.languages.go = Prism.languages.extend('clike', {\n    'keyword': /\\b(?:break|case|chan|const|continue|default|defer|else|fallthrough|for|func|go(?:to)?|if|import|interface|map|package|range|return|select|struct|switch|type|var)\\b/,\n    'builtin': /\\b(?:bool|byte|complex(?:64|128)|error|float(?:32|64)|rune|string|u?int(?:8|16|32|64)?|uintptr|append|cap|close|complex|copy|delete|imag|len|make|new|panic|print(?:ln)?|real|recover)\\b/,\n    'boolean': /\\b(?:_|iota|nil|true|false)\\b/,\n    'operator': /[*\\/%^!=]=?|\\+[=+]?|-[=-]?|\\|[=|]?|&(?:=|&|\\^=?)?|>(?:>=?|=)?|<(?:<=?|=|-)?|:=|\\.\\.\\./,\n    'number': /(?:\\b0x[a-f\\d]+|(?:\\b\\d+\\.?\\d*|\\B\\.\\d+)(?:e[-+]?\\d+)?)i?/i,\n    'string': {\n      pattern: /([\"'`])(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1/,\n      greedy: true\n    }\n  });\n  delete Prism.languages.go['class-name'];\n  (function (Prism) {\n    // Allow only one line break\n    var inner = /(?:\\\\.|[^\\\\\\n\\r]|(?:\\n|\\r\\n?)(?!\\n|\\r\\n?))/.source;\n\n    /**\r\n     * This function is intended for the creation of the bold or italic pattern.\r\n     *\r\n     * This also adds a lookbehind group to the given pattern to ensure that the pattern is not backslash-escaped.\r\n     *\r\n     * _Note:_ Keep in mind that this adds a capturing group.\r\n     *\r\n     * @param {string} pattern\r\n     * @param {boolean} starAlternative Whether to also add an alternative where all `_`s are replaced with `*`s.\r\n     * @returns {RegExp}\r\n     */\n    function createInline(pattern, starAlternative) {\n      pattern = pattern.replace(/<inner>/g, function () {\n        return inner;\n      });\n      if (starAlternative) {\n        pattern = pattern + '|' + pattern.replace(/_/g, '\\\\*');\n      }\n      return RegExp(/((?:^|[^\\\\])(?:\\\\{2})*)/.source + '(?:' + pattern + ')');\n    }\n    var tableCell = /(?:\\\\.|``.+?``|`[^`\\r\\n]+`|[^\\\\|\\r\\n`])+/.source;\n    var tableRow = /\\|?__(?:\\|__)+\\|?(?:(?:\\n|\\r\\n?)|$)/.source.replace(/__/g, function () {\n      return tableCell;\n    });\n    var tableLine = /\\|?[ \\t]*:?-{3,}:?[ \\t]*(?:\\|[ \\t]*:?-{3,}:?[ \\t]*)+\\|?(?:\\n|\\r\\n?)/.source;\n    Prism.languages.markdown = Prism.languages.extend('markup', {});\n    Prism.languages.insertBefore('markdown', 'prolog', {\n      'blockquote': {\n        // > ...\n        pattern: /^>(?:[\\t ]*>)*/m,\n        alias: 'punctuation'\n      },\n      'table': {\n        pattern: RegExp('^' + tableRow + tableLine + '(?:' + tableRow + ')*', 'm'),\n        inside: {\n          'table-data-rows': {\n            pattern: RegExp('^(' + tableRow + tableLine + ')(?:' + tableRow + ')*$'),\n            lookbehind: true,\n            inside: {\n              'table-data': {\n                pattern: RegExp(tableCell),\n                inside: Prism.languages.markdown\n              },\n              'punctuation': /\\|/\n            }\n          },\n          'table-line': {\n            pattern: RegExp('^(' + tableRow + ')' + tableLine + '$'),\n            lookbehind: true,\n            inside: {\n              'punctuation': /\\||:?-{3,}:?/\n            }\n          },\n          'table-header-row': {\n            pattern: RegExp('^' + tableRow + '$'),\n            inside: {\n              'table-header': {\n                pattern: RegExp(tableCell),\n                alias: 'important',\n                inside: Prism.languages.markdown\n              },\n              'punctuation': /\\|/\n            }\n          }\n        }\n      },\n      'code': [{\n        // Prefixed by 4 spaces or 1 tab and preceded by an empty line\n        pattern: /((?:^|\\n)[ \\t]*\\n|(?:^|\\r\\n?)[ \\t]*\\r\\n?)(?: {4}|\\t).+(?:(?:\\n|\\r\\n?)(?: {4}|\\t).+)*/,\n        lookbehind: true,\n        alias: 'keyword'\n      }, {\n        // `code`\n        // ``code``\n        pattern: /``.+?``|`[^`\\r\\n]+`/,\n        alias: 'keyword'\n      }, {\n        // ```optional language\n        // code block\n        // ```\n        pattern: /^```[\\s\\S]*?^```$/m,\n        greedy: true,\n        inside: {\n          'code-block': {\n            pattern: /^(```.*(?:\\n|\\r\\n?))[\\s\\S]+?(?=(?:\\n|\\r\\n?)^```$)/m,\n            lookbehind: true\n          },\n          'code-language': {\n            pattern: /^(```).+/,\n            lookbehind: true\n          },\n          'punctuation': /```/\n        }\n      }],\n      'title': [{\n        // title 1\n        // =======\n\n        // title 2\n        // -------\n        pattern: /\\S.*(?:\\n|\\r\\n?)(?:==+|--+)(?=[ \\t]*$)/m,\n        alias: 'important',\n        inside: {\n          punctuation: /==+$|--+$/\n        }\n      }, {\n        // # title 1\n        // ###### title 6\n        pattern: /(^\\s*)#+.+/m,\n        lookbehind: true,\n        alias: 'important',\n        inside: {\n          punctuation: /^#+|#+$/\n        }\n      }],\n      'hr': {\n        // ***\n        // ---\n        // * * *\n        // -----------\n        pattern: /(^\\s*)([*-])(?:[\\t ]*\\2){2,}(?=\\s*$)/m,\n        lookbehind: true,\n        alias: 'punctuation'\n      },\n      'list': {\n        // * item\n        // + item\n        // - item\n        // 1. item\n        pattern: /(^\\s*)(?:[*+-]|\\d+\\.)(?=[\\t ].)/m,\n        lookbehind: true,\n        alias: 'punctuation'\n      },\n      'url-reference': {\n        // [id]: http://example.com \"Optional title\"\n        // [id]: http://example.com 'Optional title'\n        // [id]: http://example.com (Optional title)\n        // [id]: <http://example.com> \"Optional title\"\n        pattern: /!?\\[[^\\]]+\\]:[\\t ]+(?:\\S+|<(?:\\\\.|[^>\\\\])+>)(?:[\\t ]+(?:\"(?:\\\\.|[^\"\\\\])*\"|'(?:\\\\.|[^'\\\\])*'|\\((?:\\\\.|[^)\\\\])*\\)))?/,\n        inside: {\n          'variable': {\n            pattern: /^(!?\\[)[^\\]]+/,\n            lookbehind: true\n          },\n          'string': /(?:\"(?:\\\\.|[^\"\\\\])*\"|'(?:\\\\.|[^'\\\\])*'|\\((?:\\\\.|[^)\\\\])*\\))$/,\n          'punctuation': /^[\\[\\]!:]|[<>]/\n        },\n        alias: 'url'\n      },\n      'bold': {\n        // **strong**\n        // __strong__\n\n        // allow one nested instance of italic text using the same delimiter\n        pattern: createInline(/__(?:(?!_)<inner>|_(?:(?!_)<inner>)+_)+__/.source, true),\n        lookbehind: true,\n        greedy: true,\n        inside: {\n          'content': {\n            pattern: /(^..)[\\s\\S]+(?=..$)/,\n            lookbehind: true,\n            inside: {} // see below\n          },\n          'punctuation': /\\*\\*|__/\n        }\n      },\n      'italic': {\n        // *em*\n        // _em_\n\n        // allow one nested instance of bold text using the same delimiter\n        pattern: createInline(/_(?:(?!_)<inner>|__(?:(?!_)<inner>)+__)+_/.source, true),\n        lookbehind: true,\n        greedy: true,\n        inside: {\n          'content': {\n            pattern: /(^.)[\\s\\S]+(?=.$)/,\n            lookbehind: true,\n            inside: {} // see below\n          },\n          'punctuation': /[*_]/\n        }\n      },\n      'strike': {\n        // ~~strike through~~\n        // ~strike~\n        pattern: createInline(/(~~?)(?:(?!~)<inner>)+?\\2/.source, false),\n        lookbehind: true,\n        greedy: true,\n        inside: {\n          'content': {\n            pattern: /(^~~?)[\\s\\S]+(?=\\1$)/,\n            lookbehind: true,\n            inside: {} // see below\n          },\n          'punctuation': /~~?/\n        }\n      },\n      'url': {\n        // [example](http://example.com \"Optional title\")\n        // [example][id]\n        // [example] [id]\n        pattern: createInline(/!?\\[(?:(?!\\])<inner>)+\\](?:\\([^\\s)]+(?:[\\t ]+\"(?:\\\\.|[^\"\\\\])*\")?\\)| ?\\[(?:(?!\\])<inner>)+\\])/.source, false),\n        lookbehind: true,\n        greedy: true,\n        inside: {\n          'variable': {\n            pattern: /(\\[)[^\\]]+(?=\\]$)/,\n            lookbehind: true\n          },\n          'content': {\n            pattern: /(^!?\\[)[^\\]]+(?=\\])/,\n            lookbehind: true,\n            inside: {} // see below\n          },\n          'string': {\n            pattern: /\"(?:\\\\.|[^\"\\\\])*\"(?=\\)$)/\n          }\n        }\n      }\n    });\n    ['url', 'bold', 'italic', 'strike'].forEach(function (token) {\n      ['url', 'bold', 'italic', 'strike'].forEach(function (inside) {\n        if (token !== inside) {\n          Prism.languages.markdown[token].inside.content.inside[inside] = Prism.languages.markdown[inside];\n        }\n      });\n    });\n    Prism.hooks.add('after-tokenize', function (env) {\n      if (env.language !== 'markdown' && env.language !== 'md') {\n        return;\n      }\n      function walkTokens(tokens) {\n        if (!tokens || typeof tokens === 'string') {\n          return;\n        }\n        for (var i = 0, l = tokens.length; i < l; i++) {\n          var token = tokens[i];\n          if (token.type !== 'code') {\n            walkTokens(token.content);\n            continue;\n          }\n\n          /*\r\n           * Add the correct `language-xxxx` class to this code block. Keep in mind that the `code-language` token\r\n           * is optional. But the grammar is defined so that there is only one case we have to handle:\r\n           *\r\n           * token.content = [\r\n           *     <span class=\"punctuation\">```</span>,\r\n           *     <span class=\"code-language\">xxxx</span>,\r\n           *     '\\n', // exactly one new lines (\\r or \\n or \\r\\n)\r\n           *     <span class=\"code-block\">...</span>,\r\n           *     '\\n', // exactly one new lines again\r\n           *     <span class=\"punctuation\">```</span>\r\n           * ];\r\n           */\n\n          var codeLang = token.content[1];\n          var codeBlock = token.content[3];\n          if (codeLang && codeBlock && codeLang.type === 'code-language' && codeBlock.type === 'code-block' && typeof codeLang.content === 'string') {\n            // this might be a language that Prism does not support\n\n            // do some replacements to support C++, C#, and F#\n            var lang = codeLang.content.replace(/\\b#/g, 'sharp').replace(/\\b\\+\\+/g, 'pp');\n            // only use the first word\n            lang = (/[a-z][\\w-]*/i.exec(lang) || [''])[0].toLowerCase();\n            var alias = 'language-' + lang;\n\n            // add alias\n            if (!codeBlock.alias) {\n              codeBlock.alias = [alias];\n            } else if (typeof codeBlock.alias === 'string') {\n              codeBlock.alias = [codeBlock.alias, alias];\n            } else {\n              codeBlock.alias.push(alias);\n            }\n          }\n        }\n      }\n      walkTokens(env.tokens);\n    });\n    Prism.hooks.add('wrap', function (env) {\n      if (env.type !== 'code-block') {\n        return;\n      }\n      var codeLang = '';\n      for (var i = 0, l = env.classes.length; i < l; i++) {\n        var cls = env.classes[i];\n        var match = /language-(.+)/.exec(cls);\n        if (match) {\n          codeLang = match[1];\n          break;\n        }\n      }\n      var grammar = Prism.languages[codeLang];\n      if (!grammar) {\n        if (codeLang && codeLang !== 'none' && Prism.plugins.autoloader) {\n          var id = 'md-' + new Date().valueOf() + '-' + Math.floor(Math.random() * 1e16);\n          env.attributes['id'] = id;\n          Prism.plugins.autoloader.loadLanguages(codeLang, function () {\n            var ele = document.getElementById(id);\n            if (ele) {\n              ele.innerHTML = Prism.highlight(ele.textContent, Prism.languages[codeLang], codeLang);\n            }\n          });\n        }\n      } else {\n        // reverse Prism.util.encode\n        var code = env.content.replace(/&lt;/g, '<').replace(/&amp;/g, '&');\n        env.content = Prism.highlight(code, grammar, codeLang);\n      }\n    });\n    Prism.languages.md = Prism.languages.markdown;\n  })(Prism);\n  Prism.languages.julia = {\n    'comment': {\n      pattern: /(^|[^\\\\])#.*/,\n      lookbehind: true\n    },\n    'string': /(\"\"\"|''')[\\s\\S]+?\\1|(\"|')(?:\\\\.|(?!\\2)[^\\\\\\r\\n])*\\2/,\n    'keyword': /\\b(?:abstract|baremodule|begin|bitstype|break|catch|ccall|const|continue|do|else|elseif|end|export|finally|for|function|global|if|immutable|import|importall|in|let|local|macro|module|print|println|quote|return|struct|try|type|typealias|using|while)\\b/,\n    'boolean': /\\b(?:true|false)\\b/,\n    'number': /(?:\\b(?=\\d)|\\B(?=\\.))(?:0[box])?(?:[\\da-f]+\\.?\\d*|\\.\\d+)(?:[efp][+-]?\\d+)?j?/i,\n    'operator': /[-+*^%÷&$\\\\]=?|\\/[\\/=]?|!=?=?|\\|[=>]?|<(?:<=?|[=:])?|>(?:=|>>?=?)?|==?=?|[~≠≤≥]/,\n    'punctuation': /[{}[\\];(),.:]/,\n    'constant': /\\b(?:(?:NaN|Inf)(?:16|32|64)?)\\b/\n  };\n  var css = \"/**\\n * prism.js default theme for JavaScript, CSS and HTML\\n * Based on dabblet (http://dabblet.com)\\n * @author Lea Verou\\n */\\n\\ncode[class*=\\\"language-\\\"],\\npre[class*=\\\"language-\\\"] {\\n\\tcolor: black;\\n\\tbackground: none;\\n\\ttext-shadow: 0 1px white;\\n\\tfont-family: Consolas, Monaco, 'Andale Mono', 'Ubuntu Mono', monospace;\\n\\tfont-size: 1em;\\n\\ttext-align: left;\\n\\twhite-space: pre;\\n\\tword-spacing: normal;\\n\\tword-break: normal;\\n\\tword-wrap: normal;\\n\\tline-height: 1.5;\\n\\n\\t-moz-tab-size: 4;\\n\\t-o-tab-size: 4;\\n\\ttab-size: 4;\\n\\n\\t-webkit-hyphens: none;\\n\\t-moz-hyphens: none;\\n\\t-ms-hyphens: none;\\n\\thyphens: none;\\n}\\n\\npre[class*=\\\"language-\\\"]::-moz-selection, pre[class*=\\\"language-\\\"] ::-moz-selection,\\ncode[class*=\\\"language-\\\"]::-moz-selection, code[class*=\\\"language-\\\"] ::-moz-selection {\\n\\ttext-shadow: none;\\n\\tbackground: #b3d4fc;\\n}\\n\\npre[class*=\\\"language-\\\"]::selection, pre[class*=\\\"language-\\\"] ::selection,\\ncode[class*=\\\"language-\\\"]::selection, code[class*=\\\"language-\\\"] ::selection {\\n\\ttext-shadow: none;\\n\\tbackground: #b3d4fc;\\n}\\n\\n@media print {\\n\\tcode[class*=\\\"language-\\\"],\\n\\tpre[class*=\\\"language-\\\"] {\\n\\t\\ttext-shadow: none;\\n\\t}\\n}\\n\\n/* Code blocks */\\npre[class*=\\\"language-\\\"] {\\n\\tpadding: 1em;\\n\\tmargin: .5em 0;\\n\\toverflow: auto;\\n}\\n\\n:not(pre) > code[class*=\\\"language-\\\"],\\npre[class*=\\\"language-\\\"] {\\n\\tbackground: #f5f2f0;\\n}\\n\\n/* Inline code */\\n:not(pre) > code[class*=\\\"language-\\\"] {\\n\\tpadding: .1em;\\n\\tborder-radius: .3em;\\n\\twhite-space: normal;\\n}\\n\\n.token.comment,\\n.token.prolog,\\n.token.doctype,\\n.token.cdata {\\n\\tcolor: slategray;\\n}\\n\\n.token.punctuation {\\n\\tcolor: #999;\\n}\\n\\n.token.namespace {\\n\\topacity: .7;\\n}\\n\\n.token.property,\\n.token.tag,\\n.token.boolean,\\n.token.number,\\n.token.constant,\\n.token.symbol,\\n.token.deleted {\\n\\tcolor: #905;\\n}\\n\\n.token.selector,\\n.token.attr-name,\\n.token.string,\\n.token.char,\\n.token.builtin,\\n.token.inserted {\\n\\tcolor: #690;\\n}\\n\\n.token.operator,\\n.token.entity,\\n.token.url,\\n.language-css .token.string,\\n.style .token.string {\\n\\tcolor: #9a6e3a;\\n\\tbackground: hsla(0, 0%, 100%, .5);\\n}\\n\\n.token.atrule,\\n.token.attr-value,\\n.token.keyword {\\n\\tcolor: #07a;\\n}\\n\\n.token.function,\\n.token.class-name {\\n\\tcolor: #DD4A68;\\n}\\n\\n.token.regex,\\n.token.important,\\n.token.variable {\\n\\tcolor: #e90;\\n}\\n\\n.token.important,\\n.token.bold {\\n\\tfont-weight: bold;\\n}\\n.token.italic {\\n\\tfont-style: italic;\\n}\\n\\n.token.entity {\\n\\tcursor: help;\\n}\\n\";\n\n  // Copyright 2018 The Distill Template Authors\n\n  var T$4 = Template('d-code', \"\\n<style>\\n\\ncode {\\n  white-space: nowrap;\\n  background: rgba(0, 0, 0, 0.04);\\n  border-radius: 2px;\\n  padding: 4px 7px;\\n  font-size: 15px;\\n  color: rgba(0, 0, 0, 0.6);\\n}\\n\\npre code {\\n  display: block;\\n  border-left: 2px solid rgba(0, 0, 0, .1);\\n  padding: 0 0 0 36px;\\n}\\n\\n\".concat(css, \"\\n</style>\\n\\n<code id=\\\"code-container\\\"></code>\\n\\n\"));\n  var Code = /*#__PURE__*/function (_Mutating2) {\n    function Code() {\n      _classCallCheck(this, Code);\n      return _callSuper(this, Code, arguments);\n    }\n    _inherits(Code, _Mutating2);\n    return _createClass(Code, [{\n      key: \"renderContent\",\n      value: function renderContent() {\n        // check if language can be highlighted\n        this.languageName = this.getAttribute('language');\n        if (!this.languageName) {\n          console.warn('You need to provide a language attribute to your <d-code> block to let us know how to highlight your code; e.g.:\\n <d-code language=\"python\">zeros = np.zeros(shape)</d-code>.');\n          return;\n        }\n        var language = prism.languages[this.languageName];\n        if (language == undefined) {\n          console.warn(\"Distill does not yet support highlighting your code block in \\\"\".concat(this.languageName, \"'.\"));\n          return;\n        }\n        var content = this.textContent;\n        var codeTag = this.shadowRoot.querySelector('#code-container');\n        if (this.hasAttribute('block')) {\n          // normalize the tab indents\n          content = content.replace(/\\n/, '');\n          var tabs = content.match(/\\s*/);\n          content = content.replace(new RegExp('\\n' + tabs, 'g'), '\\n');\n          content = content.trim();\n          // wrap code block in pre tag if needed\n          if (codeTag.parentNode instanceof ShadowRoot) {\n            var preTag = document.createElement('pre');\n            this.shadowRoot.removeChild(codeTag);\n            preTag.appendChild(codeTag);\n            this.shadowRoot.appendChild(preTag);\n          }\n        }\n        codeTag.className = \"language-\".concat(this.languageName);\n        codeTag.innerHTML = prism.highlight(content, language);\n      }\n    }]);\n  }(Mutating(T$4(HTMLElement))); // Copyright 2018 The Distill Template Authors\n  var T$5 = Template('d-footnote', \"\\n<style>\\n\\nd-math[block] {\\n  display: block;\\n}\\n\\n:host {\\n\\n}\\n\\nsup {\\n  line-height: 1em;\\n  font-size: 0.75em;\\n  position: relative;\\n  top: -.5em;\\n  vertical-align: baseline;\\n}\\n\\nspan {\\n  color: hsla(206, 90%, 20%, 0.7);\\n  cursor: default;\\n}\\n\\n.footnote-container {\\n  padding: 10px;\\n}\\n\\n</style>\\n\\n<d-hover-box>\\n  <div class=\\\"footnote-container\\\">\\n    <slot id=\\\"slot\\\"></slot>\\n  </div>\\n</d-hover-box>\\n\\n<sup>\\n  <span id=\\\"fn-\\\" data-hover-ref=\\\"\\\"></span>\\n</sup>\\n\\n\");\n  var Footnote = /*#__PURE__*/function (_T$4) {\n    function Footnote() {\n      var _this11;\n      _classCallCheck(this, Footnote);\n      _this11 = _callSuper(this, Footnote);\n      var options = {\n        childList: true,\n        characterData: true,\n        subtree: true\n      };\n      var observer = new MutationObserver(_this11.notify);\n      observer.observe(_this11, options);\n      return _this11;\n    }\n    _inherits(Footnote, _T$4);\n    return _createClass(Footnote, [{\n      key: \"notify\",\n      value: function notify() {\n        var options = {\n          detail: this,\n          bubbles: true\n        };\n        var event = new CustomEvent('onFootnoteChanged', options);\n        document.dispatchEvent(event);\n      }\n    }, {\n      key: \"connectedCallback\",\n      value: function connectedCallback() {\n        var _this12 = this;\n        // listen and notify about changes to slotted content\n        // const slot = this.shadowRoot.querySelector('#slot');\n        // console.warn(slot.textContent);\n        // slot.addEventListener('slotchange', this.notify);\n        this.hoverBox = this.root.querySelector('d-hover-box');\n        window.customElements.whenDefined('d-hover-box').then(function () {\n          _this12.hoverBox.listen(_this12);\n        });\n        // create numeric ID\n        Footnote.currentFootnoteId += 1;\n        var IdString = Footnote.currentFootnoteId.toString();\n        this.root.host.id = 'd-footnote-' + IdString;\n\n        // set up hidden hover box\n        var id = 'dt-fn-hover-box-' + IdString;\n        this.hoverBox.id = id;\n\n        // set up visible footnote marker\n        var span = this.root.querySelector('#fn-');\n        span.setAttribute('id', 'fn-' + IdString);\n        span.setAttribute('data-hover-ref', id);\n        span.textContent = IdString;\n      }\n    }]);\n  }(T$5(HTMLElement));\n  Footnote.currentFootnoteId = 0;\n\n  // Copyright 2018 The Distill Template Authors\n\n  var T$6 = Template('d-footnote-list', \"\\n<style>\\n\\nd-footnote-list {\\n  contain: layout style;\\n}\\n\\nd-footnote-list > * {\\n  grid-column: text;\\n}\\n\\nd-footnote-list a.footnote-backlink {\\n  color: rgba(0,0,0,0.3);\\n  padding-left: 0.5em;\\n}\\n\\n</style>\\n\\n<h3>Footnotes</h3>\\n<ol></ol>\\n\", false);\n  var FootnoteList = /*#__PURE__*/function (_T$5) {\n    function FootnoteList() {\n      _classCallCheck(this, FootnoteList);\n      return _callSuper(this, FootnoteList, arguments);\n    }\n    _inherits(FootnoteList, _T$5);\n    return _createClass(FootnoteList, [{\n      key: \"connectedCallback\",\n      value: function connectedCallback() {\n        _superPropGet(FootnoteList, \"connectedCallback\", this, 3)([]);\n        this.list = this.root.querySelector('ol');\n        // footnotes list is initially hidden\n        this.root.style.display = 'none';\n        // look through document and register existing footnotes\n        // Store.subscribeTo('footnotes', (footnote) => {\n        //   this.renderFootnote(footnote);\n        // });\n      }\n\n      // TODO: could optimize this to accept individual footnotes?\n    }, {\n      key: \"footnotes\",\n      set: function set(footnotes) {\n        this.list.innerHTML = '';\n        if (footnotes.length) {\n          // ensure footnote list is visible\n          this.root.style.display = '';\n          var _iterator17 = _createForOfIteratorHelper(footnotes),\n            _step17;\n          try {\n            for (_iterator17.s(); !(_step17 = _iterator17.n()).done;) {\n              var footnote = _step17.value;\n              // construct and append list item to show footnote\n              var listItem = document.createElement('li');\n              listItem.id = footnote.id + '-listing';\n              listItem.innerHTML = footnote.innerHTML;\n              var backlink = document.createElement('a');\n              backlink.setAttribute('class', 'footnote-backlink');\n              backlink.setAttribute('target', '_self');\n              backlink.textContent = '[↩]';\n              backlink.href = '#' + footnote.id;\n              listItem.appendChild(backlink);\n              this.list.appendChild(listItem);\n            }\n          } catch (err) {\n            _iterator17.e(err);\n          } finally {\n            _iterator17.f();\n          }\n        } else {\n          // ensure footnote list is invisible\n          this.root.style.display = 'none';\n        }\n      }\n    }]);\n  }(T$6(HTMLElement)); // Copyright 2018 The Distill Template Authors\n  var T$7 = Template('d-hover-box', \"\\n<style>\\n\\n:host {\\n  position: absolute;\\n  width: 100%;\\n  left: 0px;\\n  z-index: 10000;\\n  display: none;\\n  white-space: normal\\n}\\n\\n.container {\\n  position: relative;\\n  width: 704px;\\n  max-width: 100vw;\\n  margin: 0 auto;\\n}\\n\\n.panel {\\n  position: absolute;\\n  font-size: 1rem;\\n  line-height: 1.5em;\\n  top: 0;\\n  left: 0;\\n  width: 100%;\\n  border: 1px solid rgba(0, 0, 0, 0.1);\\n  background-color: rgba(250, 250, 250, 0.95);\\n  box-shadow: 0 0 7px rgba(0, 0, 0, 0.1);\\n  border-radius: 4px;\\n  box-sizing: border-box;\\n\\n  backdrop-filter: blur(2px);\\n  -webkit-backdrop-filter: blur(2px);\\n}\\n\\n</style>\\n\\n<div class=\\\"container\\\">\\n  <div class=\\\"panel\\\">\\n    <slot></slot>\\n  </div>\\n</div>\\n\");\n  var HoverBox = /*#__PURE__*/function (_T$6) {\n    function HoverBox() {\n      _classCallCheck(this, HoverBox);\n      return _callSuper(this, HoverBox);\n    }\n    _inherits(HoverBox, _T$6);\n    return _createClass(HoverBox, [{\n      key: \"connectedCallback\",\n      value: function connectedCallback() {}\n    }, {\n      key: \"listen\",\n      value: function listen(element) {\n        // console.log(element)\n        this.bindDivEvents(this);\n        this.bindTriggerEvents(element);\n        // this.style.display = \"block\";\n      }\n    }, {\n      key: \"bindDivEvents\",\n      value: function bindDivEvents(element) {\n        var _this13 = this;\n        // For mice, same behavior as hovering on links\n        element.addEventListener('mouseover', function () {\n          if (!_this13.visible) _this13.showAtNode(element);\n          _this13.stopTimeout();\n        });\n        element.addEventListener('mouseout', function () {\n          _this13.extendTimeout(500);\n        });\n        // Don't trigger body touchstart event when touching within box\n        element.addEventListener('touchstart', function (event) {\n          event.stopPropagation();\n        }, {\n          passive: true\n        });\n        // Close box when touching outside box\n        document.body.addEventListener('touchstart', function () {\n          _this13.hide();\n        }, {\n          passive: true\n        });\n      }\n    }, {\n      key: \"bindTriggerEvents\",\n      value: function bindTriggerEvents(node) {\n        var _this14 = this;\n        node.addEventListener('mouseover', function () {\n          if (!_this14.visible) {\n            _this14.showAtNode(node);\n          }\n          _this14.stopTimeout();\n        });\n        node.addEventListener('mouseout', function () {\n          _this14.extendTimeout(300);\n        });\n        node.addEventListener('touchstart', function (event) {\n          if (_this14.visible) {\n            _this14.hide();\n          } else {\n            _this14.showAtNode(node);\n          }\n          // Don't trigger body touchstart event when touching link\n          event.stopPropagation();\n        }, {\n          passive: true\n        });\n      }\n    }, {\n      key: \"show\",\n      value: function show(position) {\n        this.visible = true;\n        this.style.display = 'block';\n        // 10px extra offset from element\n        this.style.top = Math.round(position[1] + 10) + 'px';\n      }\n    }, {\n      key: \"showAtNode\",\n      value: function showAtNode(node) {\n        // https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/offsetTop\n        var bbox = node.getBoundingClientRect();\n        this.show([node.offsetLeft + bbox.width, node.offsetTop + bbox.height]);\n      }\n    }, {\n      key: \"hide\",\n      value: function hide() {\n        this.visible = false;\n        this.style.display = 'none';\n        this.stopTimeout();\n      }\n    }, {\n      key: \"stopTimeout\",\n      value: function stopTimeout() {\n        if (this.timeout) {\n          clearTimeout(this.timeout);\n        }\n      }\n    }, {\n      key: \"extendTimeout\",\n      value: function extendTimeout(time) {\n        var _this15 = this;\n        this.stopTimeout();\n        this.timeout = setTimeout(function () {\n          _this15.hide();\n        }, time);\n      }\n    }]);\n  }(T$7(HTMLElement)); // Copyright 2018 The Distill Template Authors\n  //\n  // Licensed under the Apache License, Version 2.0 (the \"License\");\n  // you may not use this file except in compliance with the License.\n  // You may obtain a copy of the License at\n  //\n  //      http://www.apache.org/licenses/LICENSE-2.0\n  //\n  // Unless required by applicable law or agreed to in writing, software\n  // distributed under the License is distributed on an \"AS IS\" BASIS,\n  // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  // See the License for the specific language governing permissions and\n  // limitations under the License.\n  var Title = /*#__PURE__*/function (_HTMLElement6) {\n    function Title() {\n      _classCallCheck(this, Title);\n      return _callSuper(this, Title, arguments);\n    }\n    _inherits(Title, _HTMLElement6);\n    return _createClass(Title, null, [{\n      key: \"is\",\n      get: function get() {\n        return 'd-title';\n      }\n    }]);\n  }(/*#__PURE__*/_wrapNativeSuper(HTMLElement)); // Copyright 2018 The Distill Template Authors\n  var T$8 = Template('d-references', \"\\n<style>\\nd-references {\\n  display: block;\\n}\\n</style>\\n\", false);\n  var References = /*#__PURE__*/function (_T$7) {\n    function References() {\n      _classCallCheck(this, References);\n      return _callSuper(this, References, arguments);\n    }\n    _inherits(References, _T$7);\n    return _createClass(References);\n  }(T$8(HTMLElement)); // Copyright 2018 The Distill Template Authors\n  //\n  // Licensed under the Apache License, Version 2.0 (the \"License\");\n  // you may not use this file except in compliance with the License.\n  // You may obtain a copy of the License at\n  //\n  //      http://www.apache.org/licenses/LICENSE-2.0\n  //\n  // Unless required by applicable law or agreed to in writing, software\n  // distributed under the License is distributed on an \"AS IS\" BASIS,\n  // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  // See the License for the specific language governing permissions and\n  // limitations under the License.\n  var TOC = /*#__PURE__*/function (_HTMLElement7) {\n    function TOC() {\n      _classCallCheck(this, TOC);\n      return _callSuper(this, TOC, arguments);\n    }\n    _inherits(TOC, _HTMLElement7);\n    return _createClass(TOC, [{\n      key: \"connectedCallback\",\n      value: function connectedCallback() {\n        var _this16 = this;\n        if (!this.getAttribute('prerendered')) {\n          window.onload = function () {\n            var article = document.querySelector('d-article');\n            var headings = article.querySelectorAll('h2, h3');\n            renderTOC(_this16, headings);\n          };\n        }\n      }\n    }], [{\n      key: \"is\",\n      get: function get() {\n        return 'd-toc';\n      }\n    }]);\n  }(/*#__PURE__*/_wrapNativeSuper(HTMLElement));\n  function renderTOC(element, headings) {\n    var ToC = \"\\n  <style>\\n\\n  d-toc {\\n    contain: layout style;\\n    display: block;\\n  }\\n\\n  d-toc ul {\\n    padding-left: 0;\\n  }\\n\\n  d-toc ul > ul {\\n    padding-left: 24px;\\n  }\\n\\n  d-toc a {\\n    border-bottom: none;\\n    text-decoration: none;\\n  }\\n\\n  </style>\\n  <nav role=\\\"navigation\\\" class=\\\"table-of-contents\\\"></nav>\\n  <h2>Table of contents</h2>\\n  <ul>\";\n    var _iterator18 = _createForOfIteratorHelper(headings),\n      _step18;\n    try {\n      for (_iterator18.s(); !(_step18 = _iterator18.n()).done;) {\n        var el = _step18.value;\n        // should element be included in TOC?\n        var isInTitle = el.parentElement.tagName == 'D-TITLE';\n        var isException = el.getAttribute('no-toc');\n        if (isInTitle || isException) continue;\n        // create TOC entry\n        var _title = el.textContent;\n        var link = '#' + el.getAttribute('id');\n        var newLine = '<li>' + '<a href=\"' + link + '\">' + _title + '</a>' + '</li>';\n        if (el.tagName == 'H3') {\n          newLine = '<ul>' + newLine + '</ul>';\n        } else {\n          newLine += '<br>';\n        }\n        ToC += newLine;\n      }\n    } catch (err) {\n      _iterator18.e(err);\n    } finally {\n      _iterator18.f();\n    }\n    ToC += '</ul></nav>';\n    element.innerHTML = ToC;\n  }\n\n  // Copyright 2018 The Distill Template Authors\n  //\n  // Licensed under the Apache License, Version 2.0 (the \"License\");\n  // you may not use this file except in compliance with the License.\n  // You may obtain a copy of the License at\n  //\n  //      http://www.apache.org/licenses/LICENSE-2.0\n  //\n  // Unless required by applicable law or agreed to in writing, software\n  // distributed under the License is distributed on an \"AS IS\" BASIS,\n  // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  // See the License for the specific language governing permissions and\n  // limitations under the License.\n\n  // Figure\n  //\n  // d-figure provides a state-machine of visibility events:\n  //\n  //                         scroll out of view\n  //                         +----------------+\n  //   *do work here*        |                |\n  // +----------------+    +-+---------+    +-v---------+\n  // | ready          +----> onscreen  |    | offscreen |\n  // +----------------+    +---------^-+    +---------+-+\n  //                                 |                |\n  //                                 +----------------+\n  //                                  scroll into view\n  //\n  var Figure = /*#__PURE__*/function (_HTMLElement8) {\n    function Figure() {\n      var _this17;\n      _classCallCheck(this, Figure);\n      _this17 = _callSuper(this, Figure);\n      // debugger\n      _this17._ready = false;\n      _this17._onscreen = false;\n      _this17._offscreen = true;\n      return _this17;\n    }\n    _inherits(Figure, _HTMLElement8);\n    return _createClass(Figure, [{\n      key: \"connectedCallback\",\n      value: function connectedCallback() {\n        this.loadsWhileScrolling = this.hasAttribute('loadsWhileScrolling');\n        Figure.marginObserver.observe(this);\n        Figure.directObserver.observe(this);\n      }\n    }, {\n      key: \"disconnectedCallback\",\n      value: function disconnectedCallback() {\n        Figure.marginObserver.unobserve(this);\n        Figure.directObserver.unobserve(this);\n      }\n\n      // We use two separate observers:\n      // One with an extra 1000px margin to warn if the viewpoint gets close,\n      // And one for the actual on/off screen events\n    }, {\n      key: \"addEventListener\",\n      value:\n      // Notify listeners that registered late, too:\n\n      function addEventListener(eventName, callback) {\n        _superPropGet(Figure, \"addEventListener\", this, 3)([eventName, callback]);\n        // if we had already dispatched something while presumingly no one was listening, we do so again\n        // debugger\n        if (eventName === 'ready') {\n          if (Figure.readyQueue.indexOf(this) !== -1) {\n            this._ready = false;\n            Figure.runReadyQueue();\n          }\n        }\n        if (eventName === 'onscreen') {\n          this.onscreen();\n        }\n      }\n\n      // Custom Events\n    }, {\n      key: \"ready\",\n      value: function ready() {\n        // debugger\n        this._ready = true;\n        Figure.marginObserver.unobserve(this);\n        var event = new CustomEvent('ready');\n        this.dispatchEvent(event);\n      }\n    }, {\n      key: \"onscreen\",\n      value: function onscreen() {\n        this._onscreen = true;\n        this._offscreen = false;\n        var event = new CustomEvent('onscreen');\n        this.dispatchEvent(event);\n      }\n    }, {\n      key: \"offscreen\",\n      value: function offscreen() {\n        this._onscreen = false;\n        this._offscreen = true;\n        var event = new CustomEvent('offscreen');\n        this.dispatchEvent(event);\n      }\n    }], [{\n      key: \"is\",\n      get: function get() {\n        return 'd-figure';\n      }\n    }, {\n      key: \"readyQueue\",\n      get: function get() {\n        if (!Figure._readyQueue) {\n          Figure._readyQueue = [];\n        }\n        return Figure._readyQueue;\n      }\n    }, {\n      key: \"addToReadyQueue\",\n      value: function addToReadyQueue(figure) {\n        if (Figure.readyQueue.indexOf(figure) === -1) {\n          Figure.readyQueue.push(figure);\n          Figure.runReadyQueue();\n        }\n      }\n    }, {\n      key: \"runReadyQueue\",\n      value: function runReadyQueue() {\n        // console.log(\"Checking to run readyQueue, length: \" + Figure.readyQueue.length + \", scrolling: \" + Figure.isScrolling);\n        // if (Figure.isScrolling) return;\n        // console.log(\"Running ready Queue\");\n        var figure = Figure.readyQueue.sort(function (a, b) {\n          return a._seenOnScreen - b._seenOnScreen;\n        }).filter(function (figure) {\n          return !figure._ready;\n        }).pop();\n        if (figure) {\n          figure.ready();\n          requestAnimationFrame(Figure.runReadyQueue);\n        }\n      }\n    }, {\n      key: \"marginObserver\",\n      get: function get() {\n        if (!Figure._marginObserver) {\n          // if (!('IntersectionObserver' in window)) {\n          //   throw new Error('no interscetionobbserver!');\n          // }\n          var viewportHeight = window.innerHeight;\n          var margin = Math.floor(2 * viewportHeight);\n          var options = {\n            rootMargin: margin + 'px 0px ' + margin + 'px 0px',\n            threshold: 0.01\n          };\n          var callback = Figure.didObserveMarginIntersection;\n          var observer = new IntersectionObserver(callback, options);\n          Figure._marginObserver = observer;\n        }\n        return Figure._marginObserver;\n      }\n    }, {\n      key: \"didObserveMarginIntersection\",\n      value: function didObserveMarginIntersection(entries) {\n        var _iterator19 = _createForOfIteratorHelper(entries),\n          _step19;\n        try {\n          for (_iterator19.s(); !(_step19 = _iterator19.n()).done;) {\n            var entry = _step19.value;\n            var figure = entry.target;\n            if (entry.isIntersecting && !figure._ready) {\n              Figure.addToReadyQueue(figure);\n            }\n          }\n        } catch (err) {\n          _iterator19.e(err);\n        } finally {\n          _iterator19.f();\n        }\n      }\n    }, {\n      key: \"directObserver\",\n      get: function get() {\n        if (!Figure._directObserver) {\n          Figure._directObserver = new IntersectionObserver(Figure.didObserveDirectIntersection, {\n            rootMargin: '0px',\n            threshold: [0, 1.0]\n          });\n        }\n        return Figure._directObserver;\n      }\n    }, {\n      key: \"didObserveDirectIntersection\",\n      value: function didObserveDirectIntersection(entries) {\n        var _iterator20 = _createForOfIteratorHelper(entries),\n          _step20;\n        try {\n          for (_iterator20.s(); !(_step20 = _iterator20.n()).done;) {\n            var entry = _step20.value;\n            var figure = entry.target;\n            if (entry.isIntersecting) {\n              figure._seenOnScreen = new Date();\n              // if (!figure._ready) { figure.ready(); }\n              if (figure._offscreen) {\n                figure.onscreen();\n              }\n            } else {\n              if (figure._onscreen) {\n                figure.offscreen();\n              }\n            }\n          }\n        } catch (err) {\n          _iterator20.e(err);\n        } finally {\n          _iterator20.f();\n        }\n      }\n    }]);\n  }(/*#__PURE__*/_wrapNativeSuper(HTMLElement));\n  if (typeof window !== 'undefined') {\n    Figure.isScrolling = false;\n    var timeout;\n    var resetTimer = function resetTimer() {\n      Figure.isScrolling = true;\n      clearTimeout(timeout);\n      timeout = setTimeout(function () {\n        Figure.isScrolling = false;\n        Figure.runReadyQueue();\n      }, 500);\n    };\n    window.addEventListener('scroll', resetTimer, true);\n  }\n\n  // Copyright 2018 The Distill Template Authors\n\n  // This overlay is not secure.\n  // It is only meant as a social deterrent.\n\n  var productionHostname = 'distill.pub';\n  var T$9 = Template('d-interstitial', \"\\n<style>\\n\\n.overlay {\\n  position: fixed;\\n  width: 100%;\\n  height: 100%;\\n  top: 0;\\n  left: 0;\\n  background: white;\\n\\n  opacity: 1;\\n  visibility: visible;\\n\\n  display: flex;\\n  flex-flow: column;\\n  justify-content: center;\\n  z-index: 2147483647 /* MaxInt32 */\\n\\n}\\n\\n.container {\\n  position: relative;\\n  margin-left: auto;\\n  margin-right: auto;\\n  max-width: 420px;\\n  padding: 2em;\\n}\\n\\nh1 {\\n  text-decoration: underline;\\n  text-decoration-color: hsl(0,100%,40%);\\n  -webkit-text-decoration-color: hsl(0,100%,40%);\\n  margin-bottom: 1em;\\n  line-height: 1.5em;\\n}\\n\\ninput[type=\\\"password\\\"] {\\n  -webkit-appearance: none;\\n  -moz-appearance: none;\\n  appearance: none;\\n  -webkit-box-shadow: none;\\n  -moz-box-shadow: none;\\n  box-shadow: none;\\n  -webkit-border-radius: none;\\n  -moz-border-radius: none;\\n  -ms-border-radius: none;\\n  -o-border-radius: none;\\n  border-radius: none;\\n  outline: none;\\n\\n  font-size: 18px;\\n  background: none;\\n  width: 25%;\\n  padding: 10px;\\n  border: none;\\n  border-bottom: solid 2px #999;\\n  transition: border .3s;\\n}\\n\\ninput[type=\\\"password\\\"]:focus {\\n  border-bottom: solid 2px #333;\\n}\\n\\ninput[type=\\\"password\\\"].wrong {\\n  border-bottom: solid 2px hsl(0,100%,40%);\\n}\\n\\np small {\\n  color: #888;\\n}\\n\\n.logo {\\n  position: relative;\\n  font-size: 1.5em;\\n  margin-bottom: 3em;\\n}\\n\\n.logo svg {\\n  width: 36px;\\n  position: relative;\\n  top: 6px;\\n  margin-right: 2px;\\n}\\n\\n.logo svg path {\\n  fill: none;\\n  stroke: black;\\n  stroke-width: 2px;\\n}\\n\\n</style>\\n\\n<div class=\\\"overlay\\\">\\n  <div class=\\\"container\\\">\\n    <h1>This article is in review.</h1>\\n    <p>Do not share this URL or the contents of this article. Thank you!</p>\\n    <input id=\\\"interstitial-password-input\\\" type=\\\"password\\\" name=\\\"password\\\" autofocus/>\\n    <p><small>Enter the password we shared with you as part of the review process to view the article.</small></p>\\n  </div>\\n</div>\\n\");\n  var Interstitial = /*#__PURE__*/function (_T$8) {\n    function Interstitial() {\n      _classCallCheck(this, Interstitial);\n      return _callSuper(this, Interstitial, arguments);\n    }\n    _inherits(Interstitial, _T$8);\n    return _createClass(Interstitial, [{\n      key: \"connectedCallback\",\n      value: function connectedCallback() {\n        var _this18 = this;\n        if (this.shouldRemoveSelf()) {\n          this.parentElement.removeChild(this);\n        } else {\n          var passwordInput = this.root.querySelector('#interstitial-password-input');\n          passwordInput.oninput = function (event) {\n            return _this18.passwordChanged(event);\n          };\n        }\n      }\n    }, {\n      key: \"passwordChanged\",\n      value: function passwordChanged(event) {\n        var entered = event.target.value;\n        if (entered === this.password) {\n          console.log('Correct password entered.');\n          this.parentElement.removeChild(this);\n          if (typeof Storage !== 'undefined') {\n            console.log('Saved that correct password was entered.');\n            localStorage.setItem(this.localStorageIdentifier(), 'true');\n          }\n        }\n      }\n    }, {\n      key: \"shouldRemoveSelf\",\n      value: function shouldRemoveSelf() {\n        // should never be visible in production\n        if (window && window.location.hostname === productionHostname) {\n          console.warn('Interstitial found on production, hiding it.');\n          return true;\n        }\n        // should only have to enter password once\n        if (typeof Storage !== 'undefined') {\n          if (localStorage.getItem(this.localStorageIdentifier()) === 'true') {\n            console.log('Loaded that correct password was entered before; skipping interstitial.');\n            return true;\n          }\n        }\n        // otherwise, leave visible\n        return false;\n      }\n    }, {\n      key: \"localStorageIdentifier\",\n      value: function localStorageIdentifier() {\n        var prefix = 'distill-drafts';\n        var suffix = 'interstitial-password-correct';\n        return prefix + (window ? window.location.pathname : '-') + suffix;\n      }\n    }]);\n  }(T$9(HTMLElement));\n  function ascending(a, b) {\n    return a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;\n  }\n  function bisector(compare) {\n    if (compare.length === 1) compare = ascendingComparator(compare);\n    return {\n      left: function left(a, x, lo, hi) {\n        if (lo == null) lo = 0;\n        if (hi == null) hi = a.length;\n        while (lo < hi) {\n          var mid = lo + hi >>> 1;\n          if (compare(a[mid], x) < 0) lo = mid + 1;else hi = mid;\n        }\n        return lo;\n      },\n      right: function right(a, x, lo, hi) {\n        if (lo == null) lo = 0;\n        if (hi == null) hi = a.length;\n        while (lo < hi) {\n          var mid = lo + hi >>> 1;\n          if (compare(a[mid], x) > 0) hi = mid;else lo = mid + 1;\n        }\n        return lo;\n      }\n    };\n  }\n  function ascendingComparator(f) {\n    return function (d, x) {\n      return ascending(f(d), x);\n    };\n  }\n  var ascendingBisect = bisector(ascending);\n  var bisectRight = ascendingBisect.right;\n  function range(start, stop, step) {\n    start = +start, stop = +stop, step = (n = arguments.length) < 2 ? (stop = start, start = 0, 1) : n < 3 ? 1 : +step;\n    var i = -1,\n      n = Math.max(0, Math.ceil((stop - start) / step)) | 0,\n      range = new Array(n);\n    while (++i < n) {\n      range[i] = start + i * step;\n    }\n    return range;\n  }\n  var e10 = Math.sqrt(50),\n    e5 = Math.sqrt(10),\n    e2 = Math.sqrt(2);\n  function ticks(start, stop, count) {\n    var reverse,\n      i = -1,\n      n,\n      ticks,\n      step;\n    stop = +stop, start = +start, count = +count;\n    if (start === stop && count > 0) return [start];\n    if (reverse = stop < start) n = start, start = stop, stop = n;\n    if ((step = tickIncrement(start, stop, count)) === 0 || !isFinite(step)) return [];\n    if (step > 0) {\n      start = Math.ceil(start / step);\n      stop = Math.floor(stop / step);\n      ticks = new Array(n = Math.ceil(stop - start + 1));\n      while (++i < n) ticks[i] = (start + i) * step;\n    } else {\n      start = Math.floor(start * step);\n      stop = Math.ceil(stop * step);\n      ticks = new Array(n = Math.ceil(start - stop + 1));\n      while (++i < n) ticks[i] = (start - i) / step;\n    }\n    if (reverse) ticks.reverse();\n    return ticks;\n  }\n  function tickIncrement(start, stop, count) {\n    var step = (stop - start) / Math.max(0, count),\n      power = Math.floor(Math.log(step) / Math.LN10),\n      error = step / Math.pow(10, power);\n    return power >= 0 ? (error >= e10 ? 10 : error >= e5 ? 5 : error >= e2 ? 2 : 1) * Math.pow(10, power) : -Math.pow(10, -power) / (error >= e10 ? 10 : error >= e5 ? 5 : error >= e2 ? 2 : 1);\n  }\n  function tickStep(start, stop, count) {\n    var step0 = Math.abs(stop - start) / Math.max(0, count),\n      step1 = Math.pow(10, Math.floor(Math.log(step0) / Math.LN10)),\n      error = step0 / step1;\n    if (error >= e10) step1 *= 10;else if (error >= e5) step1 *= 5;else if (error >= e2) step1 *= 2;\n    return stop < start ? -step1 : step1;\n  }\n  function initRange(domain, range) {\n    switch (arguments.length) {\n      case 0:\n        break;\n      case 1:\n        this.range(domain);\n        break;\n      default:\n        this.range(range).domain(domain);\n        break;\n    }\n    return this;\n  }\n  function define(constructor, factory, prototype) {\n    constructor.prototype = factory.prototype = prototype;\n    prototype.constructor = constructor;\n  }\n  function extend(parent, definition) {\n    var prototype = Object.create(parent.prototype);\n    for (var key in definition) prototype[key] = definition[key];\n    return prototype;\n  }\n  function Color() {}\n  var _darker = 0.7;\n  var _brighter = 1 / _darker;\n  var reI = \"\\\\s*([+-]?\\\\d+)\\\\s*\",\n    reN = \"\\\\s*([+-]?\\\\d*\\\\.?\\\\d+(?:[eE][+-]?\\\\d+)?)\\\\s*\",\n    reP = \"\\\\s*([+-]?\\\\d*\\\\.?\\\\d+(?:[eE][+-]?\\\\d+)?)%\\\\s*\",\n    reHex = /^#([0-9a-f]{3,8})$/,\n    reRgbInteger = new RegExp(\"^rgb\\\\(\" + [reI, reI, reI] + \"\\\\)$\"),\n    reRgbPercent = new RegExp(\"^rgb\\\\(\" + [reP, reP, reP] + \"\\\\)$\"),\n    reRgbaInteger = new RegExp(\"^rgba\\\\(\" + [reI, reI, reI, reN] + \"\\\\)$\"),\n    reRgbaPercent = new RegExp(\"^rgba\\\\(\" + [reP, reP, reP, reN] + \"\\\\)$\"),\n    reHslPercent = new RegExp(\"^hsl\\\\(\" + [reN, reP, reP] + \"\\\\)$\"),\n    reHslaPercent = new RegExp(\"^hsla\\\\(\" + [reN, reP, reP, reN] + \"\\\\)$\");\n  var named = {\n    aliceblue: 0xf0f8ff,\n    antiquewhite: 0xfaebd7,\n    aqua: 0x00ffff,\n    aquamarine: 0x7fffd4,\n    azure: 0xf0ffff,\n    beige: 0xf5f5dc,\n    bisque: 0xffe4c4,\n    black: 0x000000,\n    blanchedalmond: 0xffebcd,\n    blue: 0x0000ff,\n    blueviolet: 0x8a2be2,\n    brown: 0xa52a2a,\n    burlywood: 0xdeb887,\n    cadetblue: 0x5f9ea0,\n    chartreuse: 0x7fff00,\n    chocolate: 0xd2691e,\n    coral: 0xff7f50,\n    cornflowerblue: 0x6495ed,\n    cornsilk: 0xfff8dc,\n    crimson: 0xdc143c,\n    cyan: 0x00ffff,\n    darkblue: 0x00008b,\n    darkcyan: 0x008b8b,\n    darkgoldenrod: 0xb8860b,\n    darkgray: 0xa9a9a9,\n    darkgreen: 0x006400,\n    darkgrey: 0xa9a9a9,\n    darkkhaki: 0xbdb76b,\n    darkmagenta: 0x8b008b,\n    darkolivegreen: 0x556b2f,\n    darkorange: 0xff8c00,\n    darkorchid: 0x9932cc,\n    darkred: 0x8b0000,\n    darksalmon: 0xe9967a,\n    darkseagreen: 0x8fbc8f,\n    darkslateblue: 0x483d8b,\n    darkslategray: 0x2f4f4f,\n    darkslategrey: 0x2f4f4f,\n    darkturquoise: 0x00ced1,\n    darkviolet: 0x9400d3,\n    deeppink: 0xff1493,\n    deepskyblue: 0x00bfff,\n    dimgray: 0x696969,\n    dimgrey: 0x696969,\n    dodgerblue: 0x1e90ff,\n    firebrick: 0xb22222,\n    floralwhite: 0xfffaf0,\n    forestgreen: 0x228b22,\n    fuchsia: 0xff00ff,\n    gainsboro: 0xdcdcdc,\n    ghostwhite: 0xf8f8ff,\n    gold: 0xffd700,\n    goldenrod: 0xdaa520,\n    gray: 0x808080,\n    green: 0x008000,\n    greenyellow: 0xadff2f,\n    grey: 0x808080,\n    honeydew: 0xf0fff0,\n    hotpink: 0xff69b4,\n    indianred: 0xcd5c5c,\n    indigo: 0x4b0082,\n    ivory: 0xfffff0,\n    khaki: 0xf0e68c,\n    lavender: 0xe6e6fa,\n    lavenderblush: 0xfff0f5,\n    lawngreen: 0x7cfc00,\n    lemonchiffon: 0xfffacd,\n    lightblue: 0xadd8e6,\n    lightcoral: 0xf08080,\n    lightcyan: 0xe0ffff,\n    lightgoldenrodyellow: 0xfafad2,\n    lightgray: 0xd3d3d3,\n    lightgreen: 0x90ee90,\n    lightgrey: 0xd3d3d3,\n    lightpink: 0xffb6c1,\n    lightsalmon: 0xffa07a,\n    lightseagreen: 0x20b2aa,\n    lightskyblue: 0x87cefa,\n    lightslategray: 0x778899,\n    lightslategrey: 0x778899,\n    lightsteelblue: 0xb0c4de,\n    lightyellow: 0xffffe0,\n    lime: 0x00ff00,\n    limegreen: 0x32cd32,\n    linen: 0xfaf0e6,\n    magenta: 0xff00ff,\n    maroon: 0x800000,\n    mediumaquamarine: 0x66cdaa,\n    mediumblue: 0x0000cd,\n    mediumorchid: 0xba55d3,\n    mediumpurple: 0x9370db,\n    mediumseagreen: 0x3cb371,\n    mediumslateblue: 0x7b68ee,\n    mediumspringgreen: 0x00fa9a,\n    mediumturquoise: 0x48d1cc,\n    mediumvioletred: 0xc71585,\n    midnightblue: 0x191970,\n    mintcream: 0xf5fffa,\n    mistyrose: 0xffe4e1,\n    moccasin: 0xffe4b5,\n    navajowhite: 0xffdead,\n    navy: 0x000080,\n    oldlace: 0xfdf5e6,\n    olive: 0x808000,\n    olivedrab: 0x6b8e23,\n    orange: 0xffa500,\n    orangered: 0xff4500,\n    orchid: 0xda70d6,\n    palegoldenrod: 0xeee8aa,\n    palegreen: 0x98fb98,\n    paleturquoise: 0xafeeee,\n    palevioletred: 0xdb7093,\n    papayawhip: 0xffefd5,\n    peachpuff: 0xffdab9,\n    peru: 0xcd853f,\n    pink: 0xffc0cb,\n    plum: 0xdda0dd,\n    powderblue: 0xb0e0e6,\n    purple: 0x800080,\n    rebeccapurple: 0x663399,\n    red: 0xff0000,\n    rosybrown: 0xbc8f8f,\n    royalblue: 0x4169e1,\n    saddlebrown: 0x8b4513,\n    salmon: 0xfa8072,\n    sandybrown: 0xf4a460,\n    seagreen: 0x2e8b57,\n    seashell: 0xfff5ee,\n    sienna: 0xa0522d,\n    silver: 0xc0c0c0,\n    skyblue: 0x87ceeb,\n    slateblue: 0x6a5acd,\n    slategray: 0x708090,\n    slategrey: 0x708090,\n    snow: 0xfffafa,\n    springgreen: 0x00ff7f,\n    steelblue: 0x4682b4,\n    tan: 0xd2b48c,\n    teal: 0x008080,\n    thistle: 0xd8bfd8,\n    tomato: 0xff6347,\n    turquoise: 0x40e0d0,\n    violet: 0xee82ee,\n    wheat: 0xf5deb3,\n    white: 0xffffff,\n    whitesmoke: 0xf5f5f5,\n    yellow: 0xffff00,\n    yellowgreen: 0x9acd32\n  };\n  define(Color, color, {\n    copy: function copy(channels) {\n      return Object.assign(new this.constructor(), this, channels);\n    },\n    displayable: function displayable() {\n      return this.rgb().displayable();\n    },\n    hex: color_formatHex,\n    // Deprecated! Use color.formatHex.\n    formatHex: color_formatHex,\n    formatHsl: color_formatHsl,\n    formatRgb: color_formatRgb,\n    toString: color_formatRgb\n  });\n  function color_formatHex() {\n    return this.rgb().formatHex();\n  }\n  function color_formatHsl() {\n    return hslConvert(this).formatHsl();\n  }\n  function color_formatRgb() {\n    return this.rgb().formatRgb();\n  }\n  function color(format) {\n    var m, l;\n    format = (format + \"\").trim().toLowerCase();\n    return (m = reHex.exec(format)) ? (l = m[1].length, m = parseInt(m[1], 16), l === 6 ? rgbn(m) // #ff0000\n    : l === 3 ? new Rgb(m >> 8 & 0xf | m >> 4 & 0xf0, m >> 4 & 0xf | m & 0xf0, (m & 0xf) << 4 | m & 0xf, 1) // #f00\n    : l === 8 ? rgba(m >> 24 & 0xff, m >> 16 & 0xff, m >> 8 & 0xff, (m & 0xff) / 0xff) // #ff000000\n    : l === 4 ? rgba(m >> 12 & 0xf | m >> 8 & 0xf0, m >> 8 & 0xf | m >> 4 & 0xf0, m >> 4 & 0xf | m & 0xf0, ((m & 0xf) << 4 | m & 0xf) / 0xff) // #f000\n    : null // invalid hex\n    ) : (m = reRgbInteger.exec(format)) ? new Rgb(m[1], m[2], m[3], 1) // rgb(255, 0, 0)\n    : (m = reRgbPercent.exec(format)) ? new Rgb(m[1] * 255 / 100, m[2] * 255 / 100, m[3] * 255 / 100, 1) // rgb(100%, 0%, 0%)\n    : (m = reRgbaInteger.exec(format)) ? rgba(m[1], m[2], m[3], m[4]) // rgba(255, 0, 0, 1)\n    : (m = reRgbaPercent.exec(format)) ? rgba(m[1] * 255 / 100, m[2] * 255 / 100, m[3] * 255 / 100, m[4]) // rgb(100%, 0%, 0%, 1)\n    : (m = reHslPercent.exec(format)) ? hsla(m[1], m[2] / 100, m[3] / 100, 1) // hsl(120, 50%, 50%)\n    : (m = reHslaPercent.exec(format)) ? hsla(m[1], m[2] / 100, m[3] / 100, m[4]) // hsla(120, 50%, 50%, 1)\n    : named.hasOwnProperty(format) ? rgbn(named[format]) // eslint-disable-line no-prototype-builtins\n    : format === \"transparent\" ? new Rgb(NaN, NaN, NaN, 0) : null;\n  }\n  function rgbn(n) {\n    return new Rgb(n >> 16 & 0xff, n >> 8 & 0xff, n & 0xff, 1);\n  }\n  function rgba(r, g, b, a) {\n    if (a <= 0) r = g = b = NaN;\n    return new Rgb(r, g, b, a);\n  }\n  function rgbConvert(o) {\n    if (!(o instanceof Color)) o = color(o);\n    if (!o) return new Rgb();\n    o = o.rgb();\n    return new Rgb(o.r, o.g, o.b, o.opacity);\n  }\n  function rgb(r, g, b, opacity) {\n    return arguments.length === 1 ? rgbConvert(r) : new Rgb(r, g, b, opacity == null ? 1 : opacity);\n  }\n  function Rgb(r, g, b, opacity) {\n    this.r = +r;\n    this.g = +g;\n    this.b = +b;\n    this.opacity = +opacity;\n  }\n  define(Rgb, rgb, extend(Color, {\n    brighter: function brighter(k) {\n      k = k == null ? _brighter : Math.pow(_brighter, k);\n      return new Rgb(this.r * k, this.g * k, this.b * k, this.opacity);\n    },\n    darker: function darker(k) {\n      k = k == null ? _darker : Math.pow(_darker, k);\n      return new Rgb(this.r * k, this.g * k, this.b * k, this.opacity);\n    },\n    rgb: function rgb() {\n      return this;\n    },\n    displayable: function displayable() {\n      return -0.5 <= this.r && this.r < 255.5 && -0.5 <= this.g && this.g < 255.5 && -0.5 <= this.b && this.b < 255.5 && 0 <= this.opacity && this.opacity <= 1;\n    },\n    hex: rgb_formatHex,\n    // Deprecated! Use color.formatHex.\n    formatHex: rgb_formatHex,\n    formatRgb: rgb_formatRgb,\n    toString: rgb_formatRgb\n  }));\n  function rgb_formatHex() {\n    return \"#\" + hex(this.r) + hex(this.g) + hex(this.b);\n  }\n  function rgb_formatRgb() {\n    var a = this.opacity;\n    a = isNaN(a) ? 1 : Math.max(0, Math.min(1, a));\n    return (a === 1 ? \"rgb(\" : \"rgba(\") + Math.max(0, Math.min(255, Math.round(this.r) || 0)) + \", \" + Math.max(0, Math.min(255, Math.round(this.g) || 0)) + \", \" + Math.max(0, Math.min(255, Math.round(this.b) || 0)) + (a === 1 ? \")\" : \", \" + a + \")\");\n  }\n  function hex(value) {\n    value = Math.max(0, Math.min(255, Math.round(value) || 0));\n    return (value < 16 ? \"0\" : \"\") + value.toString(16);\n  }\n  function hsla(h, s, l, a) {\n    if (a <= 0) h = s = l = NaN;else if (l <= 0 || l >= 1) h = s = NaN;else if (s <= 0) h = NaN;\n    return new Hsl(h, s, l, a);\n  }\n  function hslConvert(o) {\n    if (o instanceof Hsl) return new Hsl(o.h, o.s, o.l, o.opacity);\n    if (!(o instanceof Color)) o = color(o);\n    if (!o) return new Hsl();\n    if (o instanceof Hsl) return o;\n    o = o.rgb();\n    var r = o.r / 255,\n      g = o.g / 255,\n      b = o.b / 255,\n      min = Math.min(r, g, b),\n      max = Math.max(r, g, b),\n      h = NaN,\n      s = max - min,\n      l = (max + min) / 2;\n    if (s) {\n      if (r === max) h = (g - b) / s + (g < b) * 6;else if (g === max) h = (b - r) / s + 2;else h = (r - g) / s + 4;\n      s /= l < 0.5 ? max + min : 2 - max - min;\n      h *= 60;\n    } else {\n      s = l > 0 && l < 1 ? 0 : h;\n    }\n    return new Hsl(h, s, l, o.opacity);\n  }\n  function hsl(h, s, l, opacity) {\n    return arguments.length === 1 ? hslConvert(h) : new Hsl(h, s, l, opacity == null ? 1 : opacity);\n  }\n  function Hsl(h, s, l, opacity) {\n    this.h = +h;\n    this.s = +s;\n    this.l = +l;\n    this.opacity = +opacity;\n  }\n  define(Hsl, hsl, extend(Color, {\n    brighter: function brighter(k) {\n      k = k == null ? _brighter : Math.pow(_brighter, k);\n      return new Hsl(this.h, this.s, this.l * k, this.opacity);\n    },\n    darker: function darker(k) {\n      k = k == null ? _darker : Math.pow(_darker, k);\n      return new Hsl(this.h, this.s, this.l * k, this.opacity);\n    },\n    rgb: function rgb() {\n      var h = this.h % 360 + (this.h < 0) * 360,\n        s = isNaN(h) || isNaN(this.s) ? 0 : this.s,\n        l = this.l,\n        m2 = l + (l < 0.5 ? l : 1 - l) * s,\n        m1 = 2 * l - m2;\n      return new Rgb(hsl2rgb(h >= 240 ? h - 240 : h + 120, m1, m2), hsl2rgb(h, m1, m2), hsl2rgb(h < 120 ? h + 240 : h - 120, m1, m2), this.opacity);\n    },\n    displayable: function displayable() {\n      return (0 <= this.s && this.s <= 1 || isNaN(this.s)) && 0 <= this.l && this.l <= 1 && 0 <= this.opacity && this.opacity <= 1;\n    },\n    formatHsl: function formatHsl() {\n      var a = this.opacity;\n      a = isNaN(a) ? 1 : Math.max(0, Math.min(1, a));\n      return (a === 1 ? \"hsl(\" : \"hsla(\") + (this.h || 0) + \", \" + (this.s || 0) * 100 + \"%, \" + (this.l || 0) * 100 + \"%\" + (a === 1 ? \")\" : \", \" + a + \")\");\n    }\n  }));\n\n  /* From FvD 13.37, CSS Color Module Level 3 */\n  function hsl2rgb(h, m1, m2) {\n    return (h < 60 ? m1 + (m2 - m1) * h / 60 : h < 180 ? m2 : h < 240 ? m1 + (m2 - m1) * (240 - h) / 60 : m1) * 255;\n  }\n  var deg2rad = Math.PI / 180;\n  var rad2deg = 180 / Math.PI;\n\n  // https://observablehq.com/@mbostock/lab-and-rgb\n  var K = 18,\n    Xn = 0.96422,\n    Yn = 1,\n    Zn = 0.82521,\n    t0 = 4 / 29,\n    t1 = 6 / 29,\n    t2 = 3 * t1 * t1,\n    t3 = t1 * t1 * t1;\n  function labConvert(o) {\n    if (o instanceof Lab) return new Lab(o.l, o.a, o.b, o.opacity);\n    if (o instanceof Hcl) return hcl2lab(o);\n    if (!(o instanceof Rgb)) o = rgbConvert(o);\n    var r = rgb2lrgb(o.r),\n      g = rgb2lrgb(o.g),\n      b = rgb2lrgb(o.b),\n      y = xyz2lab((0.2225045 * r + 0.7168786 * g + 0.0606169 * b) / Yn),\n      x,\n      z;\n    if (r === g && g === b) x = z = y;else {\n      x = xyz2lab((0.4360747 * r + 0.3850649 * g + 0.1430804 * b) / Xn);\n      z = xyz2lab((0.0139322 * r + 0.0971045 * g + 0.7141733 * b) / Zn);\n    }\n    return new Lab(116 * y - 16, 500 * (x - y), 200 * (y - z), o.opacity);\n  }\n  function lab(l, a, b, opacity) {\n    return arguments.length === 1 ? labConvert(l) : new Lab(l, a, b, opacity == null ? 1 : opacity);\n  }\n  function Lab(l, a, b, opacity) {\n    this.l = +l;\n    this.a = +a;\n    this.b = +b;\n    this.opacity = +opacity;\n  }\n  define(Lab, lab, extend(Color, {\n    brighter: function brighter(k) {\n      return new Lab(this.l + K * (k == null ? 1 : k), this.a, this.b, this.opacity);\n    },\n    darker: function darker(k) {\n      return new Lab(this.l - K * (k == null ? 1 : k), this.a, this.b, this.opacity);\n    },\n    rgb: function rgb() {\n      var y = (this.l + 16) / 116,\n        x = isNaN(this.a) ? y : y + this.a / 500,\n        z = isNaN(this.b) ? y : y - this.b / 200;\n      x = Xn * lab2xyz(x);\n      y = Yn * lab2xyz(y);\n      z = Zn * lab2xyz(z);\n      return new Rgb(lrgb2rgb(3.1338561 * x - 1.6168667 * y - 0.4906146 * z), lrgb2rgb(-0.9787684 * x + 1.9161415 * y + 0.0334540 * z), lrgb2rgb(0.0719453 * x - 0.2289914 * y + 1.4052427 * z), this.opacity);\n    }\n  }));\n  function xyz2lab(t) {\n    return t > t3 ? Math.pow(t, 1 / 3) : t / t2 + t0;\n  }\n  function lab2xyz(t) {\n    return t > t1 ? t * t * t : t2 * (t - t0);\n  }\n  function lrgb2rgb(x) {\n    return 255 * (x <= 0.0031308 ? 12.92 * x : 1.055 * Math.pow(x, 1 / 2.4) - 0.055);\n  }\n  function rgb2lrgb(x) {\n    return (x /= 255) <= 0.04045 ? x / 12.92 : Math.pow((x + 0.055) / 1.055, 2.4);\n  }\n  function hclConvert(o) {\n    if (o instanceof Hcl) return new Hcl(o.h, o.c, o.l, o.opacity);\n    if (!(o instanceof Lab)) o = labConvert(o);\n    if (o.a === 0 && o.b === 0) return new Hcl(NaN, 0 < o.l && o.l < 100 ? 0 : NaN, o.l, o.opacity);\n    var h = Math.atan2(o.b, o.a) * rad2deg;\n    return new Hcl(h < 0 ? h + 360 : h, Math.sqrt(o.a * o.a + o.b * o.b), o.l, o.opacity);\n  }\n  function hcl(h, c, l, opacity) {\n    return arguments.length === 1 ? hclConvert(h) : new Hcl(h, c, l, opacity == null ? 1 : opacity);\n  }\n  function Hcl(h, c, l, opacity) {\n    this.h = +h;\n    this.c = +c;\n    this.l = +l;\n    this.opacity = +opacity;\n  }\n  function hcl2lab(o) {\n    if (isNaN(o.h)) return new Lab(o.l, 0, 0, o.opacity);\n    var h = o.h * deg2rad;\n    return new Lab(o.l, Math.cos(h) * o.c, Math.sin(h) * o.c, o.opacity);\n  }\n  define(Hcl, hcl, extend(Color, {\n    brighter: function brighter(k) {\n      return new Hcl(this.h, this.c, this.l + K * (k == null ? 1 : k), this.opacity);\n    },\n    darker: function darker(k) {\n      return new Hcl(this.h, this.c, this.l - K * (k == null ? 1 : k), this.opacity);\n    },\n    rgb: function rgb() {\n      return hcl2lab(this).rgb();\n    }\n  }));\n  var A = -0.14861,\n    B = +1.78277,\n    C = -0.29227,\n    D = -0.90649,\n    E = +1.97294,\n    ED = E * D,\n    EB = E * B,\n    BC_DA = B * C - D * A;\n  function cubehelixConvert(o) {\n    if (o instanceof Cubehelix) return new Cubehelix(o.h, o.s, o.l, o.opacity);\n    if (!(o instanceof Rgb)) o = rgbConvert(o);\n    var r = o.r / 255,\n      g = o.g / 255,\n      b = o.b / 255,\n      l = (BC_DA * b + ED * r - EB * g) / (BC_DA + ED - EB),\n      bl = b - l,\n      k = (E * (g - l) - C * bl) / D,\n      s = Math.sqrt(k * k + bl * bl) / (E * l * (1 - l)),\n      // NaN if l=0 or l=1\n      h = s ? Math.atan2(k, bl) * rad2deg - 120 : NaN;\n    return new Cubehelix(h < 0 ? h + 360 : h, s, l, o.opacity);\n  }\n  function cubehelix(h, s, l, opacity) {\n    return arguments.length === 1 ? cubehelixConvert(h) : new Cubehelix(h, s, l, opacity == null ? 1 : opacity);\n  }\n  function Cubehelix(h, s, l, opacity) {\n    this.h = +h;\n    this.s = +s;\n    this.l = +l;\n    this.opacity = +opacity;\n  }\n  define(Cubehelix, cubehelix, extend(Color, {\n    brighter: function brighter(k) {\n      k = k == null ? _brighter : Math.pow(_brighter, k);\n      return new Cubehelix(this.h, this.s, this.l * k, this.opacity);\n    },\n    darker: function darker(k) {\n      k = k == null ? _darker : Math.pow(_darker, k);\n      return new Cubehelix(this.h, this.s, this.l * k, this.opacity);\n    },\n    rgb: function rgb() {\n      var h = isNaN(this.h) ? 0 : (this.h + 120) * deg2rad,\n        l = +this.l,\n        a = isNaN(this.s) ? 0 : this.s * l * (1 - l),\n        cosh = Math.cos(h),\n        sinh = Math.sin(h);\n      return new Rgb(255 * (l + a * (A * cosh + B * sinh)), 255 * (l + a * (C * cosh + D * sinh)), 255 * (l + a * (E * cosh)), this.opacity);\n    }\n  }));\n  function constant(x) {\n    return function () {\n      return x;\n    };\n  }\n  function linear(a, d) {\n    return function (t) {\n      return a + t * d;\n    };\n  }\n  function exponential(a, b, y) {\n    return a = Math.pow(a, y), b = Math.pow(b, y) - a, y = 1 / y, function (t) {\n      return Math.pow(a + t * b, y);\n    };\n  }\n  function gamma(y) {\n    return (y = +y) === 1 ? nogamma : function (a, b) {\n      return b - a ? exponential(a, b, y) : constant(isNaN(a) ? b : a);\n    };\n  }\n  function nogamma(a, b) {\n    var d = b - a;\n    return d ? linear(a, d) : constant(isNaN(a) ? b : a);\n  }\n  var rgb$1 = function rgbGamma(y) {\n    var color = gamma(y);\n    function rgb$1(start, end) {\n      var r = color((start = rgb(start)).r, (end = rgb(end)).r),\n        g = color(start.g, end.g),\n        b = color(start.b, end.b),\n        opacity = nogamma(start.opacity, end.opacity);\n      return function (t) {\n        start.r = r(t);\n        start.g = g(t);\n        start.b = b(t);\n        start.opacity = opacity(t);\n        return start + \"\";\n      };\n    }\n    rgb$1.gamma = rgbGamma;\n    return rgb$1;\n  }(1);\n  function numberArray(a, b) {\n    if (!b) b = [];\n    var n = a ? Math.min(b.length, a.length) : 0,\n      c = b.slice(),\n      i;\n    return function (t) {\n      for (i = 0; i < n; ++i) c[i] = a[i] * (1 - t) + b[i] * t;\n      return c;\n    };\n  }\n  function isNumberArray(x) {\n    return ArrayBuffer.isView(x) && !(x instanceof DataView);\n  }\n  function genericArray(a, b) {\n    var nb = b ? b.length : 0,\n      na = a ? Math.min(nb, a.length) : 0,\n      x = new Array(na),\n      c = new Array(nb),\n      i;\n    for (i = 0; i < na; ++i) x[i] = interpolate(a[i], b[i]);\n    for (; i < nb; ++i) c[i] = b[i];\n    return function (t) {\n      for (i = 0; i < na; ++i) c[i] = x[i](t);\n      return c;\n    };\n  }\n  function date(a, b) {\n    var d = new Date();\n    return a = +a, b = +b, function (t) {\n      return d.setTime(a * (1 - t) + b * t), d;\n    };\n  }\n  function interpolateNumber(a, b) {\n    return a = +a, b = +b, function (t) {\n      return a * (1 - t) + b * t;\n    };\n  }\n  function object(a, b) {\n    var i = {},\n      c = {},\n      k;\n    if (a === null || _typeof(a) !== \"object\") a = {};\n    if (b === null || _typeof(b) !== \"object\") b = {};\n    for (k in b) {\n      if (k in a) {\n        i[k] = interpolate(a[k], b[k]);\n      } else {\n        c[k] = b[k];\n      }\n    }\n    return function (t) {\n      for (k in i) c[k] = i[k](t);\n      return c;\n    };\n  }\n  var reA = /[-+]?(?:\\d+\\.?\\d*|\\.?\\d+)(?:[eE][-+]?\\d+)?/g,\n    reB = new RegExp(reA.source, \"g\");\n  function zero(b) {\n    return function () {\n      return b;\n    };\n  }\n  function one(b) {\n    return function (t) {\n      return b(t) + \"\";\n    };\n  }\n  function string(a, b) {\n    var bi = reA.lastIndex = reB.lastIndex = 0,\n      // scan index for next number in b\n      am,\n      // current match in a\n      bm,\n      // current match in b\n      bs,\n      // string preceding current number in b, if any\n      i = -1,\n      // index in s\n      s = [],\n      // string constants and placeholders\n      q = []; // number interpolators\n\n    // Coerce inputs to strings.\n    a = a + \"\", b = b + \"\";\n\n    // Interpolate pairs of numbers in a & b.\n    while ((am = reA.exec(a)) && (bm = reB.exec(b))) {\n      if ((bs = bm.index) > bi) {\n        // a string precedes the next number in b\n        bs = b.slice(bi, bs);\n        if (s[i]) s[i] += bs; // coalesce with previous string\n        else s[++i] = bs;\n      }\n      if ((am = am[0]) === (bm = bm[0])) {\n        // numbers in a & b match\n        if (s[i]) s[i] += bm; // coalesce with previous string\n        else s[++i] = bm;\n      } else {\n        // interpolate non-matching numbers\n        s[++i] = null;\n        q.push({\n          i: i,\n          x: interpolateNumber(am, bm)\n        });\n      }\n      bi = reB.lastIndex;\n    }\n\n    // Add remains of b.\n    if (bi < b.length) {\n      bs = b.slice(bi);\n      if (s[i]) s[i] += bs; // coalesce with previous string\n      else s[++i] = bs;\n    }\n\n    // Special optimization for only a single match.\n    // Otherwise, interpolate each of the numbers and rejoin the string.\n    return s.length < 2 ? q[0] ? one(q[0].x) : zero(b) : (b = q.length, function (t) {\n      for (var i = 0, o; i < b; ++i) s[(o = q[i]).i] = o.x(t);\n      return s.join(\"\");\n    });\n  }\n  function interpolate(a, b) {\n    var t = _typeof(b),\n      c;\n    return b == null || t === \"boolean\" ? constant(b) : (t === \"number\" ? interpolateNumber : t === \"string\" ? (c = color(b)) ? (b = c, rgb$1) : string : b instanceof color ? rgb$1 : b instanceof Date ? date : isNumberArray(b) ? numberArray : Array.isArray(b) ? genericArray : typeof b.valueOf !== \"function\" && typeof b.toString !== \"function\" || isNaN(b) ? object : interpolateNumber)(a, b);\n  }\n  function interpolateRound(a, b) {\n    return a = +a, b = +b, function (t) {\n      return Math.round(a * (1 - t) + b * t);\n    };\n  }\n  function constant$1(x) {\n    return function () {\n      return x;\n    };\n  }\n  function number(x) {\n    return +x;\n  }\n  var unit = [0, 1];\n  function identity(x) {\n    return x;\n  }\n  function normalize(a, b) {\n    return (b -= a = +a) ? function (x) {\n      return (x - a) / b;\n    } : constant$1(isNaN(b) ? NaN : 0.5);\n  }\n  function clamper(a, b) {\n    var t;\n    if (a > b) t = a, a = b, b = t;\n    return function (x) {\n      return Math.max(a, Math.min(b, x));\n    };\n  }\n\n  // normalize(a, b)(x) takes a domain value x in [a,b] and returns the corresponding parameter t in [0,1].\n  // interpolate(a, b)(t) takes a parameter t in [0,1] and returns the corresponding range value x in [a,b].\n  function bimap(domain, range, interpolate) {\n    var d0 = domain[0],\n      d1 = domain[1],\n      r0 = range[0],\n      r1 = range[1];\n    if (d1 < d0) d0 = normalize(d1, d0), r0 = interpolate(r1, r0);else d0 = normalize(d0, d1), r0 = interpolate(r0, r1);\n    return function (x) {\n      return r0(d0(x));\n    };\n  }\n  function polymap(domain, range, interpolate) {\n    var j = Math.min(domain.length, range.length) - 1,\n      d = new Array(j),\n      r = new Array(j),\n      i = -1;\n\n    // Reverse descending domains.\n    if (domain[j] < domain[0]) {\n      domain = domain.slice().reverse();\n      range = range.slice().reverse();\n    }\n    while (++i < j) {\n      d[i] = normalize(domain[i], domain[i + 1]);\n      r[i] = interpolate(range[i], range[i + 1]);\n    }\n    return function (x) {\n      var i = bisectRight(domain, x, 1, j) - 1;\n      return r[i](d[i](x));\n    };\n  }\n  function copy(source, target) {\n    return target.domain(source.domain()).range(source.range()).interpolate(source.interpolate()).clamp(source.clamp()).unknown(source.unknown());\n  }\n  function transformer() {\n    var domain = unit,\n      range = unit,\n      interpolate$1 = interpolate,\n      transform,\n      untransform,\n      unknown,\n      clamp = identity,\n      piecewise,\n      output,\n      input;\n    function rescale() {\n      var n = Math.min(domain.length, range.length);\n      if (clamp !== identity) clamp = clamper(domain[0], domain[n - 1]);\n      piecewise = n > 2 ? polymap : bimap;\n      output = input = null;\n      return scale;\n    }\n    function scale(x) {\n      return isNaN(x = +x) ? unknown : (output || (output = piecewise(domain.map(transform), range, interpolate$1)))(transform(clamp(x)));\n    }\n    scale.invert = function (y) {\n      return clamp(untransform((input || (input = piecewise(range, domain.map(transform), interpolateNumber)))(y)));\n    };\n    scale.domain = function (_) {\n      return arguments.length ? (domain = Array.from(_, number), rescale()) : domain.slice();\n    };\n    scale.range = function (_) {\n      return arguments.length ? (range = Array.from(_), rescale()) : range.slice();\n    };\n    scale.rangeRound = function (_) {\n      return range = Array.from(_), interpolate$1 = interpolateRound, rescale();\n    };\n    scale.clamp = function (_) {\n      return arguments.length ? (clamp = _ ? true : identity, rescale()) : clamp !== identity;\n    };\n    scale.interpolate = function (_) {\n      return arguments.length ? (interpolate$1 = _, rescale()) : interpolate$1;\n    };\n    scale.unknown = function (_) {\n      return arguments.length ? (unknown = _, scale) : unknown;\n    };\n    return function (t, u) {\n      transform = t, untransform = u;\n      return rescale();\n    };\n  }\n  function continuous() {\n    return transformer()(identity, identity);\n  }\n\n  // Computes the decimal coefficient and exponent of the specified number x with\n  // significant digits p, where x is positive and p is in [1, 21] or undefined.\n  // For example, formatDecimal(1.23) returns [\"123\", 0].\n  function formatDecimal(x, p) {\n    if ((i = (x = p ? x.toExponential(p - 1) : x.toExponential()).indexOf(\"e\")) < 0) return null; // NaN, ±Infinity\n    var i,\n      coefficient = x.slice(0, i);\n\n    // The string returned by toExponential either has the form \\d\\.\\d+e[-+]\\d+\n    // (e.g., 1.2e+3) or the form \\de[-+]\\d+ (e.g., 1e+3).\n    return [coefficient.length > 1 ? coefficient[0] + coefficient.slice(2) : coefficient, +x.slice(i + 1)];\n  }\n  function exponent(x) {\n    return x = formatDecimal(Math.abs(x)), x ? x[1] : NaN;\n  }\n  function formatGroup(grouping, thousands) {\n    return function (value, width) {\n      var i = value.length,\n        t = [],\n        j = 0,\n        g = grouping[0],\n        length = 0;\n      while (i > 0 && g > 0) {\n        if (length + g + 1 > width) g = Math.max(1, width - length);\n        t.push(value.substring(i -= g, i + g));\n        if ((length += g + 1) > width) break;\n        g = grouping[j = (j + 1) % grouping.length];\n      }\n      return t.reverse().join(thousands);\n    };\n  }\n  function formatNumerals(numerals) {\n    return function (value) {\n      return value.replace(/[0-9]/g, function (i) {\n        return numerals[+i];\n      });\n    };\n  }\n\n  // [[fill]align][sign][symbol][0][width][,][.precision][~][type]\n  var re = /^(?:(.)?([<>=^]))?([+\\-( ])?([$#])?(0)?(\\d+)?(,)?(\\.\\d+)?(~)?([a-z%])?$/i;\n  function formatSpecifier(specifier) {\n    if (!(match = re.exec(specifier))) throw new Error(\"invalid format: \" + specifier);\n    var match;\n    return new FormatSpecifier({\n      fill: match[1],\n      align: match[2],\n      sign: match[3],\n      symbol: match[4],\n      zero: match[5],\n      width: match[6],\n      comma: match[7],\n      precision: match[8] && match[8].slice(1),\n      trim: match[9],\n      type: match[10]\n    });\n  }\n  formatSpecifier.prototype = FormatSpecifier.prototype; // instanceof\n\n  function FormatSpecifier(specifier) {\n    this.fill = specifier.fill === undefined ? \" \" : specifier.fill + \"\";\n    this.align = specifier.align === undefined ? \">\" : specifier.align + \"\";\n    this.sign = specifier.sign === undefined ? \"-\" : specifier.sign + \"\";\n    this.symbol = specifier.symbol === undefined ? \"\" : specifier.symbol + \"\";\n    this.zero = !!specifier.zero;\n    this.width = specifier.width === undefined ? undefined : +specifier.width;\n    this.comma = !!specifier.comma;\n    this.precision = specifier.precision === undefined ? undefined : +specifier.precision;\n    this.trim = !!specifier.trim;\n    this.type = specifier.type === undefined ? \"\" : specifier.type + \"\";\n  }\n  FormatSpecifier.prototype.toString = function () {\n    return this.fill + this.align + this.sign + this.symbol + (this.zero ? \"0\" : \"\") + (this.width === undefined ? \"\" : Math.max(1, this.width | 0)) + (this.comma ? \",\" : \"\") + (this.precision === undefined ? \"\" : \".\" + Math.max(0, this.precision | 0)) + (this.trim ? \"~\" : \"\") + this.type;\n  };\n\n  // Trims insignificant zeros, e.g., replaces 1.2000k with 1.2k.\n  function formatTrim(s) {\n    out: for (var n = s.length, i = 1, i0 = -1, i1; i < n; ++i) {\n      switch (s[i]) {\n        case \".\":\n          i0 = i1 = i;\n          break;\n        case \"0\":\n          if (i0 === 0) i0 = i;\n          i1 = i;\n          break;\n        default:\n          if (!+s[i]) break out;\n          if (i0 > 0) i0 = 0;\n          break;\n      }\n    }\n    return i0 > 0 ? s.slice(0, i0) + s.slice(i1 + 1) : s;\n  }\n  var prefixExponent;\n  function formatPrefixAuto(x, p) {\n    var d = formatDecimal(x, p);\n    if (!d) return x + \"\";\n    var coefficient = d[0],\n      exponent = d[1],\n      i = exponent - (prefixExponent = Math.max(-8, Math.min(8, Math.floor(exponent / 3))) * 3) + 1,\n      n = coefficient.length;\n    return i === n ? coefficient : i > n ? coefficient + new Array(i - n + 1).join(\"0\") : i > 0 ? coefficient.slice(0, i) + \".\" + coefficient.slice(i) : \"0.\" + new Array(1 - i).join(\"0\") + formatDecimal(x, Math.max(0, p + i - 1))[0]; // less than 1y!\n  }\n  function formatRounded(x, p) {\n    var d = formatDecimal(x, p);\n    if (!d) return x + \"\";\n    var coefficient = d[0],\n      exponent = d[1];\n    return exponent < 0 ? \"0.\" + new Array(-exponent).join(\"0\") + coefficient : coefficient.length > exponent + 1 ? coefficient.slice(0, exponent + 1) + \".\" + coefficient.slice(exponent + 1) : coefficient + new Array(exponent - coefficient.length + 2).join(\"0\");\n  }\n  var formatTypes = {\n    \"%\": function _(x, p) {\n      return (x * 100).toFixed(p);\n    },\n    \"b\": function b(x) {\n      return Math.round(x).toString(2);\n    },\n    \"c\": function c(x) {\n      return x + \"\";\n    },\n    \"d\": function d(x) {\n      return Math.round(x).toString(10);\n    },\n    \"e\": function e(x, p) {\n      return x.toExponential(p);\n    },\n    \"f\": function f(x, p) {\n      return x.toFixed(p);\n    },\n    \"g\": function g(x, p) {\n      return x.toPrecision(p);\n    },\n    \"o\": function o(x) {\n      return Math.round(x).toString(8);\n    },\n    \"p\": function p(x, _p) {\n      return formatRounded(x * 100, _p);\n    },\n    \"r\": formatRounded,\n    \"s\": formatPrefixAuto,\n    \"X\": function X(x) {\n      return Math.round(x).toString(16).toUpperCase();\n    },\n    \"x\": function x(_x) {\n      return Math.round(_x).toString(16);\n    }\n  };\n  function identity$1(x) {\n    return x;\n  }\n  var map = Array.prototype.map,\n    prefixes = [\"y\", \"z\", \"a\", \"f\", \"p\", \"n\", \"µ\", \"m\", \"\", \"k\", \"M\", \"G\", \"T\", \"P\", \"E\", \"Z\", \"Y\"];\n  function formatLocale(locale) {\n    var group = locale.grouping === undefined || locale.thousands === undefined ? identity$1 : formatGroup(map.call(locale.grouping, Number), locale.thousands + \"\"),\n      currencyPrefix = locale.currency === undefined ? \"\" : locale.currency[0] + \"\",\n      currencySuffix = locale.currency === undefined ? \"\" : locale.currency[1] + \"\",\n      decimal = locale.decimal === undefined ? \".\" : locale.decimal + \"\",\n      numerals = locale.numerals === undefined ? identity$1 : formatNumerals(map.call(locale.numerals, String)),\n      percent = locale.percent === undefined ? \"%\" : locale.percent + \"\",\n      minus = locale.minus === undefined ? \"-\" : locale.minus + \"\",\n      nan = locale.nan === undefined ? \"NaN\" : locale.nan + \"\";\n    function newFormat(specifier) {\n      specifier = formatSpecifier(specifier);\n      var fill = specifier.fill,\n        align = specifier.align,\n        sign = specifier.sign,\n        symbol = specifier.symbol,\n        zero = specifier.zero,\n        width = specifier.width,\n        comma = specifier.comma,\n        precision = specifier.precision,\n        trim = specifier.trim,\n        type = specifier.type;\n\n      // The \"n\" type is an alias for \",g\".\n      if (type === \"n\") comma = true, type = \"g\";\n\n      // The \"\" type, and any invalid type, is an alias for \".12~g\".\n      else if (!formatTypes[type]) precision === undefined && (precision = 12), trim = true, type = \"g\";\n\n      // If zero fill is specified, padding goes after sign and before digits.\n      if (zero || fill === \"0\" && align === \"=\") zero = true, fill = \"0\", align = \"=\";\n\n      // Compute the prefix and suffix.\n      // For SI-prefix, the suffix is lazily computed.\n      var prefix = symbol === \"$\" ? currencyPrefix : symbol === \"#\" && /[boxX]/.test(type) ? \"0\" + type.toLowerCase() : \"\",\n        suffix = symbol === \"$\" ? currencySuffix : /[%p]/.test(type) ? percent : \"\";\n\n      // What format function should we use?\n      // Is this an integer type?\n      // Can this type generate exponential notation?\n      var formatType = formatTypes[type],\n        maybeSuffix = /[defgprs%]/.test(type);\n\n      // Set the default precision if not specified,\n      // or clamp the specified precision to the supported range.\n      // For significant precision, it must be in [1, 21].\n      // For fixed precision, it must be in [0, 20].\n      precision = precision === undefined ? 6 : /[gprs]/.test(type) ? Math.max(1, Math.min(21, precision)) : Math.max(0, Math.min(20, precision));\n      function format(value) {\n        var valuePrefix = prefix,\n          valueSuffix = suffix,\n          i,\n          n,\n          c;\n        if (type === \"c\") {\n          valueSuffix = formatType(value) + valueSuffix;\n          value = \"\";\n        } else {\n          value = +value;\n\n          // Determine the sign. -0 is not less than 0, but 1 / -0 is!\n          var valueNegative = value < 0 || 1 / value < 0;\n\n          // Perform the initial formatting.\n          value = isNaN(value) ? nan : formatType(Math.abs(value), precision);\n\n          // Trim insignificant zeros.\n          if (trim) value = formatTrim(value);\n\n          // If a negative value rounds to zero after formatting, and no explicit positive sign is requested, hide the sign.\n          if (valueNegative && +value === 0 && sign !== \"+\") valueNegative = false;\n\n          // Compute the prefix and suffix.\n          valuePrefix = (valueNegative ? sign === \"(\" ? sign : minus : sign === \"-\" || sign === \"(\" ? \"\" : sign) + valuePrefix;\n          valueSuffix = (type === \"s\" ? prefixes[8 + prefixExponent / 3] : \"\") + valueSuffix + (valueNegative && sign === \"(\" ? \")\" : \"\");\n\n          // Break the formatted value into the integer “value” part that can be\n          // grouped, and fractional or exponential “suffix” part that is not.\n          if (maybeSuffix) {\n            i = -1, n = value.length;\n            while (++i < n) {\n              if (c = value.charCodeAt(i), 48 > c || c > 57) {\n                valueSuffix = (c === 46 ? decimal + value.slice(i + 1) : value.slice(i)) + valueSuffix;\n                value = value.slice(0, i);\n                break;\n              }\n            }\n          }\n        }\n\n        // If the fill character is not \"0\", grouping is applied before padding.\n        if (comma && !zero) value = group(value, Infinity);\n\n        // Compute the padding.\n        var length = valuePrefix.length + value.length + valueSuffix.length,\n          padding = length < width ? new Array(width - length + 1).join(fill) : \"\";\n\n        // If the fill character is \"0\", grouping is applied after padding.\n        if (comma && zero) value = group(padding + value, padding.length ? width - valueSuffix.length : Infinity), padding = \"\";\n\n        // Reconstruct the final output based on the desired alignment.\n        switch (align) {\n          case \"<\":\n            value = valuePrefix + value + valueSuffix + padding;\n            break;\n          case \"=\":\n            value = valuePrefix + padding + value + valueSuffix;\n            break;\n          case \"^\":\n            value = padding.slice(0, length = padding.length >> 1) + valuePrefix + value + valueSuffix + padding.slice(length);\n            break;\n          default:\n            value = padding + valuePrefix + value + valueSuffix;\n            break;\n        }\n        return numerals(value);\n      }\n      format.toString = function () {\n        return specifier + \"\";\n      };\n      return format;\n    }\n    function formatPrefix(specifier, value) {\n      var f = newFormat((specifier = formatSpecifier(specifier), specifier.type = \"f\", specifier)),\n        e = Math.max(-8, Math.min(8, Math.floor(exponent(value) / 3))) * 3,\n        k = Math.pow(10, -e),\n        prefix = prefixes[8 + e / 3];\n      return function (value) {\n        return f(k * value) + prefix;\n      };\n    }\n    return {\n      format: newFormat,\n      formatPrefix: formatPrefix\n    };\n  }\n  var locale;\n  var format;\n  var formatPrefix;\n  defaultLocale({\n    decimal: \".\",\n    thousands: \",\",\n    grouping: [3],\n    currency: [\"$\", \"\"],\n    minus: \"-\"\n  });\n  function defaultLocale(definition) {\n    locale = formatLocale(definition);\n    format = locale.format;\n    formatPrefix = locale.formatPrefix;\n    return locale;\n  }\n  function precisionFixed(step) {\n    return Math.max(0, -exponent(Math.abs(step)));\n  }\n  function precisionPrefix(step, value) {\n    return Math.max(0, Math.max(-8, Math.min(8, Math.floor(exponent(value) / 3))) * 3 - exponent(Math.abs(step)));\n  }\n  function precisionRound(step, max) {\n    step = Math.abs(step), max = Math.abs(max) - step;\n    return Math.max(0, exponent(max) - exponent(step)) + 1;\n  }\n  function tickFormat(start, stop, count, specifier) {\n    var step = tickStep(start, stop, count),\n      precision;\n    specifier = formatSpecifier(specifier == null ? \",f\" : specifier);\n    switch (specifier.type) {\n      case \"s\":\n        {\n          var value = Math.max(Math.abs(start), Math.abs(stop));\n          if (specifier.precision == null && !isNaN(precision = precisionPrefix(step, value))) specifier.precision = precision;\n          return formatPrefix(specifier, value);\n        }\n      case \"\":\n      case \"e\":\n      case \"g\":\n      case \"p\":\n      case \"r\":\n        {\n          if (specifier.precision == null && !isNaN(precision = precisionRound(step, Math.max(Math.abs(start), Math.abs(stop))))) specifier.precision = precision - (specifier.type === \"e\");\n          break;\n        }\n      case \"f\":\n      case \"%\":\n        {\n          if (specifier.precision == null && !isNaN(precision = precisionFixed(step))) specifier.precision = precision - (specifier.type === \"%\") * 2;\n          break;\n        }\n    }\n    return format(specifier);\n  }\n  function linearish(scale) {\n    var domain = scale.domain;\n    scale.ticks = function (count) {\n      var d = domain();\n      return ticks(d[0], d[d.length - 1], count == null ? 10 : count);\n    };\n    scale.tickFormat = function (count, specifier) {\n      var d = domain();\n      return tickFormat(d[0], d[d.length - 1], count == null ? 10 : count, specifier);\n    };\n    scale.nice = function (count) {\n      if (count == null) count = 10;\n      var d = domain(),\n        i0 = 0,\n        i1 = d.length - 1,\n        start = d[i0],\n        stop = d[i1],\n        step;\n      if (stop < start) {\n        step = start, start = stop, stop = step;\n        step = i0, i0 = i1, i1 = step;\n      }\n      step = tickIncrement(start, stop, count);\n      if (step > 0) {\n        start = Math.floor(start / step) * step;\n        stop = Math.ceil(stop / step) * step;\n        step = tickIncrement(start, stop, count);\n      } else if (step < 0) {\n        start = Math.ceil(start * step) / step;\n        stop = Math.floor(stop * step) / step;\n        step = tickIncrement(start, stop, count);\n      }\n      if (step > 0) {\n        d[i0] = Math.floor(start / step) * step;\n        d[i1] = Math.ceil(stop / step) * step;\n        domain(d);\n      } else if (step < 0) {\n        d[i0] = Math.ceil(start * step) / step;\n        d[i1] = Math.floor(stop * step) / step;\n        domain(d);\n      }\n      return scale;\n    };\n    return scale;\n  }\n  function linear$1() {\n    var scale = continuous();\n    scale.copy = function () {\n      return copy(scale, linear$1());\n    };\n    initRange.apply(scale, arguments);\n    return linearish(scale);\n  }\n  var t0$1 = new Date(),\n    t1$1 = new Date();\n  function newInterval(floori, offseti, count, field) {\n    function interval(date) {\n      return floori(date = arguments.length === 0 ? new Date() : new Date(+date)), date;\n    }\n    interval.floor = function (date) {\n      return floori(date = new Date(+date)), date;\n    };\n    interval.ceil = function (date) {\n      return floori(date = new Date(date - 1)), offseti(date, 1), floori(date), date;\n    };\n    interval.round = function (date) {\n      var d0 = interval(date),\n        d1 = interval.ceil(date);\n      return date - d0 < d1 - date ? d0 : d1;\n    };\n    interval.offset = function (date, step) {\n      return offseti(date = new Date(+date), step == null ? 1 : Math.floor(step)), date;\n    };\n    interval.range = function (start, stop, step) {\n      var range = [],\n        previous;\n      start = interval.ceil(start);\n      step = step == null ? 1 : Math.floor(step);\n      if (!(start < stop) || !(step > 0)) return range; // also handles Invalid Date\n      do range.push(previous = new Date(+start)), offseti(start, step), floori(start); while (previous < start && start < stop);\n      return range;\n    };\n    interval.filter = function (test) {\n      return newInterval(function (date) {\n        if (date >= date) while (floori(date), !test(date)) date.setTime(date - 1);\n      }, function (date, step) {\n        if (date >= date) {\n          if (step < 0) while (++step <= 0) {\n            while (offseti(date, -1), !test(date)) {} // eslint-disable-line no-empty\n          } else while (--step >= 0) {\n            while (offseti(date, +1), !test(date)) {} // eslint-disable-line no-empty\n          }\n        }\n      });\n    };\n    if (count) {\n      interval.count = function (start, end) {\n        t0$1.setTime(+start), t1$1.setTime(+end);\n        floori(t0$1), floori(t1$1);\n        return Math.floor(count(t0$1, t1$1));\n      };\n      interval.every = function (step) {\n        step = Math.floor(step);\n        return !isFinite(step) || !(step > 0) ? null : !(step > 1) ? interval : interval.filter(field ? function (d) {\n          return field(d) % step === 0;\n        } : function (d) {\n          return interval.count(0, d) % step === 0;\n        });\n      };\n    }\n    return interval;\n  }\n  var millisecond = newInterval(function () {\n    // noop\n  }, function (date, step) {\n    date.setTime(+date + step);\n  }, function (start, end) {\n    return end - start;\n  });\n\n  // An optimized implementation for this simple case.\n  millisecond.every = function (k) {\n    k = Math.floor(k);\n    if (!isFinite(k) || !(k > 0)) return null;\n    if (!(k > 1)) return millisecond;\n    return newInterval(function (date) {\n      date.setTime(Math.floor(date / k) * k);\n    }, function (date, step) {\n      date.setTime(+date + step * k);\n    }, function (start, end) {\n      return (end - start) / k;\n    });\n  };\n  var durationSecond = 1e3;\n  var durationMinute = 6e4;\n  var durationHour = 36e5;\n  var durationDay = 864e5;\n  var durationWeek = 6048e5;\n  var second = newInterval(function (date) {\n    date.setTime(date - date.getMilliseconds());\n  }, function (date, step) {\n    date.setTime(+date + step * durationSecond);\n  }, function (start, end) {\n    return (end - start) / durationSecond;\n  }, function (date) {\n    return date.getUTCSeconds();\n  });\n  var minute = newInterval(function (date) {\n    date.setTime(date - date.getMilliseconds() - date.getSeconds() * durationSecond);\n  }, function (date, step) {\n    date.setTime(+date + step * durationMinute);\n  }, function (start, end) {\n    return (end - start) / durationMinute;\n  }, function (date) {\n    return date.getMinutes();\n  });\n  var hour = newInterval(function (date) {\n    date.setTime(date - date.getMilliseconds() - date.getSeconds() * durationSecond - date.getMinutes() * durationMinute);\n  }, function (date, step) {\n    date.setTime(+date + step * durationHour);\n  }, function (start, end) {\n    return (end - start) / durationHour;\n  }, function (date) {\n    return date.getHours();\n  });\n  var day = newInterval(function (date) {\n    date.setHours(0, 0, 0, 0);\n  }, function (date, step) {\n    date.setDate(date.getDate() + step);\n  }, function (start, end) {\n    return (end - start - (end.getTimezoneOffset() - start.getTimezoneOffset()) * durationMinute) / durationDay;\n  }, function (date) {\n    return date.getDate() - 1;\n  });\n  function weekday(i) {\n    return newInterval(function (date) {\n      date.setDate(date.getDate() - (date.getDay() + 7 - i) % 7);\n      date.setHours(0, 0, 0, 0);\n    }, function (date, step) {\n      date.setDate(date.getDate() + step * 7);\n    }, function (start, end) {\n      return (end - start - (end.getTimezoneOffset() - start.getTimezoneOffset()) * durationMinute) / durationWeek;\n    });\n  }\n  var sunday = weekday(0);\n  var monday = weekday(1);\n  var tuesday = weekday(2);\n  var wednesday = weekday(3);\n  var thursday = weekday(4);\n  var friday = weekday(5);\n  var saturday = weekday(6);\n  var month = newInterval(function (date) {\n    date.setDate(1);\n    date.setHours(0, 0, 0, 0);\n  }, function (date, step) {\n    date.setMonth(date.getMonth() + step);\n  }, function (start, end) {\n    return end.getMonth() - start.getMonth() + (end.getFullYear() - start.getFullYear()) * 12;\n  }, function (date) {\n    return date.getMonth();\n  });\n  var year = newInterval(function (date) {\n    date.setMonth(0, 1);\n    date.setHours(0, 0, 0, 0);\n  }, function (date, step) {\n    date.setFullYear(date.getFullYear() + step);\n  }, function (start, end) {\n    return end.getFullYear() - start.getFullYear();\n  }, function (date) {\n    return date.getFullYear();\n  });\n\n  // An optimized implementation for this simple case.\n  year.every = function (k) {\n    return !isFinite(k = Math.floor(k)) || !(k > 0) ? null : newInterval(function (date) {\n      date.setFullYear(Math.floor(date.getFullYear() / k) * k);\n      date.setMonth(0, 1);\n      date.setHours(0, 0, 0, 0);\n    }, function (date, step) {\n      date.setFullYear(date.getFullYear() + step * k);\n    });\n  };\n  var utcMinute = newInterval(function (date) {\n    date.setUTCSeconds(0, 0);\n  }, function (date, step) {\n    date.setTime(+date + step * durationMinute);\n  }, function (start, end) {\n    return (end - start) / durationMinute;\n  }, function (date) {\n    return date.getUTCMinutes();\n  });\n  var utcHour = newInterval(function (date) {\n    date.setUTCMinutes(0, 0, 0);\n  }, function (date, step) {\n    date.setTime(+date + step * durationHour);\n  }, function (start, end) {\n    return (end - start) / durationHour;\n  }, function (date) {\n    return date.getUTCHours();\n  });\n  var utcDay = newInterval(function (date) {\n    date.setUTCHours(0, 0, 0, 0);\n  }, function (date, step) {\n    date.setUTCDate(date.getUTCDate() + step);\n  }, function (start, end) {\n    return (end - start) / durationDay;\n  }, function (date) {\n    return date.getUTCDate() - 1;\n  });\n  function utcWeekday(i) {\n    return newInterval(function (date) {\n      date.setUTCDate(date.getUTCDate() - (date.getUTCDay() + 7 - i) % 7);\n      date.setUTCHours(0, 0, 0, 0);\n    }, function (date, step) {\n      date.setUTCDate(date.getUTCDate() + step * 7);\n    }, function (start, end) {\n      return (end - start) / durationWeek;\n    });\n  }\n  var utcSunday = utcWeekday(0);\n  var utcMonday = utcWeekday(1);\n  var utcTuesday = utcWeekday(2);\n  var utcWednesday = utcWeekday(3);\n  var utcThursday = utcWeekday(4);\n  var utcFriday = utcWeekday(5);\n  var utcSaturday = utcWeekday(6);\n  var utcMonth = newInterval(function (date) {\n    date.setUTCDate(1);\n    date.setUTCHours(0, 0, 0, 0);\n  }, function (date, step) {\n    date.setUTCMonth(date.getUTCMonth() + step);\n  }, function (start, end) {\n    return end.getUTCMonth() - start.getUTCMonth() + (end.getUTCFullYear() - start.getUTCFullYear()) * 12;\n  }, function (date) {\n    return date.getUTCMonth();\n  });\n  var utcYear = newInterval(function (date) {\n    date.setUTCMonth(0, 1);\n    date.setUTCHours(0, 0, 0, 0);\n  }, function (date, step) {\n    date.setUTCFullYear(date.getUTCFullYear() + step);\n  }, function (start, end) {\n    return end.getUTCFullYear() - start.getUTCFullYear();\n  }, function (date) {\n    return date.getUTCFullYear();\n  });\n\n  // An optimized implementation for this simple case.\n  utcYear.every = function (k) {\n    return !isFinite(k = Math.floor(k)) || !(k > 0) ? null : newInterval(function (date) {\n      date.setUTCFullYear(Math.floor(date.getUTCFullYear() / k) * k);\n      date.setUTCMonth(0, 1);\n      date.setUTCHours(0, 0, 0, 0);\n    }, function (date, step) {\n      date.setUTCFullYear(date.getUTCFullYear() + step * k);\n    });\n  };\n  function localDate(d) {\n    if (0 <= d.y && d.y < 100) {\n      var date = new Date(-1, d.m, d.d, d.H, d.M, d.S, d.L);\n      date.setFullYear(d.y);\n      return date;\n    }\n    return new Date(d.y, d.m, d.d, d.H, d.M, d.S, d.L);\n  }\n  function utcDate(d) {\n    if (0 <= d.y && d.y < 100) {\n      var date = new Date(Date.UTC(-1, d.m, d.d, d.H, d.M, d.S, d.L));\n      date.setUTCFullYear(d.y);\n      return date;\n    }\n    return new Date(Date.UTC(d.y, d.m, d.d, d.H, d.M, d.S, d.L));\n  }\n  function newDate(y, m, d) {\n    return {\n      y: y,\n      m: m,\n      d: d,\n      H: 0,\n      M: 0,\n      S: 0,\n      L: 0\n    };\n  }\n  function formatLocale$1(locale) {\n    var locale_dateTime = locale.dateTime,\n      locale_date = locale.date,\n      locale_time = locale.time,\n      locale_periods = locale.periods,\n      locale_weekdays = locale.days,\n      locale_shortWeekdays = locale.shortDays,\n      locale_months = locale.months,\n      locale_shortMonths = locale.shortMonths;\n    var periodRe = formatRe(locale_periods),\n      periodLookup = formatLookup(locale_periods),\n      weekdayRe = formatRe(locale_weekdays),\n      weekdayLookup = formatLookup(locale_weekdays),\n      shortWeekdayRe = formatRe(locale_shortWeekdays),\n      shortWeekdayLookup = formatLookup(locale_shortWeekdays),\n      monthRe = formatRe(locale_months),\n      monthLookup = formatLookup(locale_months),\n      shortMonthRe = formatRe(locale_shortMonths),\n      shortMonthLookup = formatLookup(locale_shortMonths);\n    var formats = {\n      \"a\": formatShortWeekday,\n      \"A\": formatWeekday,\n      \"b\": formatShortMonth,\n      \"B\": formatMonth,\n      \"c\": null,\n      \"d\": formatDayOfMonth,\n      \"e\": formatDayOfMonth,\n      \"f\": formatMicroseconds,\n      \"H\": formatHour24,\n      \"I\": formatHour12,\n      \"j\": formatDayOfYear,\n      \"L\": formatMilliseconds,\n      \"m\": formatMonthNumber,\n      \"M\": formatMinutes,\n      \"p\": formatPeriod,\n      \"q\": formatQuarter,\n      \"Q\": formatUnixTimestamp,\n      \"s\": formatUnixTimestampSeconds,\n      \"S\": formatSeconds,\n      \"u\": formatWeekdayNumberMonday,\n      \"U\": formatWeekNumberSunday,\n      \"V\": formatWeekNumberISO,\n      \"w\": formatWeekdayNumberSunday,\n      \"W\": formatWeekNumberMonday,\n      \"x\": null,\n      \"X\": null,\n      \"y\": formatYear,\n      \"Y\": formatFullYear,\n      \"Z\": formatZone,\n      \"%\": formatLiteralPercent\n    };\n    var utcFormats = {\n      \"a\": formatUTCShortWeekday,\n      \"A\": formatUTCWeekday,\n      \"b\": formatUTCShortMonth,\n      \"B\": formatUTCMonth,\n      \"c\": null,\n      \"d\": formatUTCDayOfMonth,\n      \"e\": formatUTCDayOfMonth,\n      \"f\": formatUTCMicroseconds,\n      \"H\": formatUTCHour24,\n      \"I\": formatUTCHour12,\n      \"j\": formatUTCDayOfYear,\n      \"L\": formatUTCMilliseconds,\n      \"m\": formatUTCMonthNumber,\n      \"M\": formatUTCMinutes,\n      \"p\": formatUTCPeriod,\n      \"q\": formatUTCQuarter,\n      \"Q\": formatUnixTimestamp,\n      \"s\": formatUnixTimestampSeconds,\n      \"S\": formatUTCSeconds,\n      \"u\": formatUTCWeekdayNumberMonday,\n      \"U\": formatUTCWeekNumberSunday,\n      \"V\": formatUTCWeekNumberISO,\n      \"w\": formatUTCWeekdayNumberSunday,\n      \"W\": formatUTCWeekNumberMonday,\n      \"x\": null,\n      \"X\": null,\n      \"y\": formatUTCYear,\n      \"Y\": formatUTCFullYear,\n      \"Z\": formatUTCZone,\n      \"%\": formatLiteralPercent\n    };\n    var parses = {\n      \"a\": parseShortWeekday,\n      \"A\": parseWeekday,\n      \"b\": parseShortMonth,\n      \"B\": parseMonth,\n      \"c\": parseLocaleDateTime,\n      \"d\": parseDayOfMonth,\n      \"e\": parseDayOfMonth,\n      \"f\": parseMicroseconds,\n      \"H\": parseHour24,\n      \"I\": parseHour24,\n      \"j\": parseDayOfYear,\n      \"L\": parseMilliseconds,\n      \"m\": parseMonthNumber,\n      \"M\": parseMinutes,\n      \"p\": parsePeriod,\n      \"q\": parseQuarter,\n      \"Q\": parseUnixTimestamp,\n      \"s\": parseUnixTimestampSeconds,\n      \"S\": parseSeconds,\n      \"u\": parseWeekdayNumberMonday,\n      \"U\": parseWeekNumberSunday,\n      \"V\": parseWeekNumberISO,\n      \"w\": parseWeekdayNumberSunday,\n      \"W\": parseWeekNumberMonday,\n      \"x\": parseLocaleDate,\n      \"X\": parseLocaleTime,\n      \"y\": parseYear,\n      \"Y\": parseFullYear,\n      \"Z\": parseZone,\n      \"%\": parseLiteralPercent\n    };\n\n    // These recursive directive definitions must be deferred.\n    formats.x = newFormat(locale_date, formats);\n    formats.X = newFormat(locale_time, formats);\n    formats.c = newFormat(locale_dateTime, formats);\n    utcFormats.x = newFormat(locale_date, utcFormats);\n    utcFormats.X = newFormat(locale_time, utcFormats);\n    utcFormats.c = newFormat(locale_dateTime, utcFormats);\n    function newFormat(specifier, formats) {\n      return function (date) {\n        var string = [],\n          i = -1,\n          j = 0,\n          n = specifier.length,\n          c,\n          pad,\n          format;\n        if (!(date instanceof Date)) date = new Date(+date);\n        while (++i < n) {\n          if (specifier.charCodeAt(i) === 37) {\n            string.push(specifier.slice(j, i));\n            if ((pad = pads[c = specifier.charAt(++i)]) != null) c = specifier.charAt(++i);else pad = c === \"e\" ? \" \" : \"0\";\n            if (format = formats[c]) c = format(date, pad);\n            string.push(c);\n            j = i + 1;\n          }\n        }\n        string.push(specifier.slice(j, i));\n        return string.join(\"\");\n      };\n    }\n    function newParse(specifier, Z) {\n      return function (string) {\n        var d = newDate(1900, undefined, 1),\n          i = parseSpecifier(d, specifier, string += \"\", 0),\n          week,\n          day$1;\n        if (i != string.length) return null;\n\n        // If a UNIX timestamp is specified, return it.\n        if (\"Q\" in d) return new Date(d.Q);\n        if (\"s\" in d) return new Date(d.s * 1000 + (\"L\" in d ? d.L : 0));\n\n        // If this is utcParse, never use the local timezone.\n        if (Z && !(\"Z\" in d)) d.Z = 0;\n\n        // The am-pm flag is 0 for AM, and 1 for PM.\n        if (\"p\" in d) d.H = d.H % 12 + d.p * 12;\n\n        // If the month was not specified, inherit from the quarter.\n        if (d.m === undefined) d.m = \"q\" in d ? d.q : 0;\n\n        // Convert day-of-week and week-of-year to day-of-year.\n        if (\"V\" in d) {\n          if (d.V < 1 || d.V > 53) return null;\n          if (!(\"w\" in d)) d.w = 1;\n          if (\"Z\" in d) {\n            week = utcDate(newDate(d.y, 0, 1)), day$1 = week.getUTCDay();\n            week = day$1 > 4 || day$1 === 0 ? utcMonday.ceil(week) : utcMonday(week);\n            week = utcDay.offset(week, (d.V - 1) * 7);\n            d.y = week.getUTCFullYear();\n            d.m = week.getUTCMonth();\n            d.d = week.getUTCDate() + (d.w + 6) % 7;\n          } else {\n            week = localDate(newDate(d.y, 0, 1)), day$1 = week.getDay();\n            week = day$1 > 4 || day$1 === 0 ? monday.ceil(week) : monday(week);\n            week = day.offset(week, (d.V - 1) * 7);\n            d.y = week.getFullYear();\n            d.m = week.getMonth();\n            d.d = week.getDate() + (d.w + 6) % 7;\n          }\n        } else if (\"W\" in d || \"U\" in d) {\n          if (!(\"w\" in d)) d.w = \"u\" in d ? d.u % 7 : \"W\" in d ? 1 : 0;\n          day$1 = \"Z\" in d ? utcDate(newDate(d.y, 0, 1)).getUTCDay() : localDate(newDate(d.y, 0, 1)).getDay();\n          d.m = 0;\n          d.d = \"W\" in d ? (d.w + 6) % 7 + d.W * 7 - (day$1 + 5) % 7 : d.w + d.U * 7 - (day$1 + 6) % 7;\n        }\n\n        // If a time zone is specified, all fields are interpreted as UTC and then\n        // offset according to the specified time zone.\n        if (\"Z\" in d) {\n          d.H += d.Z / 100 | 0;\n          d.M += d.Z % 100;\n          return utcDate(d);\n        }\n\n        // Otherwise, all fields are in local time.\n        return localDate(d);\n      };\n    }\n    function parseSpecifier(d, specifier, string, j) {\n      var i = 0,\n        n = specifier.length,\n        m = string.length,\n        c,\n        parse;\n      while (i < n) {\n        if (j >= m) return -1;\n        c = specifier.charCodeAt(i++);\n        if (c === 37) {\n          c = specifier.charAt(i++);\n          parse = parses[c in pads ? specifier.charAt(i++) : c];\n          if (!parse || (j = parse(d, string, j)) < 0) return -1;\n        } else if (c != string.charCodeAt(j++)) {\n          return -1;\n        }\n      }\n      return j;\n    }\n    function parsePeriod(d, string, i) {\n      var n = periodRe.exec(string.slice(i));\n      return n ? (d.p = periodLookup[n[0].toLowerCase()], i + n[0].length) : -1;\n    }\n    function parseShortWeekday(d, string, i) {\n      var n = shortWeekdayRe.exec(string.slice(i));\n      return n ? (d.w = shortWeekdayLookup[n[0].toLowerCase()], i + n[0].length) : -1;\n    }\n    function parseWeekday(d, string, i) {\n      var n = weekdayRe.exec(string.slice(i));\n      return n ? (d.w = weekdayLookup[n[0].toLowerCase()], i + n[0].length) : -1;\n    }\n    function parseShortMonth(d, string, i) {\n      var n = shortMonthRe.exec(string.slice(i));\n      return n ? (d.m = shortMonthLookup[n[0].toLowerCase()], i + n[0].length) : -1;\n    }\n    function parseMonth(d, string, i) {\n      var n = monthRe.exec(string.slice(i));\n      return n ? (d.m = monthLookup[n[0].toLowerCase()], i + n[0].length) : -1;\n    }\n    function parseLocaleDateTime(d, string, i) {\n      return parseSpecifier(d, locale_dateTime, string, i);\n    }\n    function parseLocaleDate(d, string, i) {\n      return parseSpecifier(d, locale_date, string, i);\n    }\n    function parseLocaleTime(d, string, i) {\n      return parseSpecifier(d, locale_time, string, i);\n    }\n    function formatShortWeekday(d) {\n      return locale_shortWeekdays[d.getDay()];\n    }\n    function formatWeekday(d) {\n      return locale_weekdays[d.getDay()];\n    }\n    function formatShortMonth(d) {\n      return locale_shortMonths[d.getMonth()];\n    }\n    function formatMonth(d) {\n      return locale_months[d.getMonth()];\n    }\n    function formatPeriod(d) {\n      return locale_periods[+(d.getHours() >= 12)];\n    }\n    function formatQuarter(d) {\n      return 1 + ~~(d.getMonth() / 3);\n    }\n    function formatUTCShortWeekday(d) {\n      return locale_shortWeekdays[d.getUTCDay()];\n    }\n    function formatUTCWeekday(d) {\n      return locale_weekdays[d.getUTCDay()];\n    }\n    function formatUTCShortMonth(d) {\n      return locale_shortMonths[d.getUTCMonth()];\n    }\n    function formatUTCMonth(d) {\n      return locale_months[d.getUTCMonth()];\n    }\n    function formatUTCPeriod(d) {\n      return locale_periods[+(d.getUTCHours() >= 12)];\n    }\n    function formatUTCQuarter(d) {\n      return 1 + ~~(d.getUTCMonth() / 3);\n    }\n    return {\n      format: function format(specifier) {\n        var f = newFormat(specifier += \"\", formats);\n        f.toString = function () {\n          return specifier;\n        };\n        return f;\n      },\n      parse: function parse(specifier) {\n        var p = newParse(specifier += \"\", false);\n        p.toString = function () {\n          return specifier;\n        };\n        return p;\n      },\n      utcFormat: function utcFormat(specifier) {\n        var f = newFormat(specifier += \"\", utcFormats);\n        f.toString = function () {\n          return specifier;\n        };\n        return f;\n      },\n      utcParse: function utcParse(specifier) {\n        var p = newParse(specifier += \"\", true);\n        p.toString = function () {\n          return specifier;\n        };\n        return p;\n      }\n    };\n  }\n  var pads = {\n      \"-\": \"\",\n      \"_\": \" \",\n      \"0\": \"0\"\n    },\n    numberRe = /^\\s*\\d+/,\n    // note: ignores next directive\n    percentRe = /^%/,\n    requoteRe = /[\\\\^$*+?|[\\]().{}]/g;\n  function pad(value, fill, width) {\n    var sign = value < 0 ? \"-\" : \"\",\n      string = (sign ? -value : value) + \"\",\n      length = string.length;\n    return sign + (length < width ? new Array(width - length + 1).join(fill) + string : string);\n  }\n  function requote(s) {\n    return s.replace(requoteRe, \"\\\\$&\");\n  }\n  function formatRe(names) {\n    return new RegExp(\"^(?:\" + names.map(requote).join(\"|\") + \")\", \"i\");\n  }\n  function formatLookup(names) {\n    var map = {},\n      i = -1,\n      n = names.length;\n    while (++i < n) map[names[i].toLowerCase()] = i;\n    return map;\n  }\n  function parseWeekdayNumberSunday(d, string, i) {\n    var n = numberRe.exec(string.slice(i, i + 1));\n    return n ? (d.w = +n[0], i + n[0].length) : -1;\n  }\n  function parseWeekdayNumberMonday(d, string, i) {\n    var n = numberRe.exec(string.slice(i, i + 1));\n    return n ? (d.u = +n[0], i + n[0].length) : -1;\n  }\n  function parseWeekNumberSunday(d, string, i) {\n    var n = numberRe.exec(string.slice(i, i + 2));\n    return n ? (d.U = +n[0], i + n[0].length) : -1;\n  }\n  function parseWeekNumberISO(d, string, i) {\n    var n = numberRe.exec(string.slice(i, i + 2));\n    return n ? (d.V = +n[0], i + n[0].length) : -1;\n  }\n  function parseWeekNumberMonday(d, string, i) {\n    var n = numberRe.exec(string.slice(i, i + 2));\n    return n ? (d.W = +n[0], i + n[0].length) : -1;\n  }\n  function parseFullYear(d, string, i) {\n    var n = numberRe.exec(string.slice(i, i + 4));\n    return n ? (d.y = +n[0], i + n[0].length) : -1;\n  }\n  function parseYear(d, string, i) {\n    var n = numberRe.exec(string.slice(i, i + 2));\n    return n ? (d.y = +n[0] + (+n[0] > 68 ? 1900 : 2000), i + n[0].length) : -1;\n  }\n  function parseZone(d, string, i) {\n    var n = /^(Z)|([+-]\\d\\d)(?::?(\\d\\d))?/.exec(string.slice(i, i + 6));\n    return n ? (d.Z = n[1] ? 0 : -(n[2] + (n[3] || \"00\")), i + n[0].length) : -1;\n  }\n  function parseQuarter(d, string, i) {\n    var n = numberRe.exec(string.slice(i, i + 1));\n    return n ? (d.q = n[0] * 3 - 3, i + n[0].length) : -1;\n  }\n  function parseMonthNumber(d, string, i) {\n    var n = numberRe.exec(string.slice(i, i + 2));\n    return n ? (d.m = n[0] - 1, i + n[0].length) : -1;\n  }\n  function parseDayOfMonth(d, string, i) {\n    var n = numberRe.exec(string.slice(i, i + 2));\n    return n ? (d.d = +n[0], i + n[0].length) : -1;\n  }\n  function parseDayOfYear(d, string, i) {\n    var n = numberRe.exec(string.slice(i, i + 3));\n    return n ? (d.m = 0, d.d = +n[0], i + n[0].length) : -1;\n  }\n  function parseHour24(d, string, i) {\n    var n = numberRe.exec(string.slice(i, i + 2));\n    return n ? (d.H = +n[0], i + n[0].length) : -1;\n  }\n  function parseMinutes(d, string, i) {\n    var n = numberRe.exec(string.slice(i, i + 2));\n    return n ? (d.M = +n[0], i + n[0].length) : -1;\n  }\n  function parseSeconds(d, string, i) {\n    var n = numberRe.exec(string.slice(i, i + 2));\n    return n ? (d.S = +n[0], i + n[0].length) : -1;\n  }\n  function parseMilliseconds(d, string, i) {\n    var n = numberRe.exec(string.slice(i, i + 3));\n    return n ? (d.L = +n[0], i + n[0].length) : -1;\n  }\n  function parseMicroseconds(d, string, i) {\n    var n = numberRe.exec(string.slice(i, i + 6));\n    return n ? (d.L = Math.floor(n[0] / 1000), i + n[0].length) : -1;\n  }\n  function parseLiteralPercent(d, string, i) {\n    var n = percentRe.exec(string.slice(i, i + 1));\n    return n ? i + n[0].length : -1;\n  }\n  function parseUnixTimestamp(d, string, i) {\n    var n = numberRe.exec(string.slice(i));\n    return n ? (d.Q = +n[0], i + n[0].length) : -1;\n  }\n  function parseUnixTimestampSeconds(d, string, i) {\n    var n = numberRe.exec(string.slice(i));\n    return n ? (d.s = +n[0], i + n[0].length) : -1;\n  }\n  function formatDayOfMonth(d, p) {\n    return pad(d.getDate(), p, 2);\n  }\n  function formatHour24(d, p) {\n    return pad(d.getHours(), p, 2);\n  }\n  function formatHour12(d, p) {\n    return pad(d.getHours() % 12 || 12, p, 2);\n  }\n  function formatDayOfYear(d, p) {\n    return pad(1 + day.count(year(d), d), p, 3);\n  }\n  function formatMilliseconds(d, p) {\n    return pad(d.getMilliseconds(), p, 3);\n  }\n  function formatMicroseconds(d, p) {\n    return formatMilliseconds(d, p) + \"000\";\n  }\n  function formatMonthNumber(d, p) {\n    return pad(d.getMonth() + 1, p, 2);\n  }\n  function formatMinutes(d, p) {\n    return pad(d.getMinutes(), p, 2);\n  }\n  function formatSeconds(d, p) {\n    return pad(d.getSeconds(), p, 2);\n  }\n  function formatWeekdayNumberMonday(d) {\n    var day = d.getDay();\n    return day === 0 ? 7 : day;\n  }\n  function formatWeekNumberSunday(d, p) {\n    return pad(sunday.count(year(d) - 1, d), p, 2);\n  }\n  function formatWeekNumberISO(d, p) {\n    var day = d.getDay();\n    d = day >= 4 || day === 0 ? thursday(d) : thursday.ceil(d);\n    return pad(thursday.count(year(d), d) + (year(d).getDay() === 4), p, 2);\n  }\n  function formatWeekdayNumberSunday(d) {\n    return d.getDay();\n  }\n  function formatWeekNumberMonday(d, p) {\n    return pad(monday.count(year(d) - 1, d), p, 2);\n  }\n  function formatYear(d, p) {\n    return pad(d.getFullYear() % 100, p, 2);\n  }\n  function formatFullYear(d, p) {\n    return pad(d.getFullYear() % 10000, p, 4);\n  }\n  function formatZone(d) {\n    var z = d.getTimezoneOffset();\n    return (z > 0 ? \"-\" : (z *= -1, \"+\")) + pad(z / 60 | 0, \"0\", 2) + pad(z % 60, \"0\", 2);\n  }\n  function formatUTCDayOfMonth(d, p) {\n    return pad(d.getUTCDate(), p, 2);\n  }\n  function formatUTCHour24(d, p) {\n    return pad(d.getUTCHours(), p, 2);\n  }\n  function formatUTCHour12(d, p) {\n    return pad(d.getUTCHours() % 12 || 12, p, 2);\n  }\n  function formatUTCDayOfYear(d, p) {\n    return pad(1 + utcDay.count(utcYear(d), d), p, 3);\n  }\n  function formatUTCMilliseconds(d, p) {\n    return pad(d.getUTCMilliseconds(), p, 3);\n  }\n  function formatUTCMicroseconds(d, p) {\n    return formatUTCMilliseconds(d, p) + \"000\";\n  }\n  function formatUTCMonthNumber(d, p) {\n    return pad(d.getUTCMonth() + 1, p, 2);\n  }\n  function formatUTCMinutes(d, p) {\n    return pad(d.getUTCMinutes(), p, 2);\n  }\n  function formatUTCSeconds(d, p) {\n    return pad(d.getUTCSeconds(), p, 2);\n  }\n  function formatUTCWeekdayNumberMonday(d) {\n    var dow = d.getUTCDay();\n    return dow === 0 ? 7 : dow;\n  }\n  function formatUTCWeekNumberSunday(d, p) {\n    return pad(utcSunday.count(utcYear(d) - 1, d), p, 2);\n  }\n  function formatUTCWeekNumberISO(d, p) {\n    var day = d.getUTCDay();\n    d = day >= 4 || day === 0 ? utcThursday(d) : utcThursday.ceil(d);\n    return pad(utcThursday.count(utcYear(d), d) + (utcYear(d).getUTCDay() === 4), p, 2);\n  }\n  function formatUTCWeekdayNumberSunday(d) {\n    return d.getUTCDay();\n  }\n  function formatUTCWeekNumberMonday(d, p) {\n    return pad(utcMonday.count(utcYear(d) - 1, d), p, 2);\n  }\n  function formatUTCYear(d, p) {\n    return pad(d.getUTCFullYear() % 100, p, 2);\n  }\n  function formatUTCFullYear(d, p) {\n    return pad(d.getUTCFullYear() % 10000, p, 4);\n  }\n  function formatUTCZone() {\n    return \"+0000\";\n  }\n  function formatLiteralPercent() {\n    return \"%\";\n  }\n  function formatUnixTimestamp(d) {\n    return +d;\n  }\n  function formatUnixTimestampSeconds(d) {\n    return Math.floor(+d / 1000);\n  }\n  var locale$1;\n  var timeFormat;\n  var timeParse;\n  var utcFormat;\n  var utcParse;\n  defaultLocale$1({\n    dateTime: \"%x, %X\",\n    date: \"%-m/%-d/%Y\",\n    time: \"%-I:%M:%S %p\",\n    periods: [\"AM\", \"PM\"],\n    days: [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"],\n    shortDays: [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"],\n    months: [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"],\n    shortMonths: [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"]\n  });\n  function defaultLocale$1(definition) {\n    locale$1 = formatLocale$1(definition);\n    timeFormat = locale$1.format;\n    timeParse = locale$1.parse;\n    utcFormat = locale$1.utcFormat;\n    utcParse = locale$1.utcParse;\n    return locale$1;\n  }\n  var isoSpecifier = \"%Y-%m-%dT%H:%M:%S.%LZ\";\n  function formatIsoNative(date) {\n    return date.toISOString();\n  }\n  var formatIso = Date.prototype.toISOString ? formatIsoNative : utcFormat(isoSpecifier);\n  function parseIsoNative(string) {\n    var date = new Date(string);\n    return isNaN(date) ? null : date;\n  }\n  var parseIso = +new Date(\"2000-01-01T00:00:00.000Z\") ? parseIsoNative : utcParse(isoSpecifier);\n  var noop = {\n    value: function value() {}\n  };\n  function dispatch() {\n    for (var i = 0, n = arguments.length, _ = {}, t; i < n; ++i) {\n      if (!(t = arguments[i] + \"\") || t in _ || /[\\s.]/.test(t)) throw new Error(\"illegal type: \" + t);\n      _[t] = [];\n    }\n    return new Dispatch(_);\n  }\n  function Dispatch(_) {\n    this._ = _;\n  }\n  function parseTypenames(typenames, types) {\n    return typenames.trim().split(/^|\\s+/).map(function (t) {\n      var name = \"\",\n        i = t.indexOf(\".\");\n      if (i >= 0) name = t.slice(i + 1), t = t.slice(0, i);\n      if (t && !types.hasOwnProperty(t)) throw new Error(\"unknown type: \" + t);\n      return {\n        type: t,\n        name: name\n      };\n    });\n  }\n  Dispatch.prototype = dispatch.prototype = {\n    constructor: Dispatch,\n    on: function on(typename, callback) {\n      var _ = this._,\n        T = parseTypenames(typename + \"\", _),\n        t,\n        i = -1,\n        n = T.length;\n\n      // If no callback was specified, return the callback of the given type and name.\n      if (arguments.length < 2) {\n        while (++i < n) if ((t = (typename = T[i]).type) && (t = get(_[t], typename.name))) return t;\n        return;\n      }\n\n      // If a type was specified, set the callback for the given type and name.\n      // Otherwise, if a null callback was specified, remove callbacks of the given name.\n      if (callback != null && typeof callback !== \"function\") throw new Error(\"invalid callback: \" + callback);\n      while (++i < n) {\n        if (t = (typename = T[i]).type) _[t] = set(_[t], typename.name, callback);else if (callback == null) for (t in _) _[t] = set(_[t], typename.name, null);\n      }\n      return this;\n    },\n    copy: function copy() {\n      var copy = {},\n        _ = this._;\n      for (var t in _) copy[t] = _[t].slice();\n      return new Dispatch(copy);\n    },\n    call: function call(type, that) {\n      if ((n = arguments.length - 2) > 0) for (var args = new Array(n), i = 0, n, t; i < n; ++i) args[i] = arguments[i + 2];\n      if (!this._.hasOwnProperty(type)) throw new Error(\"unknown type: \" + type);\n      for (t = this._[type], i = 0, n = t.length; i < n; ++i) t[i].value.apply(that, args);\n    },\n    apply: function apply(type, that, args) {\n      if (!this._.hasOwnProperty(type)) throw new Error(\"unknown type: \" + type);\n      for (var t = this._[type], i = 0, n = t.length; i < n; ++i) t[i].value.apply(that, args);\n    }\n  };\n  function get(type, name) {\n    for (var i = 0, n = type.length, c; i < n; ++i) {\n      if ((c = type[i]).name === name) {\n        return c.value;\n      }\n    }\n  }\n  function set(type, name, callback) {\n    for (var i = 0, n = type.length; i < n; ++i) {\n      if (type[i].name === name) {\n        type[i] = noop, type = type.slice(0, i).concat(type.slice(i + 1));\n        break;\n      }\n    }\n    if (callback != null) type.push({\n      name: name,\n      value: callback\n    });\n    return type;\n  }\n  var xhtml = \"http://www.w3.org/1999/xhtml\";\n  var namespaces = {\n    svg: \"http://www.w3.org/2000/svg\",\n    xhtml: xhtml,\n    xlink: \"http://www.w3.org/1999/xlink\",\n    xml: \"http://www.w3.org/XML/1998/namespace\",\n    xmlns: \"http://www.w3.org/2000/xmlns/\"\n  };\n  function namespace(name) {\n    var prefix = name += \"\",\n      i = prefix.indexOf(\":\");\n    if (i >= 0 && (prefix = name.slice(0, i)) !== \"xmlns\") name = name.slice(i + 1);\n    return namespaces.hasOwnProperty(prefix) ? {\n      space: namespaces[prefix],\n      local: name\n    } : name;\n  }\n  function creatorInherit(name) {\n    return function () {\n      var document = this.ownerDocument,\n        uri = this.namespaceURI;\n      return uri === xhtml && document.documentElement.namespaceURI === xhtml ? document.createElement(name) : document.createElementNS(uri, name);\n    };\n  }\n  function creatorFixed(fullname) {\n    return function () {\n      return this.ownerDocument.createElementNS(fullname.space, fullname.local);\n    };\n  }\n  function creator(name) {\n    var fullname = namespace(name);\n    return (fullname.local ? creatorFixed : creatorInherit)(fullname);\n  }\n  function none() {}\n  function selector(selector) {\n    return selector == null ? none : function () {\n      return this.querySelector(selector);\n    };\n  }\n  function selection_select(select) {\n    if (typeof select !== \"function\") select = selector(select);\n    for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {\n      for (var group = groups[j], n = group.length, subgroup = subgroups[j] = new Array(n), node, subnode, i = 0; i < n; ++i) {\n        if ((node = group[i]) && (subnode = select.call(node, node.__data__, i, group))) {\n          if (\"__data__\" in node) subnode.__data__ = node.__data__;\n          subgroup[i] = subnode;\n        }\n      }\n    }\n    return new Selection(subgroups, this._parents);\n  }\n  function empty() {\n    return [];\n  }\n  function selectorAll(selector) {\n    return selector == null ? empty : function () {\n      return this.querySelectorAll(selector);\n    };\n  }\n  function selection_selectAll(select) {\n    if (typeof select !== \"function\") select = selectorAll(select);\n    for (var groups = this._groups, m = groups.length, subgroups = [], parents = [], j = 0; j < m; ++j) {\n      for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {\n        if (node = group[i]) {\n          subgroups.push(select.call(node, node.__data__, i, group));\n          parents.push(node);\n        }\n      }\n    }\n    return new Selection(subgroups, parents);\n  }\n  function matcher(selector) {\n    return function () {\n      return this.matches(selector);\n    };\n  }\n  function selection_filter(match) {\n    if (typeof match !== \"function\") match = matcher(match);\n    for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {\n      for (var group = groups[j], n = group.length, subgroup = subgroups[j] = [], node, i = 0; i < n; ++i) {\n        if ((node = group[i]) && match.call(node, node.__data__, i, group)) {\n          subgroup.push(node);\n        }\n      }\n    }\n    return new Selection(subgroups, this._parents);\n  }\n  function sparse(update) {\n    return new Array(update.length);\n  }\n  function selection_enter() {\n    return new Selection(this._enter || this._groups.map(sparse), this._parents);\n  }\n  function EnterNode(parent, datum) {\n    this.ownerDocument = parent.ownerDocument;\n    this.namespaceURI = parent.namespaceURI;\n    this._next = null;\n    this._parent = parent;\n    this.__data__ = datum;\n  }\n  EnterNode.prototype = {\n    constructor: EnterNode,\n    appendChild: function appendChild(child) {\n      return this._parent.insertBefore(child, this._next);\n    },\n    insertBefore: function insertBefore(child, next) {\n      return this._parent.insertBefore(child, next);\n    },\n    querySelector: function querySelector(selector) {\n      return this._parent.querySelector(selector);\n    },\n    querySelectorAll: function querySelectorAll(selector) {\n      return this._parent.querySelectorAll(selector);\n    }\n  };\n  function constant$2(x) {\n    return function () {\n      return x;\n    };\n  }\n  var keyPrefix = \"$\"; // Protect against keys like “__proto__”.\n\n  function bindIndex(parent, group, enter, update, exit, data) {\n    var i = 0,\n      node,\n      groupLength = group.length,\n      dataLength = data.length;\n\n    // Put any non-null nodes that fit into update.\n    // Put any null nodes into enter.\n    // Put any remaining data into enter.\n    for (; i < dataLength; ++i) {\n      if (node = group[i]) {\n        node.__data__ = data[i];\n        update[i] = node;\n      } else {\n        enter[i] = new EnterNode(parent, data[i]);\n      }\n    }\n\n    // Put any non-null nodes that don’t fit into exit.\n    for (; i < groupLength; ++i) {\n      if (node = group[i]) {\n        exit[i] = node;\n      }\n    }\n  }\n  function bindKey(parent, group, enter, update, exit, data, key) {\n    var i,\n      node,\n      nodeByKeyValue = {},\n      groupLength = group.length,\n      dataLength = data.length,\n      keyValues = new Array(groupLength),\n      keyValue;\n\n    // Compute the key for each node.\n    // If multiple nodes have the same key, the duplicates are added to exit.\n    for (i = 0; i < groupLength; ++i) {\n      if (node = group[i]) {\n        keyValues[i] = keyValue = keyPrefix + key.call(node, node.__data__, i, group);\n        if (keyValue in nodeByKeyValue) {\n          exit[i] = node;\n        } else {\n          nodeByKeyValue[keyValue] = node;\n        }\n      }\n    }\n\n    // Compute the key for each datum.\n    // If there a node associated with this key, join and add it to update.\n    // If there is not (or the key is a duplicate), add it to enter.\n    for (i = 0; i < dataLength; ++i) {\n      keyValue = keyPrefix + key.call(parent, data[i], i, data);\n      if (node = nodeByKeyValue[keyValue]) {\n        update[i] = node;\n        node.__data__ = data[i];\n        nodeByKeyValue[keyValue] = null;\n      } else {\n        enter[i] = new EnterNode(parent, data[i]);\n      }\n    }\n\n    // Add any remaining nodes that were not bound to data to exit.\n    for (i = 0; i < groupLength; ++i) {\n      if ((node = group[i]) && nodeByKeyValue[keyValues[i]] === node) {\n        exit[i] = node;\n      }\n    }\n  }\n  function selection_data(value, key) {\n    if (!value) {\n      data = new Array(this.size()), j = -1;\n      this.each(function (d) {\n        data[++j] = d;\n      });\n      return data;\n    }\n    var bind = key ? bindKey : bindIndex,\n      parents = this._parents,\n      groups = this._groups;\n    if (typeof value !== \"function\") value = constant$2(value);\n    for (var m = groups.length, update = new Array(m), enter = new Array(m), exit = new Array(m), j = 0; j < m; ++j) {\n      var parent = parents[j],\n        group = groups[j],\n        groupLength = group.length,\n        data = value.call(parent, parent && parent.__data__, j, parents),\n        dataLength = data.length,\n        enterGroup = enter[j] = new Array(dataLength),\n        updateGroup = update[j] = new Array(dataLength),\n        exitGroup = exit[j] = new Array(groupLength);\n      bind(parent, group, enterGroup, updateGroup, exitGroup, data, key);\n\n      // Now connect the enter nodes to their following update node, such that\n      // appendChild can insert the materialized enter node before this node,\n      // rather than at the end of the parent node.\n      for (var i0 = 0, i1 = 0, previous, next; i0 < dataLength; ++i0) {\n        if (previous = enterGroup[i0]) {\n          if (i0 >= i1) i1 = i0 + 1;\n          while (!(next = updateGroup[i1]) && ++i1 < dataLength);\n          previous._next = next || null;\n        }\n      }\n    }\n    update = new Selection(update, parents);\n    update._enter = enter;\n    update._exit = exit;\n    return update;\n  }\n  function selection_exit() {\n    return new Selection(this._exit || this._groups.map(sparse), this._parents);\n  }\n  function selection_join(onenter, onupdate, onexit) {\n    var enter = this.enter(),\n      update = this,\n      exit = this.exit();\n    enter = typeof onenter === \"function\" ? onenter(enter) : enter.append(onenter + \"\");\n    if (onupdate != null) update = onupdate(update);\n    if (onexit == null) exit.remove();else onexit(exit);\n    return enter && update ? enter.merge(update).order() : update;\n  }\n  function selection_merge(selection) {\n    for (var groups0 = this._groups, groups1 = selection._groups, m0 = groups0.length, m1 = groups1.length, m = Math.min(m0, m1), merges = new Array(m0), j = 0; j < m; ++j) {\n      for (var group0 = groups0[j], group1 = groups1[j], n = group0.length, merge = merges[j] = new Array(n), node, i = 0; i < n; ++i) {\n        if (node = group0[i] || group1[i]) {\n          merge[i] = node;\n        }\n      }\n    }\n    for (; j < m0; ++j) {\n      merges[j] = groups0[j];\n    }\n    return new Selection(merges, this._parents);\n  }\n  function selection_order() {\n    for (var groups = this._groups, j = -1, m = groups.length; ++j < m;) {\n      for (var group = groups[j], i = group.length - 1, next = group[i], node; --i >= 0;) {\n        if (node = group[i]) {\n          if (next && node.compareDocumentPosition(next) ^ 4) next.parentNode.insertBefore(node, next);\n          next = node;\n        }\n      }\n    }\n    return this;\n  }\n  function selection_sort(compare) {\n    if (!compare) compare = ascending$1;\n    function compareNode(a, b) {\n      return a && b ? compare(a.__data__, b.__data__) : !a - !b;\n    }\n    for (var groups = this._groups, m = groups.length, sortgroups = new Array(m), j = 0; j < m; ++j) {\n      for (var group = groups[j], n = group.length, sortgroup = sortgroups[j] = new Array(n), node, i = 0; i < n; ++i) {\n        if (node = group[i]) {\n          sortgroup[i] = node;\n        }\n      }\n      sortgroup.sort(compareNode);\n    }\n    return new Selection(sortgroups, this._parents).order();\n  }\n  function ascending$1(a, b) {\n    return a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;\n  }\n  function selection_call() {\n    var callback = arguments[0];\n    arguments[0] = this;\n    callback.apply(null, arguments);\n    return this;\n  }\n  function selection_nodes() {\n    var nodes = new Array(this.size()),\n      i = -1;\n    this.each(function () {\n      nodes[++i] = this;\n    });\n    return nodes;\n  }\n  function selection_node() {\n    for (var groups = this._groups, j = 0, m = groups.length; j < m; ++j) {\n      for (var group = groups[j], i = 0, n = group.length; i < n; ++i) {\n        var node = group[i];\n        if (node) return node;\n      }\n    }\n    return null;\n  }\n  function selection_size() {\n    var size = 0;\n    this.each(function () {\n      ++size;\n    });\n    return size;\n  }\n  function selection_empty() {\n    return !this.node();\n  }\n  function selection_each(callback) {\n    for (var groups = this._groups, j = 0, m = groups.length; j < m; ++j) {\n      for (var group = groups[j], i = 0, n = group.length, node; i < n; ++i) {\n        if (node = group[i]) callback.call(node, node.__data__, i, group);\n      }\n    }\n    return this;\n  }\n  function attrRemove(name) {\n    return function () {\n      this.removeAttribute(name);\n    };\n  }\n  function attrRemoveNS(fullname) {\n    return function () {\n      this.removeAttributeNS(fullname.space, fullname.local);\n    };\n  }\n  function attrConstant(name, value) {\n    return function () {\n      this.setAttribute(name, value);\n    };\n  }\n  function attrConstantNS(fullname, value) {\n    return function () {\n      this.setAttributeNS(fullname.space, fullname.local, value);\n    };\n  }\n  function attrFunction(name, value) {\n    return function () {\n      var v = value.apply(this, arguments);\n      if (v == null) this.removeAttribute(name);else this.setAttribute(name, v);\n    };\n  }\n  function attrFunctionNS(fullname, value) {\n    return function () {\n      var v = value.apply(this, arguments);\n      if (v == null) this.removeAttributeNS(fullname.space, fullname.local);else this.setAttributeNS(fullname.space, fullname.local, v);\n    };\n  }\n  function selection_attr(name, value) {\n    var fullname = namespace(name);\n    if (arguments.length < 2) {\n      var node = this.node();\n      return fullname.local ? node.getAttributeNS(fullname.space, fullname.local) : node.getAttribute(fullname);\n    }\n    return this.each((value == null ? fullname.local ? attrRemoveNS : attrRemove : typeof value === \"function\" ? fullname.local ? attrFunctionNS : attrFunction : fullname.local ? attrConstantNS : attrConstant)(fullname, value));\n  }\n  function defaultView(node) {\n    return node.ownerDocument && node.ownerDocument.defaultView // node is a Node\n    || node.document && node // node is a Window\n    || node.defaultView; // node is a Document\n  }\n  function styleRemove(name) {\n    return function () {\n      this.style.removeProperty(name);\n    };\n  }\n  function styleConstant(name, value, priority) {\n    return function () {\n      this.style.setProperty(name, value, priority);\n    };\n  }\n  function styleFunction(name, value, priority) {\n    return function () {\n      var v = value.apply(this, arguments);\n      if (v == null) this.style.removeProperty(name);else this.style.setProperty(name, v, priority);\n    };\n  }\n  function selection_style(name, value, priority) {\n    return arguments.length > 1 ? this.each((value == null ? styleRemove : typeof value === \"function\" ? styleFunction : styleConstant)(name, value, priority == null ? \"\" : priority)) : styleValue(this.node(), name);\n  }\n  function styleValue(node, name) {\n    return node.style.getPropertyValue(name) || defaultView(node).getComputedStyle(node, null).getPropertyValue(name);\n  }\n  function propertyRemove(name) {\n    return function () {\n      delete this[name];\n    };\n  }\n  function propertyConstant(name, value) {\n    return function () {\n      this[name] = value;\n    };\n  }\n  function propertyFunction(name, value) {\n    return function () {\n      var v = value.apply(this, arguments);\n      if (v == null) delete this[name];else this[name] = v;\n    };\n  }\n  function selection_property(name, value) {\n    return arguments.length > 1 ? this.each((value == null ? propertyRemove : typeof value === \"function\" ? propertyFunction : propertyConstant)(name, value)) : this.node()[name];\n  }\n  function classArray(string) {\n    return string.trim().split(/^|\\s+/);\n  }\n  function classList(node) {\n    return node.classList || new ClassList(node);\n  }\n  function ClassList(node) {\n    this._node = node;\n    this._names = classArray(node.getAttribute(\"class\") || \"\");\n  }\n  ClassList.prototype = {\n    add: function add(name) {\n      var i = this._names.indexOf(name);\n      if (i < 0) {\n        this._names.push(name);\n        this._node.setAttribute(\"class\", this._names.join(\" \"));\n      }\n    },\n    remove: function remove(name) {\n      var i = this._names.indexOf(name);\n      if (i >= 0) {\n        this._names.splice(i, 1);\n        this._node.setAttribute(\"class\", this._names.join(\" \"));\n      }\n    },\n    contains: function contains(name) {\n      return this._names.indexOf(name) >= 0;\n    }\n  };\n  function classedAdd(node, names) {\n    var list = classList(node),\n      i = -1,\n      n = names.length;\n    while (++i < n) list.add(names[i]);\n  }\n  function classedRemove(node, names) {\n    var list = classList(node),\n      i = -1,\n      n = names.length;\n    while (++i < n) list.remove(names[i]);\n  }\n  function classedTrue(names) {\n    return function () {\n      classedAdd(this, names);\n    };\n  }\n  function classedFalse(names) {\n    return function () {\n      classedRemove(this, names);\n    };\n  }\n  function classedFunction(names, value) {\n    return function () {\n      (value.apply(this, arguments) ? classedAdd : classedRemove)(this, names);\n    };\n  }\n  function selection_classed(name, value) {\n    var names = classArray(name + \"\");\n    if (arguments.length < 2) {\n      var list = classList(this.node()),\n        i = -1,\n        n = names.length;\n      while (++i < n) if (!list.contains(names[i])) return false;\n      return true;\n    }\n    return this.each((typeof value === \"function\" ? classedFunction : value ? classedTrue : classedFalse)(names, value));\n  }\n  function textRemove() {\n    this.textContent = \"\";\n  }\n  function textConstant(value) {\n    return function () {\n      this.textContent = value;\n    };\n  }\n  function textFunction(value) {\n    return function () {\n      var v = value.apply(this, arguments);\n      this.textContent = v == null ? \"\" : v;\n    };\n  }\n  function selection_text(value) {\n    return arguments.length ? this.each(value == null ? textRemove : (typeof value === \"function\" ? textFunction : textConstant)(value)) : this.node().textContent;\n  }\n  function htmlRemove() {\n    this.innerHTML = \"\";\n  }\n  function htmlConstant(value) {\n    return function () {\n      this.innerHTML = value;\n    };\n  }\n  function htmlFunction(value) {\n    return function () {\n      var v = value.apply(this, arguments);\n      this.innerHTML = v == null ? \"\" : v;\n    };\n  }\n  function selection_html(value) {\n    return arguments.length ? this.each(value == null ? htmlRemove : (typeof value === \"function\" ? htmlFunction : htmlConstant)(value)) : this.node().innerHTML;\n  }\n  function raise() {\n    if (this.nextSibling) this.parentNode.appendChild(this);\n  }\n  function selection_raise() {\n    return this.each(raise);\n  }\n  function lower() {\n    if (this.previousSibling) this.parentNode.insertBefore(this, this.parentNode.firstChild);\n  }\n  function selection_lower() {\n    return this.each(lower);\n  }\n  function selection_append(name) {\n    var create = typeof name === \"function\" ? name : creator(name);\n    return this.select(function () {\n      return this.appendChild(create.apply(this, arguments));\n    });\n  }\n  function constantNull() {\n    return null;\n  }\n  function selection_insert(name, before) {\n    var create = typeof name === \"function\" ? name : creator(name),\n      select = before == null ? constantNull : typeof before === \"function\" ? before : selector(before);\n    return this.select(function () {\n      return this.insertBefore(create.apply(this, arguments), select.apply(this, arguments) || null);\n    });\n  }\n  function remove() {\n    var parent = this.parentNode;\n    if (parent) parent.removeChild(this);\n  }\n  function selection_remove() {\n    return this.each(remove);\n  }\n  function selection_cloneShallow() {\n    var clone = this.cloneNode(false),\n      parent = this.parentNode;\n    return parent ? parent.insertBefore(clone, this.nextSibling) : clone;\n  }\n  function selection_cloneDeep() {\n    var clone = this.cloneNode(true),\n      parent = this.parentNode;\n    return parent ? parent.insertBefore(clone, this.nextSibling) : clone;\n  }\n  function selection_clone(deep) {\n    return this.select(deep ? selection_cloneDeep : selection_cloneShallow);\n  }\n  function selection_datum(value) {\n    return arguments.length ? this.property(\"__data__\", value) : this.node().__data__;\n  }\n  var filterEvents = {};\n  var event = null;\n  if (typeof document !== \"undefined\") {\n    var element = document.documentElement;\n    if (!(\"onmouseenter\" in element)) {\n      filterEvents = {\n        mouseenter: \"mouseover\",\n        mouseleave: \"mouseout\"\n      };\n    }\n  }\n  function filterContextListener(listener, index, group) {\n    listener = contextListener(listener, index, group);\n    return function (event) {\n      var related = event.relatedTarget;\n      if (!related || related !== this && !(related.compareDocumentPosition(this) & 8)) {\n        listener.call(this, event);\n      }\n    };\n  }\n  function contextListener(listener, index, group) {\n    return function (event1) {\n      var event0 = event; // Events can be reentrant (e.g., focus).\n      event = event1;\n      try {\n        listener.call(this, this.__data__, index, group);\n      } finally {\n        event = event0;\n      }\n    };\n  }\n  function parseTypenames$1(typenames) {\n    return typenames.trim().split(/^|\\s+/).map(function (t) {\n      var name = \"\",\n        i = t.indexOf(\".\");\n      if (i >= 0) name = t.slice(i + 1), t = t.slice(0, i);\n      return {\n        type: t,\n        name: name\n      };\n    });\n  }\n  function onRemove(typename) {\n    return function () {\n      var on = this.__on;\n      if (!on) return;\n      for (var j = 0, i = -1, m = on.length, o; j < m; ++j) {\n        if (o = on[j], (!typename.type || o.type === typename.type) && o.name === typename.name) {\n          this.removeEventListener(o.type, o.listener, o.capture);\n        } else {\n          on[++i] = o;\n        }\n      }\n      if (++i) on.length = i;else delete this.__on;\n    };\n  }\n  function onAdd(typename, value, capture) {\n    var wrap = filterEvents.hasOwnProperty(typename.type) ? filterContextListener : contextListener;\n    return function (d, i, group) {\n      var on = this.__on,\n        o,\n        listener = wrap(value, i, group);\n      if (on) for (var j = 0, m = on.length; j < m; ++j) {\n        if ((o = on[j]).type === typename.type && o.name === typename.name) {\n          this.removeEventListener(o.type, o.listener, o.capture);\n          this.addEventListener(o.type, o.listener = listener, o.capture = capture);\n          o.value = value;\n          return;\n        }\n      }\n      this.addEventListener(typename.type, listener, capture);\n      o = {\n        type: typename.type,\n        name: typename.name,\n        value: value,\n        listener: listener,\n        capture: capture\n      };\n      if (!on) this.__on = [o];else on.push(o);\n    };\n  }\n  function selection_on(typename, value, capture) {\n    var typenames = parseTypenames$1(typename + \"\"),\n      i,\n      n = typenames.length,\n      t;\n    if (arguments.length < 2) {\n      var on = this.node().__on;\n      if (on) for (var j = 0, m = on.length, o; j < m; ++j) {\n        for (i = 0, o = on[j]; i < n; ++i) {\n          if ((t = typenames[i]).type === o.type && t.name === o.name) {\n            return o.value;\n          }\n        }\n      }\n      return;\n    }\n    on = value ? onAdd : onRemove;\n    if (capture == null) capture = false;\n    for (i = 0; i < n; ++i) this.each(on(typenames[i], value, capture));\n    return this;\n  }\n  function customEvent(event1, listener, that, args) {\n    var event0 = event;\n    event1.sourceEvent = event;\n    event = event1;\n    try {\n      return listener.apply(that, args);\n    } finally {\n      event = event0;\n    }\n  }\n  function dispatchEvent(node, type, params) {\n    var window = defaultView(node),\n      event = window.CustomEvent;\n    if (typeof event === \"function\") {\n      event = new event(type, params);\n    } else {\n      event = window.document.createEvent(\"Event\");\n      if (params) event.initEvent(type, params.bubbles, params.cancelable), event.detail = params.detail;else event.initEvent(type, false, false);\n    }\n    node.dispatchEvent(event);\n  }\n  function dispatchConstant(type, params) {\n    return function () {\n      return dispatchEvent(this, type, params);\n    };\n  }\n  function dispatchFunction(type, params) {\n    return function () {\n      return dispatchEvent(this, type, params.apply(this, arguments));\n    };\n  }\n  function selection_dispatch(type, params) {\n    return this.each((typeof params === \"function\" ? dispatchFunction : dispatchConstant)(type, params));\n  }\n  var root = [null];\n  function Selection(groups, parents) {\n    this._groups = groups;\n    this._parents = parents;\n  }\n  function selection() {\n    return new Selection([[document.documentElement]], root);\n  }\n  Selection.prototype = selection.prototype = {\n    constructor: Selection,\n    select: selection_select,\n    selectAll: selection_selectAll,\n    filter: selection_filter,\n    data: selection_data,\n    enter: selection_enter,\n    exit: selection_exit,\n    join: selection_join,\n    merge: selection_merge,\n    order: selection_order,\n    sort: selection_sort,\n    call: selection_call,\n    nodes: selection_nodes,\n    node: selection_node,\n    size: selection_size,\n    empty: selection_empty,\n    each: selection_each,\n    attr: selection_attr,\n    style: selection_style,\n    property: selection_property,\n    classed: selection_classed,\n    text: selection_text,\n    html: selection_html,\n    raise: selection_raise,\n    lower: selection_lower,\n    append: selection_append,\n    insert: selection_insert,\n    remove: selection_remove,\n    clone: selection_clone,\n    datum: selection_datum,\n    on: selection_on,\n    dispatch: selection_dispatch\n  };\n  function select(selector) {\n    return typeof selector === \"string\" ? new Selection([[document.querySelector(selector)]], [document.documentElement]) : new Selection([[selector]], root);\n  }\n  function sourceEvent() {\n    var current = event,\n      source;\n    while (source = current.sourceEvent) current = source;\n    return current;\n  }\n  function point(node, event) {\n    var svg = node.ownerSVGElement || node;\n    if (svg.createSVGPoint) {\n      var point = svg.createSVGPoint();\n      point.x = event.clientX, point.y = event.clientY;\n      point = point.matrixTransform(node.getScreenCTM().inverse());\n      return [point.x, point.y];\n    }\n    var rect = node.getBoundingClientRect();\n    return [event.clientX - rect.left - node.clientLeft, event.clientY - rect.top - node.clientTop];\n  }\n  function mouse(node) {\n    var event = sourceEvent();\n    if (event.changedTouches) event = event.changedTouches[0];\n    return point(node, event);\n  }\n  function touch(node, touches, identifier) {\n    if (arguments.length < 3) identifier = touches, touches = sourceEvent().changedTouches;\n    for (var i = 0, n = touches ? touches.length : 0, touch; i < n; ++i) {\n      if ((touch = touches[i]).identifier === identifier) {\n        return point(node, touch);\n      }\n    }\n    return null;\n  }\n  function nopropagation() {\n    event.stopImmediatePropagation();\n  }\n  function noevent() {\n    event.preventDefault();\n    event.stopImmediatePropagation();\n  }\n  function nodrag(view) {\n    var root = view.document.documentElement,\n      selection = select(view).on(\"dragstart.drag\", noevent, true);\n    if (\"onselectstart\" in root) {\n      selection.on(\"selectstart.drag\", noevent, true);\n    } else {\n      root.__noselect = root.style.MozUserSelect;\n      root.style.MozUserSelect = \"none\";\n    }\n  }\n  function yesdrag(view, noclick) {\n    var root = view.document.documentElement,\n      selection = select(view).on(\"dragstart.drag\", null);\n    if (noclick) {\n      selection.on(\"click.drag\", noevent, true);\n      setTimeout(function () {\n        selection.on(\"click.drag\", null);\n      }, 0);\n    }\n    if (\"onselectstart\" in root) {\n      selection.on(\"selectstart.drag\", null);\n    } else {\n      root.style.MozUserSelect = root.__noselect;\n      delete root.__noselect;\n    }\n  }\n  function constant$3(x) {\n    return function () {\n      return x;\n    };\n  }\n  function DragEvent(target, type, subject, id, active, x, y, dx, dy, dispatch) {\n    this.target = target;\n    this.type = type;\n    this.subject = subject;\n    this.identifier = id;\n    this.active = active;\n    this.x = x;\n    this.y = y;\n    this.dx = dx;\n    this.dy = dy;\n    this._ = dispatch;\n  }\n  DragEvent.prototype.on = function () {\n    var value = this._.on.apply(this._, arguments);\n    return value === this._ ? this : value;\n  };\n\n  // Ignore right-click, since that should open the context menu.\n  function defaultFilter() {\n    return !event.ctrlKey && !event.button;\n  }\n  function defaultContainer() {\n    return this.parentNode;\n  }\n  function defaultSubject(d) {\n    return d == null ? {\n      x: event.x,\n      y: event.y\n    } : d;\n  }\n  function defaultTouchable() {\n    return navigator.maxTouchPoints || \"ontouchstart\" in this;\n  }\n  function drag() {\n    var filter = defaultFilter,\n      container = defaultContainer,\n      subject = defaultSubject,\n      touchable = defaultTouchable,\n      gestures = {},\n      listeners = dispatch(\"start\", \"drag\", \"end\"),\n      active = 0,\n      mousedownx,\n      mousedowny,\n      mousemoving,\n      touchending,\n      clickDistance2 = 0;\n    function drag(selection) {\n      selection.on(\"mousedown.drag\", mousedowned).filter(touchable).on(\"touchstart.drag\", touchstarted).on(\"touchmove.drag\", touchmoved).on(\"touchend.drag touchcancel.drag\", touchended).style(\"touch-action\", \"none\").style(\"-webkit-tap-highlight-color\", \"rgba(0,0,0,0)\");\n    }\n    function mousedowned() {\n      if (touchending || !filter.apply(this, arguments)) return;\n      var gesture = beforestart(\"mouse\", container.apply(this, arguments), mouse, this, arguments);\n      if (!gesture) return;\n      select(event.view).on(\"mousemove.drag\", mousemoved, true).on(\"mouseup.drag\", mouseupped, true);\n      nodrag(event.view);\n      nopropagation();\n      mousemoving = false;\n      mousedownx = event.clientX;\n      mousedowny = event.clientY;\n      gesture(\"start\");\n    }\n    function mousemoved() {\n      noevent();\n      if (!mousemoving) {\n        var dx = event.clientX - mousedownx,\n          dy = event.clientY - mousedowny;\n        mousemoving = dx * dx + dy * dy > clickDistance2;\n      }\n      gestures.mouse(\"drag\");\n    }\n    function mouseupped() {\n      select(event.view).on(\"mousemove.drag mouseup.drag\", null);\n      yesdrag(event.view, mousemoving);\n      noevent();\n      gestures.mouse(\"end\");\n    }\n    function touchstarted() {\n      if (!filter.apply(this, arguments)) return;\n      var touches = event.changedTouches,\n        c = container.apply(this, arguments),\n        n = touches.length,\n        i,\n        gesture;\n      for (i = 0; i < n; ++i) {\n        if (gesture = beforestart(touches[i].identifier, c, touch, this, arguments)) {\n          nopropagation();\n          gesture(\"start\");\n        }\n      }\n    }\n    function touchmoved() {\n      var touches = event.changedTouches,\n        n = touches.length,\n        i,\n        gesture;\n      for (i = 0; i < n; ++i) {\n        if (gesture = gestures[touches[i].identifier]) {\n          noevent();\n          gesture(\"drag\");\n        }\n      }\n    }\n    function touchended() {\n      var touches = event.changedTouches,\n        n = touches.length,\n        i,\n        gesture;\n      if (touchending) clearTimeout(touchending);\n      touchending = setTimeout(function () {\n        touchending = null;\n      }, 500); // Ghost clicks are delayed!\n      for (i = 0; i < n; ++i) {\n        if (gesture = gestures[touches[i].identifier]) {\n          nopropagation();\n          gesture(\"end\");\n        }\n      }\n    }\n    function beforestart(id, container, point, that, args) {\n      var p = point(container, id),\n        s,\n        dx,\n        dy,\n        sublisteners = listeners.copy();\n      if (!customEvent(new DragEvent(drag, \"beforestart\", s, id, active, p[0], p[1], 0, 0, sublisteners), function () {\n        if ((event.subject = s = subject.apply(that, args)) == null) return false;\n        dx = s.x - p[0] || 0;\n        dy = s.y - p[1] || 0;\n        return true;\n      })) return;\n      return function gesture(type) {\n        var p0 = p,\n          n;\n        switch (type) {\n          case \"start\":\n            gestures[id] = gesture, n = active++;\n            break;\n          case \"end\":\n            delete gestures[id], --active;\n          // nobreak\n          case \"drag\":\n            p = point(container, id), n = active;\n            break;\n        }\n        customEvent(new DragEvent(drag, type, s, id, n, p[0] + dx, p[1] + dy, p[0] - p0[0], p[1] - p0[1], sublisteners), sublisteners.apply, sublisteners, [type, that, args]);\n      };\n    }\n    drag.filter = function (_) {\n      return arguments.length ? (filter = typeof _ === \"function\" ? _ : constant$3(!!_), drag) : filter;\n    };\n    drag.container = function (_) {\n      return arguments.length ? (container = typeof _ === \"function\" ? _ : constant$3(_), drag) : container;\n    };\n    drag.subject = function (_) {\n      return arguments.length ? (subject = typeof _ === \"function\" ? _ : constant$3(_), drag) : subject;\n    };\n    drag.touchable = function (_) {\n      return arguments.length ? (touchable = typeof _ === \"function\" ? _ : constant$3(!!_), drag) : touchable;\n    };\n    drag.on = function () {\n      var value = listeners.on.apply(listeners, arguments);\n      return value === listeners ? drag : value;\n    };\n    drag.clickDistance = function (_) {\n      return arguments.length ? (clickDistance2 = (_ = +_) * _, drag) : Math.sqrt(clickDistance2);\n    };\n    return drag;\n  }\n\n  // Copyright 2018 The Distill Template Authors\n\n  var T$a = Template('d-slider', \"\\n<style>\\n  :host {\\n    position: relative;\\n    display: inline-block;\\n  }\\n\\n  :host(:focus) {\\n    outline: none;\\n  }\\n\\n  .background {\\n    padding: 9px 0;\\n    color: white;\\n    position: relative;\\n  }\\n\\n  .track {\\n    height: 3px;\\n    width: 100%;\\n    border-radius: 2px;\\n    background-color: hsla(0, 0%, 0%, 0.2);\\n  }\\n\\n  .track-fill {\\n    position: absolute;\\n    top: 9px;\\n    height: 3px;\\n    border-radius: 4px;\\n    background-color: hsl(24, 100%, 50%);\\n  }\\n\\n  .knob-container {\\n    position: absolute;\\n    top: 10px;\\n  }\\n\\n  .knob {\\n    position: absolute;\\n    top: -6px;\\n    left: -6px;\\n    width: 13px;\\n    height: 13px;\\n    background-color: hsl(24, 100%, 50%);\\n    border-radius: 50%;\\n    transition-property: transform;\\n    transition-duration: 0.18s;\\n    transition-timing-function: ease;\\n  }\\n  .mousedown .knob {\\n    transform: scale(1.5);\\n  }\\n\\n  .knob-highlight {\\n    position: absolute;\\n    top: -6px;\\n    left: -6px;\\n    width: 13px;\\n    height: 13px;\\n    background-color: hsla(0, 0%, 0%, 0.1);\\n    border-radius: 50%;\\n    transition-property: transform;\\n    transition-duration: 0.18s;\\n    transition-timing-function: ease;\\n  }\\n\\n  .focus .knob-highlight {\\n    transform: scale(2);\\n  }\\n\\n  .ticks {\\n    position: absolute;\\n    top: 16px;\\n    height: 4px;\\n    width: 100%;\\n    z-index: -1;\\n  }\\n\\n  .ticks .tick {\\n    position: absolute;\\n    height: 100%;\\n    border-left: 1px solid hsla(0, 0%, 0%, 0.2);\\n  }\\n\\n</style>\\n\\n  <div class='background'>\\n    <div class='track'></div>\\n    <div class='track-fill'></div>\\n    <div class='knob-container'>\\n      <div class='knob-highlight'></div>\\n      <div class='knob'></div>\\n    </div>\\n    <div class='ticks'></div>\\n  </div>\\n\");\n\n  // ARIA\n  // If the slider has a visible label, it is referenced by aria-labelledby on the slider element. Otherwise, the slider element has a label provided by aria-label.\n  // If the slider is vertically oriented, it has aria-orientation set to vertical. The default value of aria-orientation for a slider is horizontal.\n\n  var keyCodes = {\n    left: 37,\n    up: 38,\n    right: 39,\n    down: 40,\n    pageUp: 33,\n    pageDown: 34,\n    end: 35,\n    home: 36\n  };\n  var Slider = /*#__PURE__*/function (_T$a) {\n    function Slider() {\n      _classCallCheck(this, Slider);\n      return _callSuper(this, Slider, arguments);\n    }\n    _inherits(Slider, _T$a);\n    return _createClass(Slider, [{\n      key: \"connectedCallback\",\n      value: function connectedCallback() {\n        var _this19 = this;\n        this.connected = true;\n        this.setAttribute('role', 'slider');\n        // Makes the element tab-able.\n        if (!this.hasAttribute('tabindex')) {\n          this.setAttribute('tabindex', 0);\n        }\n\n        // Keeps track of keyboard vs. mouse interactions for focus rings\n        this.mouseEvent = false;\n\n        // Handles to shadow DOM elements\n        this.knob = this.root.querySelector('.knob-container');\n        this.background = this.root.querySelector('.background');\n        this.trackFill = this.root.querySelector('.track-fill');\n        this.track = this.root.querySelector('.track');\n\n        // Default values for attributes\n        this.min = this.min ? this.min : 0;\n        this.max = this.max ? this.max : 100;\n        this.scale = linear$1().domain([this.min, this.max]).range([0, 1]).clamp(true);\n        this.origin = this.origin !== undefined ? this.origin : this.min;\n        this.step = this.step ? this.step : 1;\n        this.update(this.value ? this.value : 0);\n        this.ticks = this.ticks ? this.ticks : false;\n        this.renderTicks();\n        this.drag = drag().container(this.background).on('start', function () {\n          _this19.mouseEvent = true;\n          _this19.background.classList.add('mousedown');\n          _this19.changeValue = _this19.value;\n          _this19.dragUpdate();\n        }).on('drag', function () {\n          _this19.dragUpdate();\n        }).on('end', function () {\n          _this19.mouseEvent = false;\n          _this19.background.classList.remove('mousedown');\n          _this19.dragUpdate();\n          if (_this19.changeValue !== _this19.value) _this19.dispatchChange();\n          _this19.changeValue = _this19.value;\n        });\n        this.drag(select(this.background));\n        this.addEventListener('focusin', function () {\n          if (!_this19.mouseEvent) {\n            _this19.background.classList.add('focus');\n          }\n        });\n        this.addEventListener('focusout', function () {\n          _this19.background.classList.remove('focus');\n        });\n        this.addEventListener('keydown', this.onKeyDown);\n      }\n    }, {\n      key: \"attributeChangedCallback\",\n      value: function attributeChangedCallback(attr, oldValue, newValue) {\n        if (isNaN(newValue) || newValue === undefined || newValue === null) return;\n        if (attr == 'min') {\n          this.min = +newValue;\n          this.setAttribute('aria-valuemin', this.min);\n        }\n        if (attr == 'max') {\n          this.max = +newValue;\n          this.setAttribute('aria-valuemax', this.max);\n        }\n        if (attr == 'value') {\n          this.update(+newValue);\n        }\n        if (attr == 'origin') {\n          this.origin = +newValue;\n          // this.update(this.value);\n        }\n        if (attr == 'step') {\n          if (newValue > 0) {\n            this.step = +newValue;\n          }\n        }\n        if (attr == 'ticks') {\n          this.ticks = newValue === '' ? true : newValue;\n        }\n      }\n    }, {\n      key: \"onKeyDown\",\n      value: function onKeyDown(event) {\n        this.changeValue = this.value;\n        var stopPropagation = false;\n        switch (event.keyCode) {\n          case keyCodes.left:\n          case keyCodes.down:\n            this.update(this.value - this.step);\n            stopPropagation = true;\n            break;\n          case keyCodes.right:\n          case keyCodes.up:\n            this.update(this.value + this.step);\n            stopPropagation = true;\n            break;\n          case keyCodes.pageUp:\n            this.update(this.value + this.step * 10);\n            stopPropagation = true;\n            break;\n          case keyCodes.pageDown:\n            this.update(this.value + this.step * 10);\n            stopPropagation = true;\n            break;\n          case keyCodes.home:\n            this.update(this.min);\n            stopPropagation = true;\n            break;\n          case keyCodes.end:\n            this.update(this.max);\n            stopPropagation = true;\n            break;\n        }\n        if (stopPropagation) {\n          this.background.classList.add('focus');\n          event.preventDefault();\n          event.stopPropagation();\n          if (this.changeValue !== this.value) this.dispatchChange();\n        }\n      }\n    }, {\n      key: \"validateValueRange\",\n      value: function validateValueRange(min, max, value) {\n        return Math.max(Math.min(max, value), min);\n      }\n    }, {\n      key: \"quantizeValue\",\n      value: function quantizeValue(value, step) {\n        return Math.round(value / step) * step;\n      }\n    }, {\n      key: \"dragUpdate\",\n      value: function dragUpdate() {\n        var bbox = this.background.getBoundingClientRect();\n        var x = event.x;\n        var width = bbox.width;\n        this.update(this.scale.invert(x / width));\n      }\n    }, {\n      key: \"update\",\n      value: function update(value) {\n        var v = value;\n        if (this.step !== 'any') {\n          v = this.quantizeValue(value, this.step);\n        }\n        v = this.validateValueRange(this.min, this.max, v);\n        if (this.connected) {\n          this.knob.style.left = this.scale(v) * 100 + '%';\n          this.trackFill.style.width = this.scale(this.min + Math.abs(v - this.origin)) * 100 + '%';\n          this.trackFill.style.left = this.scale(Math.min(v, this.origin)) * 100 + '%';\n        }\n        if (this.value !== v) {\n          this.value = v;\n          this.setAttribute('aria-valuenow', this.value);\n          this.dispatchInput();\n        }\n      }\n\n      // Dispatches only on a committed change (basically only on mouseup).\n    }, {\n      key: \"dispatchChange\",\n      value: function dispatchChange() {\n        var e = new Event('change');\n        this.dispatchEvent(e, {});\n      }\n\n      // Dispatches on each value change.\n    }, {\n      key: \"dispatchInput\",\n      value: function dispatchInput() {\n        var e = new Event('input');\n        this.dispatchEvent(e, {});\n      }\n    }, {\n      key: \"renderTicks\",\n      value: function renderTicks() {\n        var _this20 = this;\n        var ticksContainer = this.root.querySelector('.ticks');\n        if (this.ticks !== false) {\n          var tickData = [];\n          if (this.ticks > 0) {\n            tickData = this.scale.ticks(this.ticks);\n          } else if (this.step === 'any') {\n            tickData = this.scale.ticks();\n          } else {\n            tickData = range(this.min, this.max + 1e-6, this.step);\n          }\n          tickData.forEach(function (d) {\n            var tick = document.createElement('div');\n            tick.classList.add('tick');\n            tick.style.left = _this20.scale(d) * 100 + '%';\n            ticksContainer.appendChild(tick);\n          });\n        } else {\n          ticksContainer.style.display = 'none';\n        }\n      }\n    }], [{\n      key: \"observedAttributes\",\n      get: function get() {\n        return ['min', 'max', 'value', 'step', 'ticks', 'origin', 'tickValues', 'tickLabels'];\n      }\n    }]);\n  }(T$a(HTMLElement));\n  var logo = \"<svg viewBox=\\\"-607 419 64 64\\\">\\n  <path d=\\\"M-573.4,478.9c-8,0-14.6-6.4-14.6-14.5s14.6-25.9,14.6-40.8c0,14.9,14.6,32.8,14.6,40.8S-565.4,478.9-573.4,478.9z\\\"/>\\n</svg>\\n\";\n  var headerTemplate = \"\\n<style>\\ndistill-header {\\n  position: relative;\\n  height: 60px;\\n  background-color: hsl(200, 60%, 15%);\\n  width: 100%;\\n  box-sizing: border-box;\\n  z-index: 2;\\n  color: rgba(0, 0, 0, 0.8);\\n  border-bottom: 1px solid rgba(0, 0, 0, 0.08);\\n  box-shadow: 0 1px 6px rgba(0, 0, 0, 0.05);\\n}\\ndistill-header .content {\\n  height: 70px;\\n  grid-column: page;\\n}\\ndistill-header a {\\n  font-size: 16px;\\n  height: 60px;\\n  line-height: 60px;\\n  text-decoration: none;\\n  color: rgba(255, 255, 255, 0.8);\\n  padding: 22px 0;\\n}\\ndistill-header a:hover {\\n  color: rgba(255, 255, 255, 1);\\n}\\ndistill-header svg {\\n  width: 24px;\\n  position: relative;\\n  top: 4px;\\n  margin-right: 2px;\\n}\\n@media(min-width: 1080px) {\\n  distill-header {\\n    height: 70px;\\n  }\\n  distill-header a {\\n    height: 70px;\\n    line-height: 70px;\\n    padding: 28px 0;\\n  }\\n  distill-header .logo {\\n  }\\n}\\ndistill-header svg path {\\n  fill: none;\\n  stroke: rgba(255, 255, 255, 0.8);\\n  stroke-width: 3px;\\n}\\ndistill-header .logo {\\n  font-size: 17px;\\n  font-weight: 200;\\n}\\ndistill-header .nav {\\n  float: right;\\n  font-weight: 300;\\n}\\ndistill-header .nav a {\\n  font-size: 12px;\\n  margin-left: 24px;\\n  text-transform: uppercase;\\n}\\n</style>\\n<div class=\\\"content\\\">\\n  <a href=\\\"/\\\" class=\\\"logo\\\">\\n    \".concat(logo, \"\\n    Distill\\n  </a>\\n  <nav class=\\\"nav\\\">\\n    <a href=\\\"/about/\\\">About</a>\\n    <a href=\\\"/prize/\\\">Prize</a>\\n    <a href=\\\"/journal/\\\">Submit</a>\\n  </nav>\\n</div>\\n\");\n\n  // Copyright 2018 The Distill Template Authors\n\n  var T$b = Template('distill-header', headerTemplate, false);\n  var DistillHeader = /*#__PURE__*/function (_T$b) {\n    function DistillHeader() {\n      _classCallCheck(this, DistillHeader);\n      return _callSuper(this, DistillHeader, arguments);\n    }\n    _inherits(DistillHeader, _T$b);\n    return _createClass(DistillHeader);\n  }(T$b(HTMLElement)); // Copyright 2018 The Distill Template Authors\n  var styles$2 = \"\\n<style>\\n  distill-appendix {\\n    contain: layout style;\\n  }\\n\\n  distill-appendix .citation {\\n    font-size: 11px;\\n    line-height: 15px;\\n    border-left: 1px solid rgba(0, 0, 0, 0.1);\\n    padding-left: 18px;\\n    border: 1px solid rgba(0,0,0,0.1);\\n    background: rgba(0, 0, 0, 0.02);\\n    padding: 10px 18px;\\n    border-radius: 3px;\\n    color: rgba(150, 150, 150, 1);\\n    overflow: hidden;\\n    margin-top: -12px;\\n    white-space: pre-wrap;\\n    word-wrap: break-word;\\n  }\\n\\n  distill-appendix > * {\\n    grid-column: text;\\n  }\\n</style>\\n\";\n  function appendixTemplate(frontMatter) {\n    var html = styles$2;\n    if (typeof frontMatter.githubUrl !== 'undefined') {\n      html += \"\\n    <h3 id=\\\"updates-and-corrections\\\">Updates and Corrections</h3>\\n    <p>\";\n      if (frontMatter.githubCompareUpdatesUrl) {\n        html += \"<a href=\\\"\".concat(frontMatter.githubCompareUpdatesUrl, \"\\\">View all changes</a> to this article since it was first published.\");\n      }\n      html += \"\\n    If you see mistakes or want to suggest changes, please <a href=\\\"\".concat(frontMatter.githubUrl + '/issues/new', \"\\\">create an issue on GitHub</a>. </p>\\n    \");\n    }\n    var journal = frontMatter.journal;\n    if (typeof journal !== 'undefined' && journal.title === 'Distill') {\n      html += \"\\n    <h3 id=\\\"reuse\\\">Reuse</h3>\\n    <p>Diagrams and text are licensed under Creative Commons Attribution <a href=\\\"https://creativecommons.org/licenses/by/4.0/\\\">CC-BY 4.0</a> with the <a class=\\\"github\\\" href=\\\"\".concat(frontMatter.githubUrl, \"\\\">source available on GitHub</a>, unless noted otherwise. The figures that have been reused from other sources don\\u2019t fall under this license and can be recognized by a note in their caption: \\u201CFigure from \\u2026\\u201D.</p>\\n    \");\n    }\n    if (typeof frontMatter.publishedDate !== 'undefined') {\n      html += \"\\n    <h3 id=\\\"citation\\\">Citation</h3>\\n    <p>For attribution in academic contexts, please cite this work as</p>\\n    <pre class=\\\"citation short\\\">\".concat(frontMatter.concatenatedAuthors, \", \\\"\").concat(frontMatter.title, \"\\\", Distill, \").concat(frontMatter.publishedYear, \".</pre>\\n    <p>BibTeX citation</p>\\n    <pre class=\\\"citation long\\\">\").concat(serializeFrontmatterToBibtex(frontMatter), \"</pre>\\n    \");\n    }\n    return html;\n  }\n  var DistillAppendix = /*#__PURE__*/function (_HTMLElement9) {\n    function DistillAppendix() {\n      _classCallCheck(this, DistillAppendix);\n      return _callSuper(this, DistillAppendix, arguments);\n    }\n    _inherits(DistillAppendix, _HTMLElement9);\n    return _createClass(DistillAppendix, [{\n      key: \"frontMatter\",\n      set: function set(frontMatter) {\n        this.innerHTML = appendixTemplate(frontMatter);\n      }\n    }], [{\n      key: \"is\",\n      get: function get() {\n        return 'distill-appendix';\n      }\n    }]);\n  }(/*#__PURE__*/_wrapNativeSuper(HTMLElement));\n  var footerTemplate = \"\\n<style>\\n\\n:host {\\n  color: rgba(255, 255, 255, 0.5);\\n  font-weight: 300;\\n  padding: 2rem 0;\\n  border-top: 1px solid rgba(0, 0, 0, 0.1);\\n  background-color: hsl(180, 5%, 15%); /*hsl(200, 60%, 15%);*/\\n  text-align: left;\\n  contain: content;\\n}\\n\\n.footer-container .logo svg {\\n  width: 24px;\\n  position: relative;\\n  top: 4px;\\n  margin-right: 2px;\\n}\\n\\n.footer-container .logo svg path {\\n  fill: none;\\n  stroke: rgba(255, 255, 255, 0.8);\\n  stroke-width: 3px;\\n}\\n\\n.footer-container .logo {\\n  font-size: 17px;\\n  font-weight: 200;\\n  color: rgba(255, 255, 255, 0.8);\\n  text-decoration: none;\\n  margin-right: 6px;\\n}\\n\\n.footer-container {\\n  grid-column: text;\\n}\\n\\n.footer-container .nav {\\n  font-size: 0.9em;\\n  margin-top: 1.5em;\\n}\\n\\n.footer-container .nav a {\\n  color: rgba(255, 255, 255, 0.8);\\n  margin-right: 6px;\\n  text-decoration: none;\\n}\\n\\n</style>\\n\\n<div class='footer-container'>\\n\\n  <a href=\\\"/\\\" class=\\\"logo\\\">\\n    \".concat(logo, \"\\n    Distill\\n  </a> is dedicated to clear explanations of machine learning\\n\\n  <div class=\\\"nav\\\">\\n    <a href=\\\"https://distill.pub/about/\\\">About</a>\\n    <a href=\\\"https://distill.pub/journal/\\\">Submit</a>\\n    <a href=\\\"https://distill.pub/prize/\\\">Prize</a>\\n    <a href=\\\"https://distill.pub/archive/\\\">Archive</a>\\n    <a href=\\\"https://distill.pub/rss.xml\\\">RSS</a>\\n    <a href=\\\"https://github.com/distillpub\\\">GitHub</a>\\n    <a href=\\\"https://twitter.com/distillpub\\\">Twitter</a>\\n    &nbsp;&nbsp;&nbsp;&nbsp; ISSN 2476-0757\\n  </div>\\n\\n</div>\\n\\n\");\n\n  // Copyright 2018 The Distill Template Authors\n\n  var T$c = Template('distill-footer', footerTemplate);\n  var DistillFooter = /*#__PURE__*/function (_T$c) {\n    function DistillFooter() {\n      _classCallCheck(this, DistillFooter);\n      return _callSuper(this, DistillFooter, arguments);\n    }\n    _inherits(DistillFooter, _T$c);\n    return _createClass(DistillFooter);\n  }(T$c(HTMLElement)); // Copyright 2018 The Distill Template Authors\n  var templateIsLoading = false;\n  var runlevel = 0;\n  var initialize = function initialize() {\n    if (window.distill.runlevel < 1) {\n      throw new Error(\"Insufficient Runlevel for Distill Template!\");\n    }\n\n    /* 1. Flag that we're being loaded */\n    if (\"distill\" in window && window.distill.templateIsLoading) {\n      throw new Error(\"Runlevel 1: Distill Template is getting loaded more than once, aborting!\");\n    } else {\n      window.distill.templateIsLoading = true;\n      console.debug(\"Runlevel 1: Distill Template has started loading.\");\n    }\n\n    /* 2. Add styles if they weren't added during prerendering */\n    makeStyleTag(document);\n    console.debug(\"Runlevel 1: Static Distill styles have been added.\");\n    console.debug(\"Runlevel 1->2.\");\n    window.distill.runlevel += 1;\n\n    /* 3. Register Controller listener functions */\n    /* Needs to happen before components to their connected callbacks have a controller to talk to. */\n    for (var _i2 = 0, _Object$entries2 = Object.entries(Controller.listeners); _i2 < _Object$entries2.length; _i2++) {\n      var _Object$entries2$_i = _slicedToArray(_Object$entries2[_i2], 2),\n        functionName = _Object$entries2$_i[0],\n        callback = _Object$entries2$_i[1];\n      if (typeof callback === \"function\") {\n        document.addEventListener(functionName, callback);\n      } else {\n        console.error(\"Runlevel 2: Controller listeners need to be functions!\");\n      }\n    }\n    console.debug(\"Runlevel 2: We can now listen to controller events.\");\n    console.debug(\"Runlevel 2->3.\");\n    window.distill.runlevel += 1;\n\n    /* 4. Register components */\n    var components = [Abstract, Appendix, Article, Bibliography, Byline, Cite, CitationList, Code, Footnote, FootnoteList, FrontMatter$1, HoverBox, Title, DMath, References, TOC, Figure, Slider, Interstitial];\n    var distillComponents = [DistillHeader, DistillAppendix, DistillFooter];\n    if (window.distill.runlevel < 2) {\n      throw new Error(\"Insufficient Runlevel for adding custom elements!\");\n    }\n    var allComponents = components.concat(distillComponents);\n    var _iterator21 = _createForOfIteratorHelper(allComponents),\n      _step21;\n    try {\n      for (_iterator21.s(); !(_step21 = _iterator21.n()).done;) {\n        var component = _step21.value;\n        console.debug(\"Runlevel 2: Registering custom element: \" + component.is);\n        customElements.define(component.is, component);\n      }\n    } catch (err) {\n      _iterator21.e(err);\n    } finally {\n      _iterator21.f();\n    }\n    console.debug(\"Runlevel 3: Distill Template finished registering custom elements.\");\n    console.debug(\"Runlevel 3->4.\");\n    window.distill.runlevel += 1;\n\n    // If template was added after DOMContentLoaded we may have missed that event.\n    // Controller will check for that case, so trigger the event explicitly:\n    if (domContentLoaded()) {\n      Controller.listeners.DOMContentLoaded();\n    }\n    console.debug(\"Runlevel 4: Distill Template initialisation complete.\");\n    window.distill.templateIsLoading = false;\n    window.distill.templateHasLoaded = true;\n  };\n  window.distill = {\n    runlevel: runlevel,\n    initialize: initialize,\n    templateIsLoading: templateIsLoading\n  };\n\n  /* 0. Check browser feature support; synchronously polyfill if needed */\n  if (Polyfills.browserSupportsAllFeatures()) {\n    console.debug(\"Runlevel 0: No need for polyfills.\");\n    console.debug(\"Runlevel 0->1.\");\n    window.distill.runlevel += 1;\n    window.distill.initialize();\n  } else {\n    console.debug(\"Runlevel 0: Distill Template is loading polyfills.\");\n    Polyfills.load(window.distill.initialize);\n  }\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/distill.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/global */
/******/ 	(() => {
/******/ 		__webpack_require__.g = (function() {
/******/ 			if (typeof globalThis === 'object') return globalThis;
/******/ 			try {
/******/ 				return this || new Function('return this')();
/******/ 			} catch (e) {
/******/ 				if (typeof window === 'object') return window;
/******/ 			}
/******/ 		})();
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/distill.js");
/******/ 	
/******/ })()
;